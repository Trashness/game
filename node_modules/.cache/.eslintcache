[{"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\index.js":"1","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\TestGame.tsx":"2","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\Polygon.tsx":"3","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\ChainType.tsx":"4","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\theme.tsx":"5","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppButton.tsx":"6","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\HintBlock.tsx":"7","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AccountModal.tsx":"8","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppInput.tsx":"9","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppValue.tsx":"10","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\ConnectButton.tsx":"11","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableRow.tsx":"12","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableHeaderCol.tsx":"13","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\utils\\CopyToClipboard.tsx":"14","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTable.tsx":"15","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableCol.tsx":"16","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\repository\\entities\\Currency.tsx":"17","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\link.tsx":"18","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\Identicon.tsx":"19","C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\ThemeChakra.tsx":"20"},{"size":876,"mtime":1681470850239,"results":"21","hashOfConfig":"22"},{"size":10530,"mtime":1681399652771,"results":"23","hashOfConfig":"22"},{"size":655,"mtime":1680797923583,"results":"24","hashOfConfig":"22"},{"size":177,"mtime":1680797912745,"results":"25","hashOfConfig":"22"},{"size":732,"mtime":1681470750781,"results":"26","hashOfConfig":"22"},{"size":415,"mtime":1681217013052,"results":"27","hashOfConfig":"22"},{"size":299,"mtime":1680796834796,"results":"28","hashOfConfig":"22"},{"size":4559,"mtime":1681132547744,"results":"29","hashOfConfig":"22"},{"size":467,"mtime":1680796767037,"results":"30","hashOfConfig":"22"},{"size":408,"mtime":1681398457935,"results":"31","hashOfConfig":"22"},{"size":2027,"mtime":1680799369811,"results":"32","hashOfConfig":"22"},{"size":229,"mtime":1681399932376,"results":"33","hashOfConfig":"22"},{"size":249,"mtime":1681400080473,"results":"34","hashOfConfig":"22"},{"size":113,"mtime":1681228787508,"results":"35","hashOfConfig":"22"},{"size":284,"mtime":1681385011411,"results":"36","hashOfConfig":"22"},{"size":371,"mtime":1681400115391,"results":"37","hashOfConfig":"22"},{"size":1059,"mtime":1680797894147,"results":"38","hashOfConfig":"22"},{"size":221,"mtime":1680158390942,"results":"39","hashOfConfig":"22"},{"size":674,"mtime":1679843955173,"results":"40","hashOfConfig":"22"},{"size":197,"mtime":1681470785254,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13ytckt",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\index.js",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\TestGame.tsx",["84"],"import { useEffect, useState } from \"react\";\r\nimport { AppButton } from \"src/components/AppButton\";\r\nimport { AppInput } from \"src/components/AppInput\";\r\nimport AppValue  from \"src/components/AppValue\";\r\nimport { Currency } from \"src/repository/entities/Currency\";\r\nimport { ChainType } from \"src/servises/network/ChainType\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport AppTable from \"src/components/table/AppTable\";\r\nimport AppTableRow from \"src/components/table/AppTableRow\";\r\nimport AppTableCol from \"src/components/table/AppTableCol\";\r\nimport HintBlock from \"./components/HintBlock\";\r\nimport AppTableHeaderCol from \"src/components/table/AppTableHeaderCol\";\r\nimport { сopyToClipboard } from \"src/utils/CopyToClipboard\";\r\nimport { Contract } from \"web3-eth-contract\";\r\nimport ERC20 from \"src/repository/source/ethereum/abi/ERC20.json\";\r\nimport { AbiItem } from \"web3-utils\";\r\nimport Theme from \"./components/theme\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport ConnectButton from \"src/components/ConnectButton\";\r\nimport AccountModal from \"./components/AccountModal\";\r\nimport { useEthers } from \"@usedapp/core\";\r\nimport Web3 from \"web3\";\r\n\r\nconst TestGame = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { account, chainId } = useEthers();\r\n  const [walletsBalances, setWalletsBalances] = useState<\r\n    Map<string, Currency[]>\r\n  >(new Map());\r\n\r\n  const walletsNames: Map<string, string> = new Map([\r\n    [\"0x2C39b0d4390aB24658b57EcAe1C07fa171cb858f\", \"Семен Синицын\"],\r\n    [\"0x0Ea09B8cC1c50ABa461be9A2A60deE1Be31fed8A\", \"Мария Игнатьева\"],\r\n    [\"0xF3f6e35aB2Fefe8d45e60715dd4acfb9b1a13bBB\", \"Олег Вислов\"],\r\n    [\"0x72598a991BAdD8195Df352710d14b75A02cC2195\", \"Павел Т\"],\r\n    [\"0x193ab79E5B5FBc6Eb303deF30A3c32D24178E571\", \"Илья К\"],\r\n    [\"0x2bE45095521dd63Cf880C24CDace74449d603DFa\", \"Эдуард К\"],\r\n    [\"0xb370eC2782B74e087C06e63435542a636b658fFC\", \"Ирина Мультан\"],\r\n    [\"0xeB0ea44144087f4e11aa433760e8747E21142dF6\", \"Татьяна Владимирова\"],\r\n    [\"0xBEF7b2164224CC64B6E2693c21E60e18d646D157\", \"Александр Дягилев\"],\r\n    [\"0x6B99baE0295cA22FaF62E4e821965271D84da0Cb\", \"Лилия Р\"],\r\n    [\"0x94Cbe46690867A5F7455E52598D1dE2a04234d5B\", \"Василий Трофимчук\"],\r\n  ]);\r\n\r\n  const walletsToFetch = [\r\n    \"0x2C39b0d4390aB24658b57EcAe1C07fa171cb858f\",\r\n    \"0x6B99baE0295cA22FaF62E4e821965271D84da0Cb\",\r\n    \"0x0Ea09B8cC1c50ABa461be9A2A60deE1Be31fed8A\",\r\n    \"0xF3f6e35aB2Fefe8d45e60715dd4acfb9b1a13bBB\",\r\n    \"0x72598a991BAdD8195Df352710d14b75A02cC2195\",\r\n    \"0x193ab79E5B5FBc6Eb303deF30A3c32D24178E571\",\r\n    \"0x2bE45095521dd63Cf880C24CDace74449d603DFa\",\r\n    \"0xb370eC2782B74e087C06e63435542a636b658fFC\",\r\n    \"0x94Cbe46690867A5F7455E52598D1dE2a04234d5B\",\r\n    \"0xeB0ea44144087f4e11aa433760e8747E21142dF6\",\r\n    \"0xBEF7b2164224CC64B6E2693c21E60e18d646D157\",\r\n  ];\r\n\r\n  const tokensToFetch: Currency[] = [\r\n    Currency.MATIC,\r\n    new Currency(\r\n      \"TOK\",\r\n      2,\r\n      new BigNumber(0), ///always 0\r\n      ChainType.POLYGON,\r\n      \"0xF385Da740B7aa9d5A9170e8673423339089Da55D\",\r\n      \"\"\r\n    ),\r\n    new Currency(\r\n      \"PPL\",\r\n      0, //decimals amount\r\n      new BigNumber(0),\r\n      ChainType.POLYGON,\r\n      \"0xd5802CEC841d3E9Abc99453bDF51fBB706E03689\",\r\n      \"\"\r\n    ),\r\n    new Currency(\r\n      \"Soup\",\r\n      0,\r\n      new BigNumber(0), ///always 0\r\n      ChainType.POLYGON,\r\n      \"0xC764a929a3284A842a6C26CC998553199A93c741\",\r\n      \"\"\r\n    ),\r\n  ];\r\n\r\n  /* @ts-ignore */\r\n  let web3 = new Web3(window.ethereum);\r\n\r\n  useEffect(() => {\r\n    /* @ts-ignore */\r\n    if (chainId) {\r\n      walletsBalance();\r\n    }\r\n  }, [chainId]);\r\n\r\n  const walletsBalance = async () => {\r\n    const newData = new Map(walletsBalances);\r\n    await Promise.all(\r\n      walletsToFetch.map(async (walletaddress) => \r\n        await Promise.all(\r\n          tokensToFetch.map(async (token) => {\r\n            const contract: Contract = new web3!.eth.Contract(\r\n              ERC20 as AbiItem[],\r\n              token.address\r\n            ) as any;\r\n            let balance = 0;\r\n            let matic = 0;\r\n            if (token.address) {\r\n              try {\r\n                if (\r\n                  token.address === \"0xC764a929a3284A842a6C26CC998553199A93c741\"\r\n                ) {\r\n                  balance = await contract.methods\r\n                    .balanceOf(walletaddress, 0)\r\n                    .call();\r\n                } else {\r\n                  balance = await contract.methods // TOKENs\r\n                    .balanceOf(walletaddress)\r\n                    .call();\r\n                }\r\n                if (token.decimals > 0) {\r\n                  balance = balance / 10 ** token.decimals; \r\n                }\r\n              } catch (e) {\r\n                balance = 0;\r\n              }\r\n            } else {\r\n              matic = await web3.eth.getBalance(walletaddress) as unknown as number; // MATIC\r\n              balance = Math.round((matic / 10 ** token.decimals) *1000)/ 1000;\r\n            }\r\n            let thisvalue = new BigNumber(balance);\r\n            const setCurrency = new Currency(token.symbol, token.decimals, thisvalue, token.chain, token.address, token.logo) \r\n            return setCurrency\r\n          })\r\n        ).then((result) => {\r\n          newData.set(walletaddress, result);\r\n        })\r\n      )\r\n    ).then(() => setWalletsBalances(newData));\r\n  };\r\n\r\n  const sendTokens = async (\r\n    tokenAddress: string | undefined,\r\n    userAddress: string,\r\n    amount: string\r\n  ) => {\r\n    const contract: Contract = new web3!.eth.Contract(\r\n      ERC20 as AbiItem[],\r\n      tokenAddress\r\n    ) as any;\r\n    if (tokenAddress)\r\n      await contract.methods\r\n        .transferFrom(\r\n          account,\r\n          userAddress,\r\n          Currency.MATIC.convertToWei(parseFloat(amount))\r\n        )\r\n        .call();\r\n    else\r\n      await web3!.eth.sendTransaction({\r\n        to: userAddress,\r\n        from: account,\r\n        value: Currency.MATIC.convertToWei(parseFloat(amount)),\r\n      });\r\n  };\r\n  \r\n  const addToken = async () => {\r\n    if (web3) {\r\n      await (web3.currentProvider as any).request(\r\n        {\r\n          method: \"wallet_watchAsset\",\r\n          params: {\r\n            type: \"ERC20\",\r\n            options: {\r\n              address: \"0xF385Da740B7aa9d5A9170e8673423339089Da55D\",\r\n              symbol: \"TOK\",\r\n              decimals: 2,\r\n              image: \"\",\r\n            },\r\n          },\r\n          id: 25,\r\n        },\r\n        (err: any, result: any) => {\r\n          if (err) {\r\n            return console.error(err);\r\n          } else {\r\n            return console.log(result.result);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const columnWidth = \"calc(100%/5)\"; //divide on number of columns\r\n  return (\r\n    \r\n      <Theme> \r\n        <ConnectButton handleOpenModal={onOpen} />\r\n        <AccountModal isOpen={isOpen} onClose={onClose} />\r\n        <AppButton\r\n          onClick={async () => (account ? await addToken() : chainId)}\r\n          style={{\r\n            margin: \"auto\",\r\n            padding: \"10px 15px\",\r\n            height: \"48px\",\r\n          }}\r\n        >\r\n          Add TOK token\r\n        </AppButton>\r\n          \r\n        <AppTable>\r\n          <AppTableRow> \r\n            <AppTableHeaderCol width={columnWidth}>Name</AppTableHeaderCol>\r\n            <AppTableHeaderCol width={columnWidth}>Wallet</AppTableHeaderCol>\r\n            {tokensToFetch.map((token, index) => (\r\n              <AppTableHeaderCol width={columnWidth} key={index}>\r\n                {token.symbol} Amount\r\n              </AppTableHeaderCol>\r\n            ))}\r\n          </AppTableRow> \r\n          {[...walletsBalances.keys()].length > 0 ? (\r\n            walletsToFetch.map((item, index) => (\r\n              <AppTableRow key={index}>\r\n                <AppTableCol width={columnWidth}>\r\n                  {walletsNames.get(item)}\r\n                </AppTableCol>\r\n                <AppTableCol width={columnWidth}>\r\n                  {item.slice(0, 6)}...{item.slice(item.length -6)}\r\n                  <AppButton onClick={() => сopyToClipboard(item)}>copy</AppButton>\r\n                  \r\n                </AppTableCol>\r\n                {walletsBalances.get(item)?.map((currency, ind) => (\r\n                  <AppTableCol key={ind} width={columnWidth}>\r\n                    <AppValue\r\n                      /*value={Currency.MATIC.convertFromWei(\r\n                        currency.value.toString()\r\n                      )}\r\n                      chain={currency.chain}\r\n                      roundingFloat\r\n                      {new BigNumber(currency.value.toString()).div(10 ** currency.decimals).toNumber().toFixed(3)}*/\r\n                    >\r\n                      {currency.value.toString()}\r\n                      &nbsp;{currency.symbol}\r\n                    </AppValue>\r\n                    \r\n                    <form\r\n                      style={{\r\n                        width: \"auto\",\r\n                        display: \"flex\",\r\n                        flexFlow: \"row nowrap\",\r\n                        gap: \"5px\",\r\n                      }}\r\n                      onSubmit={async (e) => {\r\n                        e.preventDefault();\r\n                        await sendTokens(\r\n                          currency.address ?? undefined,\r\n                          item,\r\n                          (e.target[0] as HTMLInputElement).value\r\n                        );\r\n                      }}\r\n                    >\r\n                      <AppInput\r\n                        onChange={() => null}\r\n                        name=\"amount\"\r\n                        placeholder={\"amount\"}\r\n                        style={{\r\n                          height: \"26px\",\r\n                          width: \"75px\",\r\n                        }}\r\n                        autoComplete={\"off\"}\r\n                      />\r\n                      <AppButton\r\n                        name=\"submit\"\r\n                        type=\"submit\"\r\n                        style={{\r\n                          height: \"26px\",\r\n                        }}\r\n                      >\r\n                        Send\r\n                      </AppButton>\r\n                    </form>\r\n                  </AppTableCol>\r\n                ))}\r\n              </AppTableRow>\r\n            ))\r\n          ) : (\r\n            <HintBlock text=\"loading or no data...\" />\r\n          )}\r\n        </AppTable>\r\n      </Theme>\r\n    \r\n  );\r\n};\r\n\r\nexport default TestGame\r\n",["85","86"],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\Polygon.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\ChainType.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\theme.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppButton.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\HintBlock.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AccountModal.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppInput.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\AppValue.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\ConnectButton.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableRow.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableHeaderCol.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\utils\\CopyToClipboard.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTable.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\table\\AppTableCol.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\repository\\entities\\Currency.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\servises\\network\\link.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\Identicon.tsx",[],"C:\\Users\\Kompa\\Desktop\\games\\my-app\\src\\components\\ThemeChakra.tsx",[],{"ruleId":"87","severity":1,"message":"88","line":95,"column":6,"nodeType":"89","endLine":95,"endColumn":15,"suggestions":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'walletsBalance'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-native-reassign",["96"],"no-negated-in-lhs",["97"],{"desc":"98","fix":"99"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [chainId, walletsBalance]",{"range":"100","text":"101"},[3583,3592],"[chainId, walletsBalance]"]