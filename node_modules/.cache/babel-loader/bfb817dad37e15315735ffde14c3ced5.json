{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\nexport var multicall1Factory = function multicall1Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall : multicall;\n};\n/**\n * @public\n */\nexport function multicall(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n/**\n * @public\n */\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, _yield$contract$aggre, _yield$contract$aggre2, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", {});\n        case 2:\n          contract = new Contract(address, ABI, provider);\n          _context.next = 5;\n          return contract.aggregate(requests.map(function (_ref) {\n            var address = _ref.address,\n              data = _ref.data;\n            return [address, data];\n          }), {\n            blockTag: blockNumber\n          });\n        case 5:\n          _yield$contract$aggre = _context.sent;\n          _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n          results = _yield$contract$aggre2[1];\n          return _context.abrupt(\"return\", decodeResult(results, requests));\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}\nexport function fastEncodingMulticall(_x5, _x6, _x7, _x8) {\n  return _fastEncodingMulticall.apply(this, arguments);\n}\nfunction _fastEncodingMulticall() {\n  _fastEncodingMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeAggregate, _decodeAggregate2, results;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(requests.length === 0)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", {});\n        case 2:\n          _context2.next = 4;\n          return provider.call({\n            to: address,\n            data: encodeAggregate(requests.map(function (_ref2) {\n              var address = _ref2.address,\n                data = _ref2.data;\n              return [address, data];\n            }))\n          }, blockNumber);\n        case 4:\n          response = _context2.sent;\n          _decodeAggregate = decodeAggregate(response), _decodeAggregate2 = _slicedToArray(_decodeAggregate, 2), results = _decodeAggregate2[1];\n          return _context2.abrupt(\"return\", decodeResult(results, requests));\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _fastEncodingMulticall.apply(this, arguments);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  var state = {};\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n      address = _requests$i.address,\n      data = _requests$i.data;\n    var result = results[i];\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall : multicall);\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [, results] = decodeAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { value: result, success: true };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}