{"ast":null,"code":"import _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getDefaultState } from './mutation.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\nimport { shallowEqualObjects } from './utils.esm.js';\n\n// CLASS\nvar MutationObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationObserver, _Subscribable);\n  var _super = _createSuper(MutationObserver);\n  function MutationObserver(client, options) {\n    var _this;\n    _classCallCheck(this, MutationObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.setOptions(options);\n    _this.bindMethods();\n    _this.updateResult();\n    return _this;\n  }\n  _createClass(MutationObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.mutate = this.mutate.bind(this);\n      this.reset = this.reset.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var _this$currentMutation;\n      var prevOptions = this.options;\n      this.options = this.client.defaultMutationOptions(options);\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getMutationCache().notify({\n          type: 'observerOptionsUpdated',\n          mutation: this.currentMutation,\n          observer: this\n        });\n      }\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        var _this$currentMutation2;\n        (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n      }\n    }\n  }, {\n    key: \"onMutationUpdate\",\n    value: function onMutationUpdate(action) {\n      this.updateResult(); // Determine which callbacks to trigger\n\n      var notifyOptions = {\n        listeners: true\n      };\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = true;\n      } else if (action.type === 'error') {\n        notifyOptions.onError = true;\n      }\n      this.notify(notifyOptions);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.currentMutation = undefined;\n      this.updateResult();\n      this.notify({\n        listeners: true\n      });\n    }\n  }, {\n    key: \"mutate\",\n    value: function mutate(variables, options) {\n      this.mutateOptions = options;\n      if (this.currentMutation) {\n        this.currentMutation.removeObserver(this);\n      }\n      this.currentMutation = this.client.getMutationCache().build(this.client, _objectSpread(_objectSpread({}, this.options), {}, {\n        variables: typeof variables !== 'undefined' ? variables : this.options.variables\n      }));\n      this.currentMutation.addObserver(this);\n      return this.currentMutation.execute();\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult() {\n      var state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n      var result = _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: state.status === 'loading',\n        isSuccess: state.status === 'success',\n        isError: state.status === 'error',\n        isIdle: state.status === 'idle',\n        mutate: this.mutate,\n        reset: this.reset\n      });\n      this.currentResult = result;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(options) {\n      var _this2 = this;\n      notifyManager.batch(function () {\n        // First trigger the mutate callbacks\n        if (_this2.mutateOptions && _this2.hasListeners()) {\n          if (options.onSuccess) {\n            var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n            (_this$mutateOptions$o = (_this$mutateOptions = _this2.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, _this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o2 = (_this$mutateOptions2 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, _this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);\n          } else if (options.onError) {\n            var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n            (_this$mutateOptions$o3 = (_this$mutateOptions3 = _this2.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o4 = (_this$mutateOptions4 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n          }\n        } // Then trigger the listeners\n\n        if (options.listeners) {\n          _this2.listeners.forEach(function (listener) {\n            listener(_this2.currentResult);\n          });\n        }\n      });\n    }\n  }]);\n  return MutationObserver;\n}(Subscribable);\nexport { MutationObserver };","map":{"version":3,"sources":["../../src/mutationObserver.ts"],"names":["MutationObserver","Subscribable","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","listeners","length","removeObserver","onMutationUpdate","action","notifyOptions","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","hasListeners","data","context","onSettled","error","forEach","listener"],"mappings":"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","sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}