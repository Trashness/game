{"ast":null,"code":"import _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { registerProvider } from \"../registries/ProviderRegistry.js\";\n/**\n * The decorators `@Injectable()` declare a new service can be injected in other service, controller, interceptor, etc.. on there `constructor`.\n * All classes annotated with `@Injectable()` are built one time, excepted if you change the default provider configuration.\n *\n * ::: tip\n * `@Injectable()` use the `reflect-metadata` to collect and inject the built provided to other services.\n * :::\n *\n * ### Options\n *\n * - type (@@ProviderType@@  or `string`): Kind of provider. (Default: `ProviderType.PROVIDER`)\n * - scope (@@ProviderScope@@): Kind of provider. (Default: `ProviderScope.SINGLETON`)\n * - provide (@@TokenProvider@@): An injection token (Note: This option override default metadata generated by Typescript).\n * - deps (`Type<any>`): List of class or provider which will be injected to the constructor (Note: This options override default metadata generated by Typescript).\n *\n * @returns {Function}\n * @decorator\n */\nexport function Injectable() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (target) {\n    registerProvider(_objectSpread(_objectSpread({}, options), options.provide ? {\n      useClass: target\n    } : {\n      provide: target\n    }));\n  };\n}","map":{"version":3,"sources":["../../../src/decorators/injectable.ts"],"names":[],"mappings":";AACA,SAAQ,gBAAgB,QAAO,mCAAiC;AAEhE;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAM,SAAU,UAAU,CAAA,EAAoC;EAAA,IAAnC,OAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAiC,CAAA,CAAE;EAC5D,OAAO,UAAC,MAAW,EAAI;IACrB,gBAAgB,CAAA,aAAA,CAAA,aAAA,KACX,OAAO,GACN,OAAO,CAAC,OAAO,GAAG;MAAC,QAAQ,EAAE;IAAM,CAAC,GAAG;MAAC,OAAO,EAAE;IAAM,CAAC,EAC5D;EACJ,CAAC;AACH","sourceRoot":"","sourcesContent":["import { registerProvider } from \"../registries/ProviderRegistry.js\";\n/**\n * The decorators `@Injectable()` declare a new service can be injected in other service, controller, interceptor, etc.. on there `constructor`.\n * All classes annotated with `@Injectable()` are built one time, excepted if you change the default provider configuration.\n *\n * ::: tip\n * `@Injectable()` use the `reflect-metadata` to collect and inject the built provided to other services.\n * :::\n *\n * ### Options\n *\n * - type (@@ProviderType@@  or `string`): Kind of provider. (Default: `ProviderType.PROVIDER`)\n * - scope (@@ProviderScope@@): Kind of provider. (Default: `ProviderScope.SINGLETON`)\n * - provide (@@TokenProvider@@): An injection token (Note: This option override default metadata generated by Typescript).\n * - deps (`Type<any>`): List of class or provider which will be injected to the constructor (Note: This options override default metadata generated by Typescript).\n *\n * @returns {Function}\n * @decorator\n */\nexport function Injectable(options = {}) {\n    return (target) => {\n        registerProvider({\n            ...options,\n            ...(options.provide ? { useClass: target } : { provide: target })\n        });\n    };\n}\n//# sourceMappingURL=injectable.js.map"]},"metadata":{},"sourceType":"module"}