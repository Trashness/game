{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport LocalStorage from '../helpers/LocalStorage';\nimport { useConfig } from './useConfig';\nfunction getItem(key, storage) {\n  var item = storage.getItem(key);\n  if (item !== null) {\n    try {\n      return JSON.parse(item);\n    } catch (_a) {\n      // ignore error\n    }\n  }\n}\nfunction setItem(key, value, storage) {\n  if (value === undefined) {\n    storage.removeItem(key);\n  } else {\n    var toStore = JSON.stringify(value);\n    try {\n      storage.setItem(key, toStore);\n      return JSON.parse(toStore);\n    } catch (err) {\n      console.error('Error in localStorage', err);\n      storage.removeItem(key);\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n  var _useConfig = useConfig(),\n    _useConfig$localStora = _useConfig.localStorageOverride,\n    localStorageOverride = _useConfig$localStora === void 0 ? typeof window !== 'undefined' ? window.localStorage : new LocalStorage() : _useConfig$localStora;\n  var _useState = useState(function () {\n      return getItem(key, localStorageOverride);\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  useEffect(function () {\n    setValue(getItem(key, localStorageOverride));\n  }, [key]);\n  useEffect(function () {\n    setItem(key, value, localStorageOverride);\n  }, [value]);\n  // As value updating relies on useEffect, it takes multiple rerenders to fully update the value.\n  // The third element in the return array allows to get the immediate value stored in the localStorage.\n  return [value, setValue, function () {\n    return getItem(key, localStorageOverride);\n  }];\n}","map":{"version":3,"sources":["../../../../src/hooks/useLocalStorage.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAC3C,OAAO,YAAY,MAAM,yBAAyB;AAClD,SAAS,SAAS,QAAQ,aAAa;AAEvC,SAAS,OAAO,CAAC,GAAW,EAAE,OAA2C,EAAA;EACvE,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;EACjC,IAAI,IAAI,KAAK,IAAI,EAAE;IACjB,IAAI;MACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;KACxB,CAAC,OAAA,EAAA,EAAM;MACN;IAAA;EAEH;AACH;AAEA,SAAS,OAAO,CAAC,GAAW,EAAE,KAAU,EAAE,OAA2C,EAAA;EACnF,IAAI,KAAK,KAAK,SAAS,EAAE;IACvB,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC;GACxB,MAAM;IACL,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACrC,IAAI;MACF,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;MAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;KAC3B,CAAC,OAAO,GAAG,EAAE;MACZ,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC;MAC3C,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC;IACxB;EACF;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,eAAe,CAAC,GAAW,EAAA;EACzC,IAAA,UAAA,GAEI,SAAS,EAAE;IAAA,qBAAA,GAAA,UAAA,CADb,oBAAoB;IAApB,oBAAoB,GAAA,qBAAA,cAAG,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,GAAA,qBAAA;EAGjG,IAAA,SAAA,GAA0B,QAAQ,CAAC;MAAA,OAAM,OAAO,CAAC,GAAG,EAAE,oBAAoB,CAAC;IAAA,EAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAArE,KAAK,GAAA,UAAA;IAAE,QAAQ,GAAA,UAAA;EAEtB,SAAS,CAAC,YAAK;IACb,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;EAC9C,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EAET,SAAS,CAAC,YAAK;IACb,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,oBAAoB,CAAC;EAC3C,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;EAEX;EACA;EACA,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE;IAAA,OAAM,OAAO,CAAC,GAAG,EAAE,oBAAoB,CAAC;EAAA,EAAU;AAC7E","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport LocalStorage from '../helpers/LocalStorage';\nimport { useConfig } from './useConfig';\nfunction getItem(key, storage) {\n    const item = storage.getItem(key);\n    if (item !== null) {\n        try {\n            return JSON.parse(item);\n        }\n        catch (_a) {\n            // ignore error\n        }\n    }\n}\nfunction setItem(key, value, storage) {\n    if (value === undefined) {\n        storage.removeItem(key);\n    }\n    else {\n        const toStore = JSON.stringify(value);\n        try {\n            storage.setItem(key, toStore);\n            return JSON.parse(toStore);\n        }\n        catch (err) {\n            console.error('Error in localStorage', err);\n            storage.removeItem(key);\n        }\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n    const { localStorageOverride = typeof window !== 'undefined' ? window.localStorage : new LocalStorage(), } = useConfig();\n    const [value, setValue] = useState(() => getItem(key, localStorageOverride));\n    useEffect(() => {\n        setValue(getItem(key, localStorageOverride));\n    }, [key]);\n    useEffect(() => {\n        setItem(key, value, localStorageOverride);\n    }, [value]);\n    // As value updating relies on useEffect, it takes multiple rerenders to fully update the value.\n    // The third element in the return array allows to get the immediate value stored in the localStorage.\n    return [value, setValue, () => getItem(key, localStorageOverride)];\n}\n//# sourceMappingURL=useLocalStorage.js.map"]},"metadata":{},"sourceType":"module"}