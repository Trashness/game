{"ast":null,"code":"import _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Subscribable } from './subscribable.esm.js';\nimport { isServer } from './utils.esm.js';\nvar FocusManager = /*#__PURE__*/function (_Subscribable) {\n  _inherits(FocusManager, _Subscribable);\n  var _super = _createSuper(FocusManager);\n  function FocusManager() {\n    var _this;\n    _classCallCheck(this, FocusManager);\n    _this = _super.call(this);\n    _this.setup = function (onFocus) {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        var listener = function listener() {\n          return onFocus();\n        }; // Listen to visibillitychange and focus\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n      return;\n    };\n    return _this;\n  }\n  _createClass(FocusManager, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (!this.cleanup) {\n        this.setEventListener(this.setup);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        var _this$cleanup;\n        (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n        this.cleanup = undefined;\n      }\n    }\n  }, {\n    key: \"setEventListener\",\n    value: function setEventListener(setup) {\n      var _this2 = this;\n      var _this$cleanup2;\n      this.setup = setup;\n      (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n      this.cleanup = setup(function (focused) {\n        if (typeof focused === 'boolean') {\n          _this2.setFocused(focused);\n        } else {\n          _this2.onFocus();\n        }\n      });\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(focused) {\n      this.focused = focused;\n      if (focused) {\n        this.onFocus();\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.listeners.forEach(function (listener) {\n        listener();\n      });\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      if (typeof this.focused === 'boolean') {\n        return this.focused;\n      } // document global can be unavailable in react native\n\n      if (typeof document === 'undefined') {\n        return true;\n      }\n      return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n    }\n  }]);\n  return FocusManager;\n}(Subscribable);\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"sources":["../../src/focusManager.ts"],"names":["FocusManager","Subscribable","constructor","setup","onFocus","isServer","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","focused","setFocused","listeners","forEach","isFocused","document","includes","visibilityState","focusManager"],"mappings":"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","sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n"]},"metadata":{},"sourceType":"module"}