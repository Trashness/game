{"ast":null,"code":"import { decorateProperty as e } from \"./base.js\";\nimport { queryAssignedElements as t } from \"./query-assigned-elements.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction o(o, n, r) {\n  var l,\n    s = o;\n  return \"object\" == typeof o ? (s = o.slot, l = o) : l = {\n    flatten: n\n  }, r ? t({\n    slot: s,\n    flatten: n,\n    selector: r\n  }) : e({\n    descriptor: function descriptor(e) {\n      return {\n        get: function get() {\n          var e, t;\n          var o = \"slot\" + (s ? \"[name=\".concat(s, \"]\") : \":not([name])\"),\n            n = null === (e = this.renderRoot) || void 0 === e ? void 0 : e.querySelector(o);\n          return null !== (t = null == n ? void 0 : n.assignedNodes(l)) && void 0 !== t ? t : [];\n        },\n        enumerable: !0,\n        configurable: !0\n      };\n    }\n  });\n}\nexport { o as queryAssignedNodes };","map":{"version":3,"sources":["../src/decorators/query-assigned-nodes.ts"],"names":["queryAssignedNodes","slotOrOptions","flatten","selector","slot","assignedNodesOptions","queryAssignedElements","decorateProperty","descriptor","_name","get","slotSelector","slotEl","_a","renderRoot","querySelector","_b","assignedNodes","enumerable","configurable"],"mappings":";;;;;;;SAuGgBA,CAAAA,CACdC,CAAAA,EACAC,CAAAA,EACAC,CAAAA,EAAAA;EAGA,IACIE,CAAAA;IADAD,CAAAA,GAAOH,CAAAA;EAWX,OAT6B,QAAA,IAAA,OAAlBA,CAAAA,IACTG,CAAAA,GAAOH,CAAAA,CAAcG,IAAAA,EACrBC,CAAAA,GAAuBJ,CAAAA,IAEvBI,CAAAA,GAAuB;IAACH,OAAAA,EAAAA;EAAAA,CAAAA,EAKtBC,CAAAA,GACKG,CAAAA,CAAsB;IAC3BF,IAAAA,EAAMA,CAAAA;IACNF,OAAAA,EAAAA,CAAAA;IACAC,QAAAA,EAAAA;EAAAA,CAAAA,CAAAA,GAIGI,CAAAA,CAAiB;IACtBC,UAAAA,EAAaC,SAAAA,WAAAA,CAAAA;MAAAA,OAAwB;QACnCC,GAAAA,WAAAA,IAAAA,EAAAA;UAAAA,IAAAA,CAAAA,EAAAA,CAAAA;UACE,IAAMC,CAAAA,GAAe,MAAA,IAAOP,CAAAA,YAAAA,MAAAA,CAAgBA,CAAAA,SAAU,cAAA,CAAA;YAChDQ,CAAAA,GACW,IAAA,MAAfC,CAAAA,GAAAA,IAAAA,CAAKC,UAAAA,CAAAA,IAAAA,KAAU,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAEC,aAAAA,CAA+BJ,CAAAA,CAAAA;UAClD,OAAkD,IAAA,MAA3CK,CAAAA,GAAAA,IAAAA,IAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAQC,aAAAA,CAAcZ,CAAAA,CAAAA,CAAAA,IAAAA,KAAqB,CAAA,KAAA,CAAA,GAAA,CAAA,GAAI,EACvD;QAAA,CAAA;QACDa,UAAAA,EAAAA,CAAY,CAAA;QACZC,YAAAA,EAAAA,CAAc;MAAA,CAAA;IAAA;EAAA,CAAA,CAGpB;AAAA;AAAA,SAAA,CAAA,IAAA,kBAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\nimport {queryAssignedElements} from './query-assigned-elements.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\n// TypeScript requires the decorator return type to be `void|any`.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TSDecoratorReturnType = void | any;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): TSDecoratorReturnType;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>` if used\n * without a `selector` or `Array<HTMLElement>` if a selector is provided.\n * Use {@linkcode queryAssignedElements @queryAssignedElements} to list only\n * elements, and optionally filter the element list using a CSS selector.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n *     meaning any assigned nodes that are slot elements are replaced with their\n *     assigned nodes.\n * @param selector A CSS selector used to filter the elements returned.\n *\n * @category Decorator\n * @deprecated Prefer passing in a single options object, i.e. `{slot: 'list'}`.\n * If using `selector` please use `@queryAssignedElements`.\n * `@queryAssignedNodes('', false, '.item')` is functionally identical to\n * `@queryAssignedElements({slot: '', flatten: false, selector: '.item'})` or\n * `@queryAssignedElements({selector: '.item'})`.\n */\nexport function queryAssignedNodes(\n  slotName?: string,\n  flatten?: boolean,\n  selector?: string\n): TSDecoratorReturnType;\n\nexport function queryAssignedNodes(\n  slotOrOptions?: string | QueryAssignedNodesOptions,\n  flatten?: boolean,\n  selector?: string\n) {\n  // Normalize the overloaded arguments.\n  let slot = slotOrOptions;\n  let assignedNodesOptions: AssignedNodesOptions;\n  if (typeof slotOrOptions === 'object') {\n    slot = slotOrOptions.slot;\n    assignedNodesOptions = slotOrOptions;\n  } else {\n    assignedNodesOptions = {flatten};\n  }\n\n  // For backwards compatibility, queryAssignedNodes with a selector behaves\n  // exactly like queryAssignedElements with a selector.\n  if (selector) {\n    return queryAssignedElements({\n      slot: slot as string,\n      flatten,\n      selector,\n    });\n  }\n\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return slotEl?.assignedNodes(assignedNodesOptions) ?? [];\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}