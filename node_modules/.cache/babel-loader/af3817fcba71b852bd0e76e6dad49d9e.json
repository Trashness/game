{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nimport { useMemo } from 'react';\nvar GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nvar GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b;\n  var chainId = useChainId({\n    queryParams: queryParams\n  });\n  var _useConfig = useConfig(),\n    configRefresh = _useConfig.refresh;\n  var blockNumbers = useBlockNumbers();\n  var address = useMulticallAddress(queryParams);\n  var refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n  var isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n  var refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n  var timestampResult = useRawCall(address && chainId !== undefined && {\n    address: address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId: chainId,\n    isStatic: isStatic,\n    refreshPerBlocks: refreshPerBlocks\n  });\n  var difficulty = useRawCall(address && chainId !== undefined && {\n    address: address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId: chainId,\n    isStatic: isStatic,\n    refreshPerBlocks: refreshPerBlocks\n  });\n  var timestamp = useMemo(function () {\n    try {\n      return timestampResult !== undefined ? new Date(BigNumber.from(timestampResult.value).mul(1000).toNumber()) : undefined;\n    } catch (e) {\n      console.warn('Failed to parse timestamp of a block', e);\n    }\n  }, [timestampResult]);\n  return {\n    timestamp: timestamp,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    blockNumber: chainId ? blockNumbers[chainId] : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockMeta.ts"],"names":[],"mappings":"AAAA,SAAkB,YAAY,QAAQ,cAAc;AACpD,SAAS,SAAS,QAAQ,QAAQ;AAClC,SAAS,mBAAmB,QAAQ,uBAAuB;AAE3D,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,eAAe,QAAQ,mBAAmB;AACnD,SAAS,OAAO,QAAQ,OAAO;AAE/B,IAAM,gCAAgC,GAAG,YAAY,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,EAAE,CAAC;AACxG,IAAM,iCAAiC,GAAG,YAAY,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,EAAE,CAAC;AAE1G;;;AAGG;AACH,OAAM,SAAU,YAAY,CAAA,EAA8B;EAAA,IAA7B,WAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,CAAA,CAAE;;EACxD,IAAM,OAAO,GAAG,UAAU,CAAC;IAAE,WAAW,EAAX;EAAW,CAAE,CAAC;EAC3C,IAAA,UAAA,GAAmC,SAAS,EAAE;IAA7B,aAAa,GAAA,UAAA,CAAtB,OAAO;EACf,IAAM,YAAY,GAAG,eAAe,EAAE;EAEtC,IAAM,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC;EAChD,IAAM,OAAO,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa;EACpD,IAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,KAAK,OAAO;EAC5D,IAAM,gBAAgB,GAAG,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,SAAS;EAC1E,IAAM,eAAe,GAAG,UAAU,CAChC,OAAO,IACL,OAAO,KAAK,SAAS,IAAI;IACvB,OAAO,EAAP,OAAO;IACP,IAAI,EAAE,gCAAgC;IACtC,OAAO,EAAP,OAAO;IACP,QAAQ,EAAR,QAAQ;IACR,gBAAgB,EAAhB;GACD,CACJ;EACD,IAAM,UAAU,GAAG,UAAU,CAC3B,OAAO,IACL,OAAO,KAAK,SAAS,IAAI;IACvB,OAAO,EAAP,OAAO;IACP,IAAI,EAAE,iCAAiC;IACvC,OAAO,EAAP,OAAO;IACP,QAAQ,EAAR,QAAQ;IACR,gBAAgB,EAAhB;GACD,CACJ;EAED,IAAM,SAAS,GAAG,OAAO,CAAC,YAAK;IAC7B,IAAI;MACF,OAAO,eAAe,KAAK,SAAS,GAChC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,GACpE,SAAS;KACd,CAAC,OAAO,CAAM,EAAE;MACf,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,CAAC,CAAC;IACxD;EACH,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;EAErB,OAAO;IACL,SAAS,EAAT,SAAS;IACT,UAAU,EAAE,UAAU,KAAK,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS;IACnF,WAAW,EAAE,OAAO,GAAG,YAAY,CAAC,OAAkB,CAAC,GAAG;GAC3D;AACH","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nimport { useMemo } from 'react';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams = {}) {\n    var _a, _b;\n    const chainId = useChainId({ queryParams });\n    const { refresh: configRefresh } = useConfig();\n    const blockNumbers = useBlockNumbers();\n    const address = useMulticallAddress(queryParams);\n    const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n    const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n    const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n    const timestampResult = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    const difficulty = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    const timestamp = useMemo(() => {\n        try {\n            return timestampResult !== undefined\n                ? new Date(BigNumber.from(timestampResult.value).mul(1000).toNumber())\n                : undefined;\n        }\n        catch (e) {\n            console.warn('Failed to parse timestamp of a block', e);\n        }\n    }, [timestampResult]);\n    return {\n        timestamp,\n        difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n        blockNumber: chainId ? blockNumbers[chainId] : undefined,\n    };\n}\n//# sourceMappingURL=useBlockMeta.js.map"]},"metadata":{},"sourceType":"module"}