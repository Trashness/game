{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n  var _useEthers = useEthers(),\n    library = _useEthers.library,\n    chainId = _useEthers.chainId;\n  var transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  var _usePromiseTransactio = usePromiseTransaction(transactionChainId, options),\n    promiseTransaction = _usePromiseTransactio.promiseTransaction,\n    state = _usePromiseTransactio.state,\n    resetState = _usePromiseTransactio.resetState;\n  var config = useConfig();\n  var gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  var providers = useReadonlyNetworks();\n  var provider = transactionChainId && providers[transactionChainId];\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionRequest) {\n      var _a, _b, _c, signer, gasLimit, sanitizedTransaction;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            signer = getSignerFromOptions(provider, options, library);\n            if (!signer) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 4;\n            return estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n          case 4:\n            gasLimit = _context.sent;\n            sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), {\n              gasLimit: gasLimit\n            }));\n            return _context.abrupt(\"return\", promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n              safeTransaction: {\n                to: sanitizedTransaction.to,\n                value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n                data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n                safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString()\n              }\n            }, transactionRequest));\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function sendTransaction(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    sendTransaction: sendTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useSendTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n    var _a, _b, _c;\n    const { library, chainId } = useEthers();\n    const transactionChainId = (options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId)) || chainId;\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);\n    const config = useConfig();\n    const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n    const providers = useReadonlyNetworks();\n    const provider = (transactionChainId && providers[transactionChainId]);\n    const sendTransaction = async (transactionRequest) => {\n        var _a, _b, _c;\n        const signer = getSignerFromOptions(provider, options, library);\n        if (signer) {\n            const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n            const sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), { gasLimit }));\n            return promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n                safeTransaction: {\n                    to: sanitizedTransaction.to,\n                    value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n                    data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n                    safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString(),\n                },\n            }, transactionRequest);\n        }\n    };\n    return { sendTransaction, state, resetState };\n}\n//# sourceMappingURL=useSendTransaction.js.map"]},"metadata":{},"sourceType":"module"}