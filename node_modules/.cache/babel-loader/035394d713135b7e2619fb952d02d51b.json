{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getValue, proxyDelegation, setValue } from \"@tsed/core\";\nexport var DIConfiguration = /*#__PURE__*/function () {\n  function DIConfiguration() {\n    var _this = this;\n    var initialProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, DIConfiguration);\n    _defineProperty(this, \"default\", new Map());\n    _defineProperty(this, \"map\", new Map());\n    Object.entries(_objectSpread({\n      scopes: {},\n      resolvers: [],\n      imports: [],\n      routes: [],\n      logger: {}\n    }, initialProps)).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      _this.default.set(key, value);\n    });\n    return proxyDelegation(this, {\n      ownKeys: function ownKeys(target) {\n        return [].concat(_toConsumableArray(target.default.keys()), _toConsumableArray(target.map.keys()));\n      }\n    });\n  }\n  _createClass(DIConfiguration, [{\n    key: \"version\",\n    get: function get() {\n      return this.get(\"version\");\n    },\n    set: function set(v) {\n      this.map.set(\"version\", v);\n    }\n  }, {\n    key: \"rootDir\",\n    get: function get() {\n      return this.get(\"rootDir\");\n    },\n    set: function set(value) {\n      this.map.set(\"rootDir\", value);\n    }\n  }, {\n    key: \"env\",\n    get: function get() {\n      return this.map.get(\"env\");\n    },\n    set: function set(value) {\n      this.map.set(\"env\", value);\n    }\n  }, {\n    key: \"scopes\",\n    get: function get() {\n      return this.map.get(\"scopes\");\n    },\n    set: function set(value) {\n      this.map.set(\"scopes\", value);\n    }\n  }, {\n    key: \"resolvers\",\n    get: function get() {\n      return this.getRaw(\"resolvers\");\n    },\n    set: function set(resolvers) {\n      this.map.set(\"resolvers\", resolvers);\n    }\n  }, {\n    key: \"imports\",\n    get: function get() {\n      return this.get(\"imports\");\n    },\n    set: function set(imports) {\n      this.map.set(\"imports\", imports);\n    }\n  }, {\n    key: \"routes\",\n    get: function get() {\n      return this.get(\"routes\");\n    },\n    set: function set(routes) {\n      this.map.set(\"routes\", routes);\n    }\n  }, {\n    key: \"logger\",\n    get: function get() {\n      return this.get(\"logger\");\n    },\n    set: function set(value) {\n      var logger = _objectSpread(_objectSpread({}, this.logger), value);\n      this.map.set(\"logger\", logger);\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this.logger.level === \"debug\";\n    },\n    set: function set(debug) {\n      this.logger = _objectSpread(_objectSpread({}, this.logger), {}, {\n        level: debug ? \"debug\" : \"info\"\n      });\n    }\n    /**\n     *\n     * @param callbackfn\n     * @param thisArg\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn, thisArg) {\n      var _this2 = this;\n      return new Set([].concat(_toConsumableArray(Array.from(this.default.keys())), _toConsumableArray(Array.from(this.map.keys())))).forEach(function (key) {\n        callbackfn(_this2.getRaw(key), key, _this2.map);\n      }, thisArg);\n    }\n    /**\n     *\n     * @param propertyKey\n     * @param value\n     */\n  }, {\n    key: \"set\",\n    value: function set(propertyKey, value) {\n      var _this3 = this;\n      if (typeof propertyKey === \"string\") {\n        if (propertyKey in this) {\n          // @ts-ignore\n          this[propertyKey] = value;\n        } else {\n          this.setRaw(propertyKey, value);\n        }\n      } else {\n        Object.entries(propertyKey).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n          _this3.set(key, value);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"setRaw\",\n    value: function setRaw(propertyKey, value) {\n      setValue(this.map, propertyKey, value);\n      return this;\n    }\n    /**\n     *\n     * @param propertyKey\n     * @param defaultValue\n     * @returns {undefined|any}\n     */\n  }, {\n    key: \"get\",\n    value: function get(propertyKey, defaultValue) {\n      return this.getRaw(propertyKey, defaultValue);\n    }\n  }, {\n    key: \"getRaw\",\n    value: function getRaw(propertyKey, defaultValue) {\n      var value = getValue(this.map, propertyKey);\n      if (value !== undefined) {\n        return value;\n      }\n      return getValue(this.default, propertyKey, defaultValue);\n    }\n    /**\n     *\n     * @param value\n     * @returns {any}\n     */\n  }, {\n    key: \"resolve\",\n    value: function resolve(value) {\n      return value.replace(\"${rootDir}\", this.rootDir);\n    }\n  }]);\n  return DIConfiguration;\n}();","map":{"version":3,"sources":["../../../src/services/DIConfiguration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getValue, proxyDelegation, setValue } from \"@tsed/core\";\nexport class DIConfiguration {\n    default = new Map();\n    map = new Map();\n    constructor(initialProps = {}) {\n        Object.entries({\n            scopes: {},\n            resolvers: [],\n            imports: [],\n            routes: [],\n            logger: {},\n            ...initialProps\n        }).forEach(([key, value]) => {\n            this.default.set(key, value);\n        });\n        return proxyDelegation(this, {\n            ownKeys(target) {\n                return [...target.default.keys(), ...target.map.keys()];\n            }\n        });\n    }\n    get version() {\n        return this.get(\"version\");\n    }\n    set version(v) {\n        this.map.set(\"version\", v);\n    }\n    get rootDir() {\n        return this.get(\"rootDir\");\n    }\n    set rootDir(value) {\n        this.map.set(\"rootDir\", value);\n    }\n    get env() {\n        return this.map.get(\"env\");\n    }\n    set env(value) {\n        this.map.set(\"env\", value);\n    }\n    get scopes() {\n        return this.map.get(\"scopes\");\n    }\n    set scopes(value) {\n        this.map.set(\"scopes\", value);\n    }\n    get resolvers() {\n        return this.getRaw(\"resolvers\");\n    }\n    set resolvers(resolvers) {\n        this.map.set(\"resolvers\", resolvers);\n    }\n    get imports() {\n        return this.get(\"imports\");\n    }\n    set imports(imports) {\n        this.map.set(\"imports\", imports);\n    }\n    get routes() {\n        return this.get(\"routes\");\n    }\n    set routes(routes) {\n        this.map.set(\"routes\", routes);\n    }\n    get logger() {\n        return this.get(\"logger\");\n    }\n    set logger(value) {\n        const logger = { ...this.logger, ...value };\n        this.map.set(\"logger\", logger);\n    }\n    get debug() {\n        return this.logger.level === \"debug\";\n    }\n    set debug(debug) {\n        this.logger = { ...this.logger, level: debug ? \"debug\" : \"info\" };\n    }\n    /**\n     *\n     * @param callbackfn\n     * @param thisArg\n     */\n    forEach(callbackfn, thisArg) {\n        return new Set([...Array.from(this.default.keys()), ...Array.from(this.map.keys())]).forEach((key) => {\n            callbackfn(this.getRaw(key), key, this.map);\n        }, thisArg);\n    }\n    /**\n     *\n     * @param propertyKey\n     * @param value\n     */\n    set(propertyKey, value) {\n        if (typeof propertyKey === \"string\") {\n            if (propertyKey in this) {\n                // @ts-ignore\n                this[propertyKey] = value;\n            }\n            else {\n                this.setRaw(propertyKey, value);\n            }\n        }\n        else {\n            Object.entries(propertyKey).forEach(([key, value]) => {\n                this.set(key, value);\n            });\n        }\n        return this;\n    }\n    setRaw(propertyKey, value) {\n        setValue(this.map, propertyKey, value);\n        return this;\n    }\n    /**\n     *\n     * @param propertyKey\n     * @param defaultValue\n     * @returns {undefined|any}\n     */\n    get(propertyKey, defaultValue) {\n        return this.getRaw(propertyKey, defaultValue);\n    }\n    getRaw(propertyKey, defaultValue) {\n        const value = getValue(this.map, propertyKey);\n        if (value !== undefined) {\n            return value;\n        }\n        return getValue(this.default, propertyKey, defaultValue);\n    }\n    /**\n     *\n     * @param value\n     * @returns {any}\n     */\n    resolve(value) {\n        return value.replace(\"${rootDir}\", this.rootDir);\n    }\n}\n//# sourceMappingURL=DIConfiguration.js.map"]},"metadata":{},"sourceType":"module"}