{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.esm.js';\nimport { Query } from './query.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\n\n// CLASS\nvar QueryCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryCache, _Subscribable);\n  var _super = _createSuper(QueryCache);\n  function QueryCache(config) {\n    var _this;\n    _classCallCheck(this, QueryCache);\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.queries = [];\n    _this.queriesMap = {};\n    return _this;\n  }\n  _createClass(QueryCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var _options$queryHash;\n      var queryKey = options.queryKey;\n      var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n      var query = this.get(queryHash);\n      if (!query) {\n        query = new Query({\n          cache: this,\n          logger: client.getLogger(),\n          queryKey: queryKey,\n          queryHash: queryHash,\n          options: client.defaultQueryOptions(options),\n          state: state,\n          defaultOptions: client.getQueryDefaults(queryKey)\n        });\n        this.add(query);\n      }\n      return query;\n    }\n  }, {\n    key: \"add\",\n    value: function add(query) {\n      if (!this.queriesMap[query.queryHash]) {\n        this.queriesMap[query.queryHash] = query;\n        this.queries.push(query);\n        this.notify({\n          type: 'added',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(query) {\n      var queryInMap = this.queriesMap[query.queryHash];\n      if (queryInMap) {\n        query.destroy();\n        this.queries = this.queries.filter(function (x) {\n          return x !== query;\n        });\n        if (queryInMap === query) {\n          delete this.queriesMap[query.queryHash];\n        }\n        this.notify({\n          type: 'removed',\n          query: query\n        });\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n      notifyManager.batch(function () {\n        _this2.queries.forEach(function (query) {\n          _this2.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(queryHash) {\n      return this.queriesMap[queryHash];\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.queries;\n    }\n  }, {\n    key: \"find\",\n    value: function find(arg1, arg2) {\n      var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 1),\n        filters = _parseFilterArgs2[0];\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n      return this.queries.find(function (query) {\n        return matchQuery(filters, query);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(arg1, arg2) {\n      var _parseFilterArgs3 = parseFilterArgs(arg1, arg2),\n        _parseFilterArgs4 = _slicedToArray(_parseFilterArgs3, 1),\n        filters = _parseFilterArgs4[0];\n      return Object.keys(filters).length > 0 ? this.queries.filter(function (query) {\n        return matchQuery(filters, query);\n      }) : this.queries;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this4 = this;\n      notifyManager.batch(function () {\n        _this4.queries.forEach(function (query) {\n          query.onFocus();\n        });\n      });\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this5 = this;\n      notifyManager.batch(function () {\n        _this5.queries.forEach(function (query) {\n          query.onOnline();\n        });\n      });\n    }\n  }]);\n  return QueryCache;\n}(Subscribable);\nexport { QueryCache };","map":{"version":3,"sources":["../../src/queryCache.ts"],"names":["QueryCache","Subscribable","constructor","config","queries","queriesMap","build","client","options","state","queryKey","queryHash","hashQueryKeyByOptions","query","get","Query","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","notifyManager","batch","forEach","getAll","find","arg1","arg2","filters","parseFilterArgs","exact","matchQuery","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline"],"mappings":"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","sourcesContent":["import type { QueryFilters } from './utils'\nimport { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from './utils'\nimport type { Action, QueryState } from './query'\nimport { Query } from './query'\nimport type { NotifyEvent, QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: unknown | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}