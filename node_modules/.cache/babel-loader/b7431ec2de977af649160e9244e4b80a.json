{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defaultLogger } from './logger.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Removable } from './removable.esm.js';\nimport { createRetryer, canFetch } from './retryer.esm.js';\n\n// CLASS\nvar Mutation = /*#__PURE__*/function (_Removable) {\n  _inherits(Mutation, _Removable);\n  var _super = _createSuper(Mutation);\n  function Mutation(config) {\n    var _this;\n    _classCallCheck(this, Mutation);\n    _this = _super.call(this);\n    _this.defaultOptions = config.defaultOptions;\n    _this.mutationId = config.mutationId;\n    _this.mutationCache = config.mutationCache;\n    _this.logger = config.logger || defaultLogger;\n    _this.observers = [];\n    _this.state = config.state || getDefaultState();\n    _this.setOptions(config.options);\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Mutation, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.defaultOptions), options);\n      this.updateCacheTime(this.options.cacheTime);\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.dispatch({\n        type: 'setState',\n        state: state\n      });\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (this.observers.indexOf(observer) === -1) {\n        this.observers.push(observer); // Stop the mutation from being garbage collected\n\n        this.clearGcTimeout();\n        this.mutationCache.notify({\n          type: 'observerAdded',\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n      this.scheduleGc();\n      this.mutationCache.notify({\n        type: 'observerRemoved',\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length) {\n        if (this.state.status === 'loading') {\n          this.scheduleGc();\n        } else {\n          this.mutationCache.remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _this$retryer$continu, _this$retryer;\n      return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var executeMutation, restored, _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3, _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options, context, data, _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              executeMutation = function executeMutation() {\n                var _this$options$retry;\n                _this2.retryer = createRetryer({\n                  fn: function fn() {\n                    if (!_this2.options.mutationFn) {\n                      return Promise.reject('No mutationFn found');\n                    }\n                    return _this2.options.mutationFn(_this2.state.variables);\n                  },\n                  onFail: function onFail(failureCount, error) {\n                    _this2.dispatch({\n                      type: 'failed',\n                      failureCount: failureCount,\n                      error: error\n                    });\n                  },\n                  onPause: function onPause() {\n                    _this2.dispatch({\n                      type: 'pause'\n                    });\n                  },\n                  onContinue: function onContinue() {\n                    _this2.dispatch({\n                      type: 'continue'\n                    });\n                  },\n                  retry: (_this$options$retry = _this2.options.retry) != null ? _this$options$retry : 0,\n                  retryDelay: _this2.options.retryDelay,\n                  networkMode: _this2.options.networkMode\n                });\n                return _this2.retryer.promise;\n              };\n              restored = this.state.status === 'loading';\n              _context.prev = 2;\n              if (restored) {\n                _context.next = 11;\n                break;\n              }\n              this.dispatch({\n                type: 'loading',\n                variables: this.options.variables\n              }); // Notify cache callback\n              _context.next = 7;\n              return (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n            case 7:\n              _context.next = 9;\n              return (_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables);\n            case 9:\n              context = _context.sent;\n              if (context !== this.state.context) {\n                this.dispatch({\n                  type: 'loading',\n                  context: context,\n                  variables: this.state.variables\n                });\n              }\n            case 11:\n              _context.next = 13;\n              return executeMutation();\n            case 13:\n              data = _context.sent;\n              _context.next = 16;\n              return (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n            case 16:\n              _context.next = 18;\n              return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context);\n            case 18:\n              _context.next = 20;\n              return (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this);\n            case 20:\n              _context.next = 22;\n              return (_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context);\n            case 22:\n              this.dispatch({\n                type: 'success',\n                data: data\n              });\n              return _context.abrupt(\"return\", data);\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](2);\n              _context.prev = 28;\n              _context.next = 31;\n              return (_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, _context.t0, this.state.variables, this.state.context, this);\n            case 31:\n              if (process.env.NODE_ENV !== 'production') {\n                this.logger.error(_context.t0);\n              }\n              _context.next = 34;\n              return (_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, _context.t0, this.state.variables, this.state.context);\n            case 34:\n              _context.next = 36;\n              return (_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, _context.t0, this.state.variables, this.state.context, this);\n            case 36:\n              _context.next = 38;\n              return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, _context.t0, this.state.variables, this.state.context);\n            case 38:\n              throw _context.t0;\n            case 39:\n              _context.prev = 39;\n              this.dispatch({\n                type: 'error',\n                error: _context.t0\n              });\n              return _context.finish(39);\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 26], [28,, 39, 42]]);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n      var reducer = function reducer(state) {\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              failureCount: action.failureCount,\n              failureReason: action.error\n            });\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: true\n            });\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isPaused: false\n            });\n          case 'loading':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              context: action.context,\n              data: undefined,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              isPaused: !canFetch(_this3.options.networkMode),\n              status: 'loading',\n              variables: action.variables\n            });\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              failureCount: 0,\n              failureReason: null,\n              error: null,\n              status: 'success',\n              isPaused: false\n            });\n          case 'error':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: undefined,\n              error: action.error,\n              failureCount: state.failureCount + 1,\n              failureReason: action.error,\n              isPaused: false,\n              status: 'error'\n            });\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onMutationUpdate(action);\n        });\n        _this3.mutationCache.notify({\n          mutation: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n  return Mutation;\n}(Removable);\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"sources":["../../src/mutation.ts"],"names":["Mutation","Removable","constructor","config","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","indexOf","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","onMutate","context","data","onSuccess","onSettled","onError","process","env","NODE_ENV","undefined","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate"],"mappings":"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","sourcesContent":["import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.defaultOptions = config.defaultOptions\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      // Notify cache callback\n      await this.mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.mutationCache.config.onSettled?.(\n          undefined,\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}