{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  var _useEthers = useEthers(),\n    providerChainId = _useEthers.chainId;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    tokenList = _useState2[0],\n    setTokenList = _useState2[1];\n  var chainId = overrideChainId || providerChainId;\n  useEffect(function () {\n    fetch(tokenListURI).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n        var _yield$response$json, name, logoURI, tokens, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!response.ok) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 3;\n              return response.json();\n            case 3:\n              _yield$response$json = _context.sent;\n              name = _yield$response$json.name;\n              logoURI = _yield$response$json.logoURI;\n              tokens = _yield$response$json.tokens;\n              setTokenList({\n                name: name,\n                logoURI: logoURI,\n                tokens: tokens.filter(function (token) {\n                  var sameChainId = token.chainId === chainId;\n                  if (!tags) {\n                    return sameChainId;\n                  }\n                  return sameChainId && token.tags && token.tags.some(function (tag) {\n                    return tags.includes(tag);\n                  });\n                })\n              });\n              _context.next = 14;\n              break;\n            case 10:\n              _context.next = 12;\n              return response.text();\n            case 12:\n              errorMessage = _context.sent;\n              return _context.abrupt(\"return\", Promise.reject(new Error(errorMessage)));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(function (err) {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"sources":["../../../../src/hooks/useTokenList.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C,SAAS,SAAS,QAAQ,aAAa;AAWvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCG;AACH,OAAM,SAAU,YAAY,CAAC,YAAoB,EAAE,eAAwB,EAAE,IAAe,EAAA;EAC1F,IAAA,UAAA,GAAqC,SAAS,EAAE;IAA/B,eAAe,GAAA,UAAA,CAAxB,OAAO;EACf,IAAA,SAAA,GAAkC,QAAQ,EAAa;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAhD,SAAS,GAAA,UAAA;IAAE,YAAY,GAAA,UAAA;EAE9B,IAAM,OAAO,GAAG,eAAe,IAAI,eAAe;EAElD,SAAS,CAAC,YAAK;IACb,KAAK,CAAC,YAAY,CAAC,CAChB,IAAI;MAAA,IAAA,IAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAAC,SAAA,QAAO,QAAQ;QAAA,IAAA,oBAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA;QAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;UAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA;cAAA,KACf,QAAQ,CAAC,EAAE;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,QAAA,CAAA,IAAA;cAAA,OAC2B,QAAQ,CAAC,IAAI,EAAE;YAAA;cAAA,oBAAA,GAAA,QAAA,CAAA,IAAA;cAA/C,IAAI,GAAA,oBAAA,CAAJ,IAAI;cAAE,OAAO,GAAA,oBAAA,CAAP,OAAO;cAAE,MAAM,GAAA,oBAAA,CAAN,MAAM;cAC7B,YAAY,CAAC;gBACX,IAAI,EAAJ,IAAI;gBACJ,OAAO,EAAP,OAAO;gBACP,MAAM,EAAG,MAAsB,CAAC,MAAM,CAAC,UAAC,KAAK,EAAI;kBAC/C,IAAM,WAAW,GAAG,KAAK,CAAC,OAAO,KAAK,OAAO;kBAC7C,IAAI,CAAC,IAAI,EAAE;oBACT,OAAO,WAAW;kBACnB;kBACD,OAAO,WAAW,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAC,GAAG;oBAAA,OAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;kBAAA,EAAC;gBAClF,CAAC;eACF,CAAC;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;cAAA,QAAA,CAAA,IAAA;cAAA,OAEyB,QAAQ,CAAC,IAAI,EAAE;YAAA;cAApC,YAAY,GAAA,QAAA,CAAA,IAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACX,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;YAAA;YAAA;cAAA,OAAA,QAAA,CAAA,IAAA;UAAA;QAAA,GAAA,OAAA;MAAA,CAEjD;MAAA,iBAAA,EAAA;QAAA,OAAA,IAAA,CAAA,KAAA,OAAA,SAAA;MAAA;IAAA,IAAC,CACD,KAAK,CAAC,UAAC,GAAG,EAAI;MACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MAChB,YAAY,CAAC,SAAS,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;EAE3B,OAAO,SAAS;AAClB","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n    const { chainId: providerChainId } = useEthers();\n    const [tokenList, setTokenList] = useState();\n    const chainId = overrideChainId || providerChainId;\n    useEffect(() => {\n        fetch(tokenListURI)\n            .then(async (response) => {\n            if (response.ok) {\n                const { name, logoURI, tokens } = await response.json();\n                setTokenList({\n                    name,\n                    logoURI,\n                    tokens: tokens.filter((token) => {\n                        const sameChainId = token.chainId === chainId;\n                        if (!tags) {\n                            return sameChainId;\n                        }\n                        return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag));\n                    }),\n                });\n            }\n            else {\n                const errorMessage = await response.text();\n                return Promise.reject(new Error(errorMessage));\n            }\n        })\n            .catch((err) => {\n            console.log(err);\n            setTokenList(undefined);\n        });\n    }, [tokenListURI, chainId]);\n    return tokenList;\n}\n//# sourceMappingURL=useTokenList.js.map"]},"metadata":{},"sourceType":"module"}