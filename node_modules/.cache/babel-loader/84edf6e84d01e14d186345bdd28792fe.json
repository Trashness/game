{"ast":null,"code":"import { ProviderType } from \"../domain/ProviderType.js\";\nimport { Injectable } from \"./injectable.js\";\n/**\n * The decorators `@Service()` declare a new service can be injected in other service or controller on there `constructor`.\n * All services annotated with `@Service()` are constructed one time.\n *\n * > `@Service()` use the `reflect-metadata` to collect and inject service on controllers or other services.\n *\n * @returns {Function}\n * @decorator\n */\nexport function Interceptor() {\n  return Injectable({\n    type: ProviderType.INTERCEPTOR\n  });\n}","map":{"version":3,"sources":["../../../src/decorators/interceptor.ts"],"names":[],"mappings":"AAAA,SAAQ,YAAY,QAAO,2BAAyB;AACpD,SAAQ,UAAU,QAAO,iBAAe;AAExC;;;;;;;;AAQG;AACH,OAAM,SAAU,WAAW,CAAA,EAAA;EACzB,OAAO,UAAU,CAAC;IAChB,IAAI,EAAE,YAAY,CAAC;GACpB,CAAC;AACJ","sourceRoot":"","sourcesContent":["import { ProviderType } from \"../domain/ProviderType.js\";\nimport { Injectable } from \"./injectable.js\";\n/**\n * The decorators `@Service()` declare a new service can be injected in other service or controller on there `constructor`.\n * All services annotated with `@Service()` are constructed one time.\n *\n * > `@Service()` use the `reflect-metadata` to collect and inject service on controllers or other services.\n *\n * @returns {Function}\n * @decorator\n */\nexport function Interceptor() {\n    return Injectable({\n        type: ProviderType.INTERCEPTOR\n    });\n}\n//# sourceMappingURL=interceptor.js.map"]},"metadata":{},"sourceType":"module"}