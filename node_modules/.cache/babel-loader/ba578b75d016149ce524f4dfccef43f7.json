{"ast":null,"code":"/**\n * @ignore\n * @param injector\n */\nexport function setLoggerFormat(injector) {\n  var _injector$settings$lo = injector.settings.logger,\n    level = _injector$settings$lo.level,\n    format = _injector$settings$lo.format;\n  if (level) {\n    injector.logger.level = level;\n  }\n  if (format && injector.logger.appenders) {\n    injector.logger.appenders.set(\"stdout\", {\n      type: \"stdout\",\n      levels: [\"info\", \"debug\"],\n      layout: {\n        type: \"pattern\",\n        pattern: format\n      }\n    });\n    injector.logger.appenders.set(\"stderr\", {\n      levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n      type: \"stderr\",\n      layout: {\n        type: \"pattern\",\n        pattern: format\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/utils/setLoggerFormat.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAM,SAAU,eAAe,CAAC,QAAyB,EAAA;EACvD,IAAA,qBAAA,GAAwB,QAAQ,CAAC,QAAQ,CAAC,MAAM;IAAzC,KAAK,GAAA,qBAAA,CAAL,KAAK;IAAE,MAAM,GAAA,qBAAA,CAAN,MAAM;EAEpB,IAAI,KAAK,EAAE;IACT,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK;EAC9B;EAED,IAAI,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE;IACvC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE;MACtC,IAAI,EAAE,QAAQ;MACd,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;MACzB,MAAM,EAAE;QACN,IAAI,EAAE,SAAS;QACf,OAAO,EAAE;MACV;KACF,CAAC;IAEF,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE;MACtC,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC;MAC3C,IAAI,EAAE,QAAQ;MACd,MAAM,EAAE;QACN,IAAI,EAAE,SAAS;QACf,OAAO,EAAE;MACV;KACF,CAAC;EACH;AACH","sourceRoot":"","sourcesContent":["/**\n * @ignore\n * @param injector\n */\nexport function setLoggerFormat(injector) {\n    const { level, format } = injector.settings.logger;\n    if (level) {\n        injector.logger.level = level;\n    }\n    if (format && injector.logger.appenders) {\n        injector.logger.appenders.set(\"stdout\", {\n            type: \"stdout\",\n            levels: [\"info\", \"debug\"],\n            layout: {\n                type: \"pattern\",\n                pattern: format\n            }\n        });\n        injector.logger.appenders.set(\"stderr\", {\n            levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n            type: \"stderr\",\n            layout: {\n                type: \"pattern\",\n                pattern: format\n            }\n        });\n    }\n}\n//# sourceMappingURL=setLoggerFormat.js.map"]},"metadata":{},"sourceType":"module"}