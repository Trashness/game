{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useCall } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\nexport function useEtherBalance(address) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  var multicallAddress = useMulticallAddress(queryParams);\n  var _ref = (_a = useCall(multicallAddress && address && {\n      contract: new Contract(multicallAddress, MultiCallABI),\n      method: 'getEthBalance',\n      args: [address]\n    }, queryParams)) !== null && _a !== void 0 ? _a : {},\n    value = _ref.value;\n  return value === null || value === void 0 ? void 0 : value[0];\n}","map":{"version":3,"sources":["../../../../src/hooks/useEtherBalance.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY,QAAQ,cAAc;AAC3C,SAAS,mBAAmB,QAAQ,uBAAuB;AAI3D,SAAS,OAAO,QAAQ,WAAW;AACnC,SAAS,QAAQ,QAAQ,QAAQ;AAEjC;;;;;;;;;;;;;AAaG;AACH,OAAM,SAAU,eAAe,CAAC,OAAuB,EAA+B;EAAA,IAA7B,WAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,CAAA,CAAE;;EACpF,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,WAAW,CAAC;EACzD,IAAA,IAAA,GACE,CAAA,EAAA,GAAA,OAAO,CACL,gBAAgB,IACd,OAAO,IAAI;MACT,QAAQ,EAAE,IAAI,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAAC;MACtD,MAAM,EAAE,eAAe;MACvB,IAAI,EAAE,CAAC,OAAO;KACf,EACH,WAAW,CACZ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;IATM,KAAK,GAAA,IAAA,CAAZ,KAAK;EAUb,OAAO,KAAK,KAAA,IAAA,IAAL,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAL,KAAK,CAAG,CAAC,CAAC;AACnB","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useCall } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\nexport function useEtherBalance(address, queryParams = {}) {\n    var _a;\n    const multicallAddress = useMulticallAddress(queryParams);\n    const { value: value } = (_a = useCall(multicallAddress &&\n        address && {\n        contract: new Contract(multicallAddress, MultiCallABI),\n        method: 'getEthBalance',\n        args: [address],\n    }, queryParams)) !== null && _a !== void 0 ? _a : {};\n    return value === null || value === void 0 ? void 0 : value[0];\n}\n//# sourceMappingURL=useEtherBalance.js.map"]},"metadata":{},"sourceType":"module"}