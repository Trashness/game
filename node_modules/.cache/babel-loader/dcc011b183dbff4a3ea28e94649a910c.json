{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { Contract } from 'ethers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) or Rave Names (e.g. `name.ftm`) for a specific address.\n * @param address address to lookup\n * @param options additional options\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS or Rave name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    rave = _ref.rave;\n  var _useEthers = useEthers(),\n    library = _useEthers.library;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    ens = _useState2[0],\n    setENS = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  useEffect(function () {\n    var mounted = true;\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var raveContract, resolved, _resolved;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!library || !address)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 2:\n            _context.prev = 2;\n            setIsLoading(true);\n            if (!rave) {\n              _context.next = 14;\n              break;\n            }\n            raveContract = new Contract('0x14Ffd1Fa75491595c6FD22De8218738525892101', [{\n              inputs: [{\n                internalType: 'address',\n                name: 'owner',\n                type: 'address'\n              }, {\n                internalType: 'uint256',\n                name: 'index',\n                type: 'uint256'\n              }],\n              name: 'getName',\n              outputs: [{\n                internalType: 'string',\n                name: '',\n                type: 'string'\n              }],\n              stateMutability: 'view',\n              type: 'function'\n            }], library); // this call will fail anyway if the chain isn't Fantom, so we don't need an extra chainId check\n            _context.next = 8;\n            return raveContract.getName(address, 0);\n          case 8:\n            resolved = _context.sent;\n            if (mounted) {\n              _context.next = 11;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 11:\n            setENS(resolved);\n            _context.next = 20;\n            break;\n          case 14:\n            _context.next = 16;\n            return library.lookupAddress(address);\n          case 16:\n            _resolved = _context.sent;\n            if (mounted) {\n              _context.next = 19;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 19:\n            setENS(_resolved);\n          case 20:\n            _context.next = 27;\n            break;\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](2);\n            if (mounted) {\n              _context.next = 26;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 26:\n            setError(_context.t0);\n          case 27:\n            _context.prev = 27;\n            setIsLoading(false);\n            return _context.finish(27);\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 22, 27, 30]]);\n    }))();\n    return function () {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens: ens,\n    isLoading: isLoading,\n    error: error\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useLookupAddress.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAC3C,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,QAAQ,QAAQ,QAAQ;AAMjC;;;;;;;;;;;;;;;;AAgBG;AACH,OAAM,SAAU,gBAAgB,CAAC,OAA2B,EAAqC;EAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAF,CAAA,CAAE;IAAjC,IAAI,GAAA,IAAA,CAAJ,IAAI;EAClE,IAAA,UAAA,GAAoB,SAAS,EAAE;IAAvB,OAAO,GAAA,UAAA,CAAP,OAAO;EACf,IAAA,SAAA,GAAsB,QAAQ,EAAiB;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAxC,GAAG,GAAA,UAAA;IAAE,MAAM,GAAA,UAAA;EAClB,IAAA,UAAA,GAAkC,QAAQ,CAAC,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,UAAA;IAA1C,SAAS,GAAA,UAAA;IAAE,YAAY,GAAA,UAAA;EAC9B,IAAA,UAAA,GAA0B,QAAQ,CAAe,IAAI,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,UAAA;IAA/C,KAAK,GAAA,UAAA;IAAE,QAAQ,GAAA,UAAA;EAEtB,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,GAAG,IAAI;IAElB,KAAK,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAAC,SAAA,QAAA;MAAA,IAAA,YAAA,EAAA,QAAA,EAAA,SAAA;MAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;QAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA;YAAA,MACA,CAAC,OAAO,IAAI,CAAC,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YAAA,QAAA,CAAA,IAAA;YAEtB,YAAY,CAAC,IAAI,CAAC;YAAA,KACd,IAAI;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YACA,YAAY,GAAG,IAAI,QAAQ,CAC/B,4CAA4C,EAC5C,CACE;cACE,MAAM,EAAE,CACN;gBAAE,YAAY,EAAE,SAAS;gBAAE,IAAI,EAAE,OAAO;gBAAE,IAAI,EAAE;cAAS,CAAE,EAC3D;gBAAE,YAAY,EAAE,SAAS;gBAAE,IAAI,EAAE,OAAO;gBAAE,IAAI,EAAE;cAAS,CAAE,CAC5D;cACD,IAAI,EAAE,SAAS;cACf,OAAO,EAAE,CAAC;gBAAE,YAAY,EAAE,QAAQ;gBAAE,IAAI,EAAE,EAAE;gBAAE,IAAI,EAAE;cAAQ,CAAE,CAAC;cAC/D,eAAe,EAAE,MAAM;cACvB,IAAI,EAAE;aACP,CACF,EACD,OAAO,CACR,EACD;YAAA,QAAA,CAAA,IAAA;YAAA,OACuB,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;UAAA;YAAjD,QAAQ,GAAA,QAAA,CAAA,IAAA;YAAA,IACT,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YACZ,MAAM,CAAC,QAAQ,CAAC;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;YAAA,QAAA,CAAA,IAAA;YAAA,OAEO,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;UAAA;YAA/C,SAAQ,GAAA,QAAA,CAAA,IAAA;YAAA,IACT,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YACZ,MAAM,CAAC,SAAQ,CAAC;UAAA;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;YAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA;YAAA,IAGb,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YACZ,QAAQ,CAAA,QAAA,CAAA,EAAA,CAAG;UAAA;YAAA,QAAA,CAAA,IAAA;YAEX,YAAY,CAAC,KAAK,CAAC;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;UAAA;YAAA,OAAA,QAAA,CAAA,IAAA;QAAA;MAAA,GAAA,OAAA;IAAA,CAEtB,IAAG;IAEJ,OAAO,YAAK;MACV,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EAEtB,OAAO;IAAE,GAAG,EAAH,GAAG;IAAE,SAAS,EAAT,SAAS;IAAE,KAAK,EAAL;EAAK,CAAE;AAClC","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { Contract } from 'ethers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) or Rave Names (e.g. `name.ftm`) for a specific address.\n * @param address address to lookup\n * @param options additional options\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS or Rave name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address, { rave } = {}) {\n    const { library } = useEthers();\n    const [ens, setENS] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        let mounted = true;\n        void (async () => {\n            if (!library || !address)\n                return;\n            try {\n                setIsLoading(true);\n                if (rave) {\n                    const raveContract = new Contract('0x14Ffd1Fa75491595c6FD22De8218738525892101', [\n                        {\n                            inputs: [\n                                { internalType: 'address', name: 'owner', type: 'address' },\n                                { internalType: 'uint256', name: 'index', type: 'uint256' },\n                            ],\n                            name: 'getName',\n                            outputs: [{ internalType: 'string', name: '', type: 'string' }],\n                            stateMutability: 'view',\n                            type: 'function',\n                        },\n                    ], library);\n                    // this call will fail anyway if the chain isn't Fantom, so we don't need an extra chainId check\n                    const resolved = await raveContract.getName(address, 0);\n                    if (!mounted)\n                        return;\n                    setENS(resolved);\n                }\n                else {\n                    const resolved = await library.lookupAddress(address);\n                    if (!mounted)\n                        return;\n                    setENS(resolved);\n                }\n            }\n            catch (e) {\n                if (!mounted)\n                    return;\n                setError(e);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, [address, library]);\n    return { ens, isLoading, error };\n}\n//# sourceMappingURL=useLookupAddress.js.map"]},"metadata":{},"sourceType":"module"}