{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEthers } from './useEthers';\nimport { useState, useEffect } from 'react';\n/**\n * Returns a signer if an external wallet is connected.\n * @public\n * @returns a JsonRpcSigner if one is available in the provider. `undefined` otherwise.\n */\nexport function useSigner() {\n  var _useEthers = useEthers(),\n    library = _useEthers.library,\n    account = _useEthers.account;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    signer = _useState2[0],\n    setSigner = _useState2[1];\n  useEffect(function () {\n    if (library !== undefined && 'getSigner' in library && account !== undefined) setSigner(library.getSigner());else setSigner(undefined);\n  }, [library, account]);\n  return signer;\n}","map":{"version":3,"sources":["../../../../src/hooks/useSigner.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,QAAQ,EAAE,SAAS,QAAQ,OAAO;AAG3C;;;;AAIG;AACH,OAAM,SAAU,SAAS,CAAA,EAAA;EACvB,IAAA,UAAA,GAA6B,SAAS,EAAE;IAAhC,OAAO,GAAA,UAAA,CAAP,OAAO;IAAE,OAAO,GAAA,UAAA,CAAP,OAAO;EACxB,IAAA,SAAA,GAA4B,QAAQ,EAA6B;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAA1D,MAAM,GAAA,UAAA;IAAE,SAAS,GAAA,UAAA;EAExB,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,KAAK,SAAS,IAAI,WAAW,IAAI,OAAO,IAAI,OAAO,KAAK,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAA,KACvG,SAAS,CAAC,SAAS,CAAC;EAC3B,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EAEtB,OAAO,MAAM;AACf","sourceRoot":"","sourcesContent":["import { useEthers } from './useEthers';\nimport { useState, useEffect } from 'react';\n/**\n * Returns a signer if an external wallet is connected.\n * @public\n * @returns a JsonRpcSigner if one is available in the provider. `undefined` otherwise.\n */\nexport function useSigner() {\n    const { library, account } = useEthers();\n    const [signer, setSigner] = useState();\n    useEffect(() => {\n        if (library !== undefined && 'getSigner' in library && account !== undefined)\n            setSigner(library.getSigner());\n        else\n            setSigner(undefined);\n    }, [library, account]);\n    return signer;\n}\n//# sourceMappingURL=useSigner.js.map"]},"metadata":{},"sourceType":"module"}