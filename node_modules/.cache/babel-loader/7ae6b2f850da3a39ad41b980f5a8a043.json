{"ast":null,"code":"import { Provider } from \"../domain/Provider.js\";\nimport { ProviderScope } from \"../domain/ProviderScope.js\";\nimport { ProviderType } from \"../domain/ProviderType.js\";\nimport { GlobalProviders } from \"./GlobalProviders.js\";\n/**\n *\n */\nGlobalProviders.createRegistry(ProviderType.CONTROLLER, Provider);\n/**\n * Register a provider configuration.\n * @param {ProviderOpts<any>} provider\n */\nexport function registerProvider(provider) {\n  if (!provider.provide) {\n    throw new Error(\"Provider.provide is required\");\n  }\n  return GlobalProviders.merge(provider.provide, provider);\n}\n/**\n * Add a new value in the `ProviderRegistry`.\n *\n * #### Example with symbol definition\n *\n *\n * ```typescript\n * import {registerValue, InjectorService} from \"@tsed/di\";\n *\n * const MyValue = Symbol.from(\"MyValue\")\n *\n * registerValue({token: MyValue, useValue: \"myValue\"});\n *\n * @Service()\n * export class OtherService {\n *      constructor(@Inject(MyValue) myValue: string){\n *          console.log(myValue); /// \"myValue\"\n *      }\n * }\n * ```\n */\nexport var registerValue = function registerValue(provider, value) {\n  if (!provider.provide) {\n    provider = {\n      provide: provider\n    };\n  }\n  provider = Object.assign({\n    scope: ProviderScope.SINGLETON,\n    useValue: value\n  }, provider, {\n    type: ProviderType.VALUE\n  });\n  GlobalProviders.merge(provider.provide, provider);\n};\n/**\n * Add a new controller in the `ProviderRegistry`. This controller will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerController, InjectorService} from \"@tsed/di\";\n *\n * export default class MyController {\n *     constructor(){}\n *     transform() {\n *         return \"test\";\n *     }\n * }\n *\n * registerController({provide: MyController});\n * // or\n * registerController(MyController);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myController = injector.get<MyController>(MyController);\n * myController.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport var registerController = GlobalProviders.createRegisterFn(ProviderType.CONTROLLER);","map":{"version":3,"sources":["../../../src/registries/ProviderRegistry.ts"],"names":[],"mappings":"AAAA,SAAQ,QAAQ,QAAO,uBAAqB;AAC5C,SAAQ,aAAa,QAAO,4BAA0B;AACtD,SAAQ,YAAY,QAAO,2BAAyB;AAEpD,SAAQ,eAAe,QAAO,sBAAoB;AAElD;;AAEG;AACH,eAAe,CAAC,cAAc,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC;AAEjE;;;AAGG;AACH,OAAM,SAAU,gBAAgB,CAAa,QAAqC,EAAA;EAChF,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;IACrB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;EAChD;EAED,OAAO,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC;AAC1D;AAEA;;;;;;;;;;;;;;;;;;;;AAoBG;AACH,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,QAAiC,EAAE,KAAW,EAAU;EACpF,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;IACrB,QAAQ,GAAG;MACT,OAAO,EAAE;KACV;EACF;EAED,QAAQ,GAAG,MAAM,CAAC,MAAM,CACtB;IACE,KAAK,EAAE,aAAa,CAAC,SAAS;IAC9B,QAAQ,EAAE;GACX,EACD,QAAQ,EACR;IAAC,IAAI,EAAE,YAAY,CAAC;EAAK,CAAC,CAC3B;EACD,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC;AACnD,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AACH,OAAO,IAAM,kBAAkB,GAAG,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,UAAU,CAAC","sourceRoot":"","sourcesContent":["import { Provider } from \"../domain/Provider.js\";\nimport { ProviderScope } from \"../domain/ProviderScope.js\";\nimport { ProviderType } from \"../domain/ProviderType.js\";\nimport { GlobalProviders } from \"./GlobalProviders.js\";\n/**\n *\n */\nGlobalProviders.createRegistry(ProviderType.CONTROLLER, Provider);\n/**\n * Register a provider configuration.\n * @param {ProviderOpts<any>} provider\n */\nexport function registerProvider(provider) {\n    if (!provider.provide) {\n        throw new Error(\"Provider.provide is required\");\n    }\n    return GlobalProviders.merge(provider.provide, provider);\n}\n/**\n * Add a new value in the `ProviderRegistry`.\n *\n * #### Example with symbol definition\n *\n *\n * ```typescript\n * import {registerValue, InjectorService} from \"@tsed/di\";\n *\n * const MyValue = Symbol.from(\"MyValue\")\n *\n * registerValue({token: MyValue, useValue: \"myValue\"});\n *\n * @Service()\n * export class OtherService {\n *      constructor(@Inject(MyValue) myValue: string){\n *          console.log(myValue); /// \"myValue\"\n *      }\n * }\n * ```\n */\nexport const registerValue = (provider, value) => {\n    if (!provider.provide) {\n        provider = {\n            provide: provider\n        };\n    }\n    provider = Object.assign({\n        scope: ProviderScope.SINGLETON,\n        useValue: value\n    }, provider, { type: ProviderType.VALUE });\n    GlobalProviders.merge(provider.provide, provider);\n};\n/**\n * Add a new controller in the `ProviderRegistry`. This controller will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerController, InjectorService} from \"@tsed/di\";\n *\n * export default class MyController {\n *     constructor(){}\n *     transform() {\n *         return \"test\";\n *     }\n * }\n *\n * registerController({provide: MyController});\n * // or\n * registerController(MyController);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myController = injector.get<MyController>(MyController);\n * myController.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerController = GlobalProviders.createRegisterFn(ProviderType.CONTROLLER);\n//# sourceMappingURL=ProviderRegistry.js.map"]},"metadata":{},"sourceType":"module"}