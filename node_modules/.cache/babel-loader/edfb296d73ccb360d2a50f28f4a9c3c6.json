{"ast":null,"code":"import _defineProperty from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var _a, _b, _c;\n  var current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      var newState = action.state;\n      // merge with existing state\n      var oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n      for (var _i = 0, _Object$entries = Object.entries(oldState); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          address = _Object$entries$_i[0],\n          entries = _Object$entries$_i[1];\n        newState = Object.assign(Object.assign({}, newState), _defineProperty({}, address, Object.assign(Object.assign({}, entries), newState[address])));\n      }\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, {\n        blockNumber: action.blockNumber,\n        state: newState\n      }));\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, Object.assign(Object.assign({}, state[action.chainId]), {\n        blockNumber: action.blockNumber,\n        error: action.error\n      })));\n    }\n  }\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/chainStateReducer.ts"],"names":[],"mappings":";;AA+BA;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAAA,EAA4C;EAAA,IAA3C,KAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAe,CAAA,CAAE;EAAA,IAAE,MAAwB,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;;EAC3E,IAAM,OAAO,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW;EAClD,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,WAAW,IAAI,OAAO,EAAE;IAC7C,IAAI,MAAM,CAAC,IAAI,KAAK,eAAe,EAAE;MACnC,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK;MAC3B;MACA,IAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;MACnD,SAAA,EAAA,MAAA,eAAA,GAAiC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAA,EAAA,GAAA,eAAA,CAAA,MAAA,EAAA,EAAA,IAAE;QAAtD,IAAA,kBAAA,GAAA,cAAA,CAAA,eAAA,CAAA,EAAA;UAAO,OAAO,GAAA,kBAAA;UAAE,OAAO,GAAA,kBAAA;QAC1B,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACH,QAAQ,CAAA,EAAA,eAAA,KACV,OAAO,EAAC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACJ,OAAO,CAAA,EACP,QAAQ,CAAC,OAAO,CAAC,CAAA,EAEvB;MACF;MACD,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA,eAAA,KACP,MAAM,CAAC,OAAO,EAAG;QAAE,WAAW,EAAE,MAAM,CAAC,WAAW;QAAE,KAAK,EAAE;MAAQ,CAAE,EAAA;KAEzE,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;MACxC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA,eAAA,KACP,MAAM,CAAC,OAAO,EAAC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,EAAA;QAAE,WAAW,EAAE,MAAM,CAAC,WAAW;QAAE,KAAK,EAAE,MAAM,CAAC;MAAK,CAAA,CAAA,EAAA;IAErG;EACF;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            // merge with existing state\n            const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n            for (const [address, entries] of Object.entries(oldState)) {\n                newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}