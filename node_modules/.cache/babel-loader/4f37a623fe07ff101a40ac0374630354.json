{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AsyncLocalStorage, AsyncResource } from \"async_hooks\";\nvar storage = new AsyncLocalStorage();\nexport function getAsyncStore() {\n  return storage;\n}\nexport function useContextRef() {\n  return getAsyncStore().getStore();\n}\nexport function getContext() {\n  var _useContextRef;\n  return (_useContextRef = useContextRef()) === null || _useContextRef === void 0 ? void 0 : _useContextRef.current;\n}\nexport function runInContext(_x, _x2, _x3) {\n  return _runInContext.apply(this, arguments);\n}\nfunction _runInContext() {\n  _runInContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ctx, cb, injector) {\n    var ref, _injector;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          ref = useContextRef();\n          if (!ref) {\n            _context.next = 6;\n            break;\n          }\n          ctx && setContext(ctx);\n          return _context.abrupt(\"return\", cb());\n        case 6:\n          injector = (ctx === null || ctx === void 0 ? void 0 : ctx.injector) || injector;\n          _context.next = 9;\n          return (_injector = injector) === null || _injector === void 0 ? void 0 : _injector.alterAsync(\"$alterRunInContext\", cb);\n        case 9:\n          _context.t0 = _context.sent;\n          if (_context.t0) {\n            _context.next = 12;\n            break;\n          }\n          _context.t0 = cb;\n        case 12:\n          cb = _context.t0;\n          return _context.abrupt(\"return\", storage.run({\n            current: ctx\n          }, cb));\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _runInContext.apply(this, arguments);\n}\nexport function setContext(ctx) {\n  var ref = useContextRef();\n  if (ref && !ref.current) {\n    ref.current = ctx;\n  }\n}\nexport function bindContext(cb) {\n  return AsyncResource.bind(cb);\n}","map":{"version":3,"sources":["../../../src/utils/asyncHookContext.ts"],"names":[],"mappings":";;AAAA,SAAQ,iBAAiB,EAAE,aAAa,QAAO,aAAa;AAI5D,IAAM,OAAO,GAAwD,IAAI,iBAAiB,EAAE;AAE5F,OAAM,SAAU,aAAa,CAAA,EAAA;EAC3B,OAAO,OAAO;AAChB;AAEA,OAAM,SAAU,aAAa,CAAA,EAAA;EAC3B,OAAO,aAAa,EAAE,CAAC,QAAQ,EAAE;AACnC;AAEA,OAAM,SAAU,UAAU,CAAA,EAAA;EAAA,IAAA,cAAA;EACxB,QAAA,cAAA,GAAO,aAAa,EAAE,cAAA,cAAA,uBAAf,cAAA,CAAiB,OAAc;AACxC;AAEA,gBAAsB,YAAY,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA;EAAA,OAAA,aAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAYjC,SAAA,cAAA;EAAA,aAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAZM,SAAA,QAA4B,GAA0B,EAAE,EAAO,EAAE,QAA0B;IAAA,IAAA,GAAA,EAAA,SAAA;IAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;MAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA;UAC1F,GAAG,GAAG,aAAa,EAAE;UAAA,KAEvB,GAAG;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UACL,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC;UAAC,OAAA,QAAA,CAAA,MAAA,WAChB,EAAE,EAAE;QAAA;UAEX,QAAQ,GAAG,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,KAAI,QAAQ;UAAC,QAAA,CAAA,IAAA;UAAA,QAAA,SAAA,GACzB,QAAQ,cAAA,SAAA,uBAAR,SAAA,CAAU,UAAU,CAAC,oBAAoB,EAAE,EAAE,CAAC;QAAA;UAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;UAAA,IAAA,QAAA,CAAA,EAAA;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UAAA,QAAA,CAAA,EAAA,GAAK,EAAE;QAAA;UAAjE,EAAE,GAAA,QAAA,CAAA,EAAA;UAAA,OAAA,QAAA,CAAA,MAAA,WAEK,OAAO,CAAC,GAAG,CAAC;YAAC,OAAO,EAAE;UAAG,CAAC,EAAE,EAAE,CAAC;QAAA;QAAA;UAAA,OAAA,QAAA,CAAA,IAAA;MAAA;IAAA,GAAA,OAAA;EAAA,CAEzC;EAAA,OAAA,aAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAED,OAAM,SAAU,UAAU,CAAC,GAAc,EAAA;EACvC,IAAM,GAAG,GAAG,aAAa,EAAE;EAE3B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;IACvB,GAAG,CAAC,OAAO,GAAG,GAAG;EAClB;AACH;AAEA,OAAM,SAAU,WAAW,CAAC,EAAO,EAAA;EACjC,OAAO,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;AAC/B","sourceRoot":"","sourcesContent":["import { AsyncLocalStorage, AsyncResource } from \"async_hooks\";\nconst storage = new AsyncLocalStorage();\nexport function getAsyncStore() {\n    return storage;\n}\nexport function useContextRef() {\n    return getAsyncStore().getStore();\n}\nexport function getContext() {\n    return useContextRef()?.current;\n}\nexport async function runInContext(ctx, cb, injector) {\n    const ref = useContextRef();\n    if (ref) {\n        ctx && setContext(ctx);\n        return cb();\n    }\n    else {\n        injector = ctx?.injector || injector;\n        cb = (await injector?.alterAsync(\"$alterRunInContext\", cb)) || cb;\n        return storage.run({ current: ctx }, cb);\n    }\n}\nexport function setContext(ctx) {\n    const ref = useContextRef();\n    if (ref && !ref.current) {\n        ref.current = ctx;\n    }\n}\nexport function bindContext(cb) {\n    return AsyncResource.bind(cb);\n}\n//# sourceMappingURL=asyncHookContext.js.map"]},"metadata":{},"sourceType":"module"}