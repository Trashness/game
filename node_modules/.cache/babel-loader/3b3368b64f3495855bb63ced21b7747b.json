{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.esm.js';\nimport { parseMutationFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.esm.js';\nfunction useIsMutating(arg1, arg2, arg3) {\n  var _parseMutationFilterA = parseMutationFilterArgs(arg1, arg2, arg3),\n    _parseMutationFilterA2 = _slicedToArray(_parseMutationFilterA, 2),\n    filters = _parseMutationFilterA2[0],\n    _parseMutationFilterA3 = _parseMutationFilterA2[1],\n    options = _parseMutationFilterA3 === void 0 ? {} : _parseMutationFilterA3;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return mutationCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [mutationCache]), function () {\n    return queryClient.isMutating(filters);\n  }, function () {\n    return queryClient.isMutating(filters);\n  });\n}\nexport { useIsMutating };","map":{"version":3,"sources":["../../src/useIsMutating.ts"],"names":[],"mappings":";;;;;;;AAoBO,SAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAKL,IAAA,qBAAA,GAAA,uBAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA;IAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA;IAAA,OAAA,GAAA,sBAAA;IAAA,sBAAA,GAAA,sBAAA;IAAA,OAAA,GAAA,sBAAA,cAAA,CAAA,CAAA,GAAA,sBAAA;;;EAEmC,CAAA,CAAA;EACnC,IAAA,aAAA,GAAA,WAAA,CAAA,gBAAA,EAAA;EAEA,OAAA,oBAAA,CAAA,KAAA,CAAA,WAAA,CAAA,UAAA,aAAA;IAAA,OAAA,aAAA,CAAA,SAAA,CAAA,aAAA,CAAA,UAAA,CAAA,aAAA,CAAA,CAAA;EAAA,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA;IAAA,OAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA;EAAA,GAAA;IAAA,OAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA;EAAA,EAAA;AASD","sourcesContent":["'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}