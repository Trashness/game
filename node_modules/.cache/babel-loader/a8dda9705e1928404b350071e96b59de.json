{"ast":null,"code":"import _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isValidTimeout, isServer } from './utils.esm.js';\nvar Removable = /*#__PURE__*/function () {\n  function Removable() {\n    _classCallCheck(this, Removable);\n  }\n  _createClass(Removable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearGcTimeout();\n    }\n  }, {\n    key: \"scheduleGc\",\n    value: function scheduleGc() {\n      var _this = this;\n      this.clearGcTimeout();\n      if (isValidTimeout(this.cacheTime)) {\n        this.gcTimeout = setTimeout(function () {\n          _this.optionalRemove();\n        }, this.cacheTime);\n      }\n    }\n  }, {\n    key: \"updateCacheTime\",\n    value: function updateCacheTime(newCacheTime) {\n      // Default to 5 minutes (Infinity for server-side) if no cache time is set\n      this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n    }\n  }, {\n    key: \"clearGcTimeout\",\n    value: function clearGcTimeout() {\n      if (this.gcTimeout) {\n        clearTimeout(this.gcTimeout);\n        this.gcTimeout = undefined;\n      }\n    }\n  }]);\n  return Removable;\n}();\nexport { Removable };","map":{"version":3,"sources":["../../src/removable.ts"],"names":["Removable","destroy","clearGcTimeout","scheduleGc","isValidTimeout","cacheTime","gcTimeout","setTimeout","optionalRemove","updateCacheTime","newCacheTime","Math","max","isServer","Infinity","clearTimeout","undefined"],"mappings":";;;IAEsBA,SAAf;EAAA,SAAA,UAAA;IAAA,eAAA,OAAA,SAAA;EAAA;EAAA,YAAA,CAAA,SAAA;IAAA,GAAA;IAAA,KAAA,EAILC,SAAAA,QAAAA,EAAgB;MACd,IAAA,CAAKC,cAAL,EAAA;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAESC,SAAAA,WAAAA,EAAmB;MAAA,IAAA,KAAA;MAC3B,IAAA,CAAKD,cAAL,EAAA;MAEA,IAAIE,cAAc,CAAC,IAAKC,CAAAA,SAAN,CAAlB,EAAoC;QAClC,IAAA,CAAKC,SAAL,GAAiBC,UAAU,CAAC,YAAM;UAChC,KAAA,CAAKC,cAAL,EAAA;SADyB,EAExB,IAAKH,CAAAA,SAFmB,CAA3B;MAGD;IACF;EAAA;IAAA,GAAA;IAAA,KAAA,EAESI,SAAAA,gBAAgBC,YAAD,EAAyC;MAChE;MACA,IAAKL,CAAAA,SAAL,GAAiBM,IAAI,CAACC,GAALD,CACf,IAAA,CAAKN,SAAL,IAAkB,CADHM,EAEfD,YAFeC,IAEfD,IAAAA,GAAAA,YAFeC,GAEEE,QAAQ,GAAGC,QAAH,GAAc,CAAI,GAAA,EAAJ,GAAS,IAFjCH,CAAjB;IAID;EAAA;IAAA,GAAA;IAAA,KAAA,EAEST,SAAAA,eAAAA,EAAiB;MACzB,IAAI,IAAA,CAAKI,SAAT,EAAoB;QAClBS,YAAY,CAAC,IAAKT,CAAAA,SAAN,CAAZS;QACA,IAAKT,CAAAA,SAAL,GAAiBU,SAAjB;MACD;IACF;EAAA;EAAA,OAAA,SAAA;AAAA","sourcesContent":["import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n"]},"metadata":{},"sourceType":"module"}