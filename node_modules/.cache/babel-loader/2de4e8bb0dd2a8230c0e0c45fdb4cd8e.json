{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.esm.js';\nimport { parseMutationArgs, MutationObserver, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.esm.js';\nimport { shouldThrowError } from './utils.esm.js';\nfunction useMutation(arg1, arg2, arg3) {\n  var options = parseMutationArgs(arg1, arg2, arg3);\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var _React$useState = React.useState(function () {\n      return new MutationObserver(queryClient, options);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    observer = _React$useState2[0];\n  React.useEffect(function () {\n    observer.setOptions(options);\n  }, [observer, options]);\n  var result = useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return observer.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [observer]), function () {\n    return observer.getCurrentResult();\n  }, function () {\n    return observer.getCurrentResult();\n  });\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {\n    throw result.error;\n  }\n  return _objectSpread(_objectSpread({}, result), {}, {\n    mutate: mutate,\n    mutateAsync: result.mutate\n  });\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nfunction noop() {}\nexport { useMutation };","map":{"version":3,"sources":["../../src/useMutation.ts"],"names":[],"mappings":";;;;;;;;;AAiEO,SAAA,WAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;;;EAgB8B,CAAA,CAAA;EAEnC,IAAA,eAAA,GAAA,KAAA,CAAA,QAAA,CAAA;MAAA,OAAA,IAAA,gBAAA,CAAA,WAAA,EAAA,OAAA,CAAA;IAAA,EAAA;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;IAAA,QAAA,GAAA,gBAAA;;;EAUC,CAAA,EAAA,CAAA,QAAA,EAAA,OAAA,CAAA,CAAA;EAED,IAAA,MAAA,GAAA,oBAAA,CAAA,KAAA,CAAA,WAAA,CAAA,UAAA,aAAA;IAAA,OAAA,QAAA,CAAA,SAAA,CAAA,aAAA,CAAA,UAAA,CAAA,aAAA,CAAA,CAAA;EAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA;IAAA,OAAA,QAAA,CAAA,gBAAA,EAAA;EAAA,GAAA;IAAA,OAAA,QAAA,CAAA,gBAAA,EAAA;EAAA,EAAA;;;EAeG,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA;EAIH,IAAA,MAAA,CAAA,KAAA,IAAA,gBAAA,CAAA,QAAA,CAAA,OAAA,CAAA,gBAAA,EAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA;;EAKC;;;;;AAGF,CAAA,CAAA;;AAGD,SAAA,IAAA,CAAA,EAAA,CAAA","sourcesContent":["'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module"}