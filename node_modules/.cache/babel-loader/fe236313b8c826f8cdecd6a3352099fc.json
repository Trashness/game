{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { GlobalProviders } from \"../registries/GlobalProviders.js\";\nimport { Provider } from \"./Provider.js\";\nexport var Container = /*#__PURE__*/function (_Map) {\n  _inherits(Container, _Map);\n  var _super = _createSuper(Container);\n  function Container() {\n    _classCallCheck(this, Container);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Container, [{\n    key: \"add\",\n    value:\n    /**\n     *\n     * @param token\n     * @param settings\n     */\n    function add(token) {\n      var _GlobalProviders$get;\n      var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var provider = ((_GlobalProviders$get = GlobalProviders.get(token)) === null || _GlobalProviders$get === void 0 ? void 0 : _GlobalProviders$get.clone()) || new Provider(token);\n      Object.assign(provider, settings);\n      return _get(_getPrototypeOf(Container.prototype), \"set\", this).call(this, token, provider);\n    }\n    /**\n     * Add a provider to the\n     * @param token\n     * @param settings\n     */\n  }, {\n    key: \"addProvider\",\n    value: function addProvider(token) {\n      var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.add(token, settings);\n    }\n    /**\n     *\n     * @param token\n     */\n  }, {\n    key: \"hasProvider\",\n    value: function hasProvider(token) {\n      return _get(_getPrototypeOf(Container.prototype), \"has\", this).call(this, token);\n    }\n    /**\n     * Add a provider to the\n     * @param token\n     * @param provider\n     */\n  }, {\n    key: \"setProvider\",\n    value: function setProvider(token, provider) {\n      return _get(_getPrototypeOf(Container.prototype), \"set\", this).call(this, token, provider);\n    }\n    /**\n     * The getProvider() method returns a specified element from a Map object.\n     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n     * @param token\n     */\n  }, {\n    key: \"getProvider\",\n    value: function getProvider(token) {\n      return _get(_getPrototypeOf(Container.prototype), \"get\", this).call(this, token);\n    }\n    /**\n     * Get all providers registered in the injector container.\n     *\n     * @param {ProviderType} type Filter the list by the given ProviderType.\n     * @returns {[TokenProvider , Provider<any>][]}\n     */\n  }, {\n    key: \"getProviders\",\n    value: function getProviders(type) {\n      return _toConsumableArray(this).reduce(function (providers, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          provider = _ref2[1];\n        if (provider.type === type || !type) {\n          return [].concat(_toConsumableArray(providers), [provider]);\n        }\n        return providers;\n      }, []);\n    }\n  }, {\n    key: \"addProviders\",\n    value: function addProviders(container) {\n      var _this = this;\n      container.forEach(function (provider) {\n        if (!_this.hasProvider(provider.provide)) {\n          _this.setProvider(provider.provide, provider.clone());\n        }\n      });\n    }\n  }]);\n  return Container;\n}( /*#__PURE__*/_wrapNativeSuper(Map));","map":{"version":3,"sources":["../../../src/domain/Container.ts"],"names":[],"mappings":";;;;;;;;;AAGA,SAAQ,eAAe,QAAO,kCAAgC;AAC9D,SAAQ,QAAQ,QAAO,eAAa;AAEpC,WAAa,SAAU,0BAAA,IAAA;EAAA,SAAA,CAAA,SAAA,EAAA,IAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,SAAA;EAAA,SAAA,UAAA;IAAA,eAAA,OAAA,SAAA;IAAA,OAAA,MAAA,CAAA,KAAA,OAAA,SAAA;EAAA;EAAA,YAAA,CAAA,SAAA;IAAA,GAAA;IAAA,KAAA;IACrB;;;;AAIG;IACI,SAAA,IAAI,KAAoB,EAAsC;MAAA,IAAA,oBAAA;MAAA,IAApC,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAkC,CAAA,CAAE;MACnE,IAAM,QAAQ,GAAG,EAAA,oBAAA,GAAA,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,cAAA,oBAAA,uBAA1B,oBAAA,CAA4B,KAAK,EAAE,KAAI,IAAI,QAAQ,CAAC,KAAK,CAAC;MAE3E,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC;MAEjC,OAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,gBAAA,IAAA,OAAiB,KAAK,EAAE,QAAQ;IAClC;IAEA;;;;AAIG;EAJH;IAAA,GAAA;IAAA,KAAA,EAKO,SAAA,YAAY,KAAoB,EAAsC;MAAA,IAApC,QAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAkC,CAAA,CAAE;MAC3E,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC;IAClC;IAEA;;;AAGG;EAHH;IAAA,GAAA;IAAA,KAAA,EAIO,SAAA,YAAY,KAAoB,EAAA;MACrC,OAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,gBAAA,IAAA,OAAiB,KAAK;IACxB;IAEA;;;;AAIG;EAJH;IAAA,GAAA;IAAA,KAAA,EAKO,SAAA,YAAY,KAAoB,EAAE,QAAkB,EAAA;MACzD,OAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,gBAAA,IAAA,OAAiB,KAAK,EAAE,QAAQ;IAClC;IAEA;;;;AAIG;EAJH;IAAA,GAAA;IAAA,KAAA,EAKO,SAAA,YAA2C,KAAoB,EAAA;MACpE,OAAA,IAAA,CAAA,eAAA,CAAA,SAAA,CAAA,SAAA,gBAAA,IAAA,OAAiB,KAAK;IACxB;IAEA;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMO,SAAA,aAAa,IAA4B,EAAA;MAC9C,OAAO,kBAAA,CAAI,IAAI,EAAE,MAAM,CAAC,UAAC,SAAS,EAAA,IAAA,EAAmB;QAAA,IAAA,KAAA,GAAA,cAAA,CAAA,IAAA;UAAhB,CAAC,GAAA,KAAA;UAAE,QAAQ,GAAA,KAAA;QAC9C,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE;UACnC,UAAA,MAAA,CAAA,kBAAA,CAAW,SAAS,IAAE,QAAQ;QAC/B;QACD,OAAO,SAAS;MAClB,CAAC,EAAE,EAAE,CAAC;IACR;EAAC;IAAA,GAAA;IAAA,KAAA,EAEM,SAAA,aAAa,SAAuC,EAAA;MAAA,IAAA,KAAA;MACzD,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAI;QAC7B,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;UACvC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;QACrD;MACH,CAAC,CAAC;IACJ;EAAC;EAAA,OAAA,SAAA;AAAA,gBAAA,gBAAA,CAtE4B,GAA4B","sourceRoot":"","sourcesContent":["import { GlobalProviders } from \"../registries/GlobalProviders.js\";\nimport { Provider } from \"./Provider.js\";\nexport class Container extends Map {\n    /**\n     *\n     * @param token\n     * @param settings\n     */\n    add(token, settings = {}) {\n        const provider = GlobalProviders.get(token)?.clone() || new Provider(token);\n        Object.assign(provider, settings);\n        return super.set(token, provider);\n    }\n    /**\n     * Add a provider to the\n     * @param token\n     * @param settings\n     */\n    addProvider(token, settings = {}) {\n        return this.add(token, settings);\n    }\n    /**\n     *\n     * @param token\n     */\n    hasProvider(token) {\n        return super.has(token);\n    }\n    /**\n     * Add a provider to the\n     * @param token\n     * @param provider\n     */\n    setProvider(token, provider) {\n        return super.set(token, provider);\n    }\n    /**\n     * The getProvider() method returns a specified element from a Map object.\n     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n     * @param token\n     */\n    getProvider(token) {\n        return super.get(token);\n    }\n    /**\n     * Get all providers registered in the injector container.\n     *\n     * @param {ProviderType} type Filter the list by the given ProviderType.\n     * @returns {[TokenProvider , Provider<any>][]}\n     */\n    getProviders(type) {\n        return [...this].reduce((providers, [_, provider]) => {\n            if (provider.type === type || !type) {\n                return [...providers, provider];\n            }\n            return providers;\n        }, []);\n    }\n    addProviders(container) {\n        container.forEach((provider) => {\n            if (!this.hasProvider(provider.provide)) {\n                this.setProvider(provider.provide, provider.clone());\n            }\n        });\n    }\n}\n//# sourceMappingURL=Container.js.map"]},"metadata":{},"sourceType":"module"}