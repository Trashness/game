{"ast":null,"code":"import _defineProperty from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { decorateMethodsOf, decoratorTypeOf, DecoratorTypes, Store } from \"@tsed/core\";\nimport { INJECTABLE_PROP } from \"../constants/constants.js\";\nimport { InjectablePropertyType } from \"../domain/InjectablePropertyType.js\";\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept(interceptor, options) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var target = args[0],\n      propertyKey = args[1],\n      descriptor = args[2];\n    var type = decoratorTypeOf(args);\n    switch (type) {\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(target, Intercept(interceptor, options));\n        break;\n      case DecoratorTypes.METHOD:\n        Store.from(target).merge(INJECTABLE_PROP, _defineProperty({}, propertyKey, {\n          options: options,\n          propertyKey: propertyKey,\n          useType: interceptor,\n          bindingType: InjectablePropertyType.INTERCEPTOR\n        }));\n        return descriptor;\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/decorators/intercept.ts"],"names":[],"mappings":";AAAA,SAAQ,iBAAiB,EAAuB,eAAe,EAAE,cAAc,EAAE,KAAK,QAAa,YAAY;AAC/G,SAAQ,eAAe,QAAO,2BAAyB;AACvD,SAAQ,sBAAsB,QAAO,qCAAmC;AAIxE;;;;;;AAMG;AACH,OAAM,SAAU,SAAS,CAA+B,WAAoB,EAAE,OAAa,EAAA;EACzF,OAAO,YAAiC;IAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA7B,IAAyB,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;MAAzB,IAAyB,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;IAAA;IAClC,IAAO,MAAM,GAA6B,IAAI;MAA/B,WAAW,GAAgB,IAAI;MAAlB,UAAU,GAAI,IAAI;IAC9C,IAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;IAClC,QAAQ,IAAI;MACV,KAAK,cAAc,CAAC,KAAK;QACvB,iBAAiB,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC1D;MACF,KAAK,cAAc,CAAC,MAAM;QACxB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,eAAe,EAAA,eAAA,KACrC,WAAW,EAAG;UACb,OAAO,EAAP,OAAO;UACP,WAAW,EAAX,WAAW;UACX,OAAO,EAAE,WAAW;UACpB,WAAW,EAAE,sBAAsB,CAAC;SACrC,EACuB;QAE1B,OAAO,UAAU;IAAC;EAExB,CAAC;AACH","sourceRoot":"","sourcesContent":["import { decorateMethodsOf, decoratorTypeOf, DecoratorTypes, Store } from \"@tsed/core\";\nimport { INJECTABLE_PROP } from \"../constants/constants.js\";\nimport { InjectablePropertyType } from \"../domain/InjectablePropertyType.js\";\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept(interceptor, options) {\n    return (...args) => {\n        const [target, propertyKey, descriptor] = args;\n        const type = decoratorTypeOf(args);\n        switch (type) {\n            case DecoratorTypes.CLASS:\n                decorateMethodsOf(target, Intercept(interceptor, options));\n                break;\n            case DecoratorTypes.METHOD:\n                Store.from(target).merge(INJECTABLE_PROP, {\n                    [propertyKey]: {\n                        options,\n                        propertyKey,\n                        useType: interceptor,\n                        bindingType: InjectablePropertyType.INTERCEPTOR\n                    }\n                });\n                return descriptor;\n        }\n    };\n}\n//# sourceMappingURL=intercept.js.map"]},"metadata":{},"sourceType":"module"}