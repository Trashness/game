{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n  var timeFromCreation = function timeFromCreation(creationTime) {\n    return Date.now() - creationTime;\n  };\n  return notifications.filter(function (notification) {\n    return timeFromCreation(notification.submittedAt) >= expirationPeriod;\n  });\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  var _useEthers = useEthers(),\n    chainId = _useEthers.chainId,\n    account = _useEthers.account;\n  var _useNotificationsCont = useNotificationsContext(),\n    addNotification = _useNotificationsCont.addNotification,\n    notifications = _useNotificationsCont.notifications,\n    removeNotification = _useNotificationsCont.removeNotification;\n  var _useConfig = useConfig(),\n    _useConfig$notificati = _useConfig.notifications,\n    checkInterval = _useConfig$notificati.checkInterval,\n    expirationPeriod = _useConfig$notificati.expirationPeriod;\n  var chainNotifications = useMemo(function () {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(function () {\n    if (!chainId) {\n      return;\n    }\n    var expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n    var _iterator = _createForOfIteratorHelper(expiredNotification),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var notification = _step.value;\n        removeNotification({\n          notificationId: notification.id,\n          chainId: chainId\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification: addNotification,\n    removeNotification: removeNotification\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useNotifications.ts"],"names":[],"mappings":";AAAA,SAAS,OAAO,QAAQ,OAAO;AAC/B,SAAuB,uBAAuB,QAAQ,cAAc;AACpE,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,SAAS,QAAQ,UAAU;AAEpC,SAAS,uBAAuB,CAAC,aAA6B,EAAE,gBAAwB,EAAA;EACtF,IAAI,gBAAgB,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACV;EACD,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,YAAoB;IAAA,OAAK,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY;EAAA;EAE5E,OAAO,aAAa,CAAC,MAAM,CAAC,UAAC,YAAY;IAAA,OAAK,gBAAgB,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,gBAAgB;EAAA,EAAC;AAC/G;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDG;AACH,OAAM,SAAU,gBAAgB,CAAA,EAAA;EAC9B,IAAA,UAAA,GAA6B,SAAS,EAAE;IAAhC,OAAO,GAAA,UAAA,CAAP,OAAO;IAAE,OAAO,GAAA,UAAA,CAAP,OAAO;EACxB,IAAA,qBAAA,GAA+D,uBAAuB,EAAE;IAAhF,eAAe,GAAA,qBAAA,CAAf,eAAe;IAAE,aAAa,GAAA,qBAAA,CAAb,aAAa;IAAE,kBAAkB,GAAA,qBAAA,CAAlB,kBAAkB;EAC1D,IAAA,UAAA,GAEI,SAAS,EAAE;IAAA,qBAAA,GAAA,UAAA,CADb,aAAa;IAAI,aAAa,GAAA,qBAAA,CAAb,aAAa;IAAE,gBAAgB,GAAA,qBAAA,CAAhB,gBAAgB;EAGlD,IAAM,kBAAkB,GAAG,OAAO,CAAC,YAAK;;IACtC,IAAI,OAAO,KAAK,SAAS,IAAI,CAAC,OAAO,EAAE;MACrC,OAAO,EAAE;IACV;IACD,OAAO,CAAA,EAAA,GAAA,aAAa,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;EACrC,CAAC,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;EAErC,WAAW,CAAC,YAAK;IACf,IAAI,CAAC,OAAO,EAAE;MACZ;IACD;IAED,IAAM,mBAAmB,GAAG,uBAAuB,CAAC,kBAAkB,EAAE,gBAAgB,CAAC;IAAA,IAAA,SAAA,GAAA,0BAAA,CAC9D,mBAAmB;MAAA,KAAA;IAAA;MAA9C,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAgD;QAAA,IAArC,YAAY,GAAA,KAAA,CAAA,KAAA;QACrB,kBAAkB,CAAC;UAAE,cAAc,EAAE,YAAY,CAAC,EAAE;UAAE,OAAO,EAAP;QAAO,CAAE,CAAC;;IACjE,SAAA,GAAA;MAAA,SAAA,CAAA,CAAA,CAAA,GAAA;IAAA;MAAA,SAAA,CAAA,CAAA;IAAA;EACH,CAAC,EAAE,aAAa,CAAC;EAEjB,OAAO;IACL,aAAa,EAAE,kBAAkB;IACjC,eAAe,EAAf,eAAe;IACf,kBAAkB,EAAlB;GACD;AACH","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n    if (expirationPeriod === 0) {\n        return [];\n    }\n    const timeFromCreation = (creationTime) => Date.now() - creationTime;\n    return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n    const { chainId, account } = useEthers();\n    const { addNotification, notifications, removeNotification } = useNotificationsContext();\n    const { notifications: { checkInterval, expirationPeriod }, } = useConfig();\n    const chainNotifications = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n    }, [notifications, chainId, account]);\n    useInterval(() => {\n        if (!chainId) {\n            return;\n        }\n        const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n        for (const notification of expiredNotification) {\n            removeNotification({ notificationId: notification.id, chainId });\n        }\n    }, checkInterval);\n    return {\n        notifications: chainNotifications,\n        addNotification,\n        removeNotification,\n    };\n}\n//# sourceMappingURL=useNotifications.js.map"]},"metadata":{},"sourceType":"module"}