{"ast":null,"code":"import _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Mutation } from './mutation.esm.js';\nimport { matchMutation, noop } from './utils.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\n\n// CLASS\nvar MutationCache = /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationCache, _Subscribable);\n  var _super = _createSuper(MutationCache);\n  function MutationCache(config) {\n    var _this;\n    _classCallCheck(this, MutationCache);\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.mutations = [];\n    _this.mutationId = 0;\n    return _this;\n  }\n  _createClass(MutationCache, [{\n    key: \"build\",\n    value: function build(client, options, state) {\n      var mutation = new Mutation({\n        mutationCache: this,\n        logger: client.getLogger(),\n        mutationId: ++this.mutationId,\n        options: client.defaultMutationOptions(options),\n        state: state,\n        defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n      });\n      this.add(mutation);\n      return mutation;\n    }\n  }, {\n    key: \"add\",\n    value: function add(mutation) {\n      this.mutations.push(mutation);\n      this.notify({\n        type: 'added',\n        mutation: mutation\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(mutation) {\n      this.mutations = this.mutations.filter(function (x) {\n        return x !== mutation;\n      });\n      this.notify({\n        type: 'removed',\n        mutation: mutation\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this2 = this;\n      notifyManager.batch(function () {\n        _this2.mutations.forEach(function (mutation) {\n          _this2.remove(mutation);\n        });\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.mutations;\n    }\n  }, {\n    key: \"find\",\n    value: function find(filters) {\n      if (typeof filters.exact === 'undefined') {\n        filters.exact = true;\n      }\n      return this.mutations.find(function (mutation) {\n        return matchMutation(filters, mutation);\n      });\n    }\n  }, {\n    key: \"findAll\",\n    value: function findAll(filters) {\n      return this.mutations.filter(function (mutation) {\n        return matchMutation(filters, mutation);\n      });\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(event) {\n      var _this3 = this;\n      notifyManager.batch(function () {\n        _this3.listeners.forEach(function (listener) {\n          listener(event);\n        });\n      });\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      var _this4 = this;\n      var _this$resuming;\n      this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(function () {\n        var pausedMutations = _this4.mutations.filter(function (x) {\n          return x.state.isPaused;\n        });\n        return notifyManager.batch(function () {\n          return pausedMutations.reduce(function (promise, mutation) {\n            return promise.then(function () {\n              return mutation.continue().catch(noop);\n            });\n          }, Promise.resolve());\n        });\n      }).then(function () {\n        _this4.resuming = undefined;\n      });\n      return this.resuming;\n    }\n  }]);\n  return MutationCache;\n}(Subscribable);\nexport { MutationCache };","map":{"version":3,"sources":["../../src/mutationCache.ts"],"names":["MutationCache","Subscribable","constructor","config","mutations","mutationId","build","client","options","state","mutation","Mutation","mutationCache","logger","getLogger","defaultMutationOptions","defaultOptions","mutationKey","getMutationDefaults","undefined","add","push","notify","type","remove","filter","x","clear","notifyManager","batch","forEach","getAll","find","filters","exact","matchMutation","findAll","event","listeners","listener","resumePausedMutations","resuming","Promise","resolve","then","pausedMutations","isPaused","reduce","promise","continue","catch","noop"],"mappings":"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","sourcesContent":["import type { MutationObserver } from './mutationObserver'\nimport type { MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport type { Action, MutationState } from './mutation'\nimport { Mutation } from './mutation'\nimport type { MutationFilters } from './utils'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: unknown | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n  private resuming: Promise<unknown> | undefined\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find((mutation) => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.resuming = (this.resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.resuming = undefined\n      })\n\n    return this.resuming\n  }\n}\n"]},"metadata":{},"sourceType":"module"}