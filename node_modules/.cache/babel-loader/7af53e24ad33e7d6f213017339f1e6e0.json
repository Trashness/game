{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar e = function e(_e) {\n  return function (n) {\n    return \"function\" == typeof n ? function (e, n) {\n      return customElements.define(e, n), n;\n    }(_e, n) : function (e, n) {\n      var t = n.kind,\n        s = n.elements;\n      return {\n        kind: t,\n        elements: s,\n        finisher: function finisher(n) {\n          customElements.define(e, n);\n        }\n      };\n    }(_e, n);\n  };\n};\nexport { e as customElement };","map":{"version":3,"sources":["../src/decorators/custom-element.ts"],"names":["tagName","clazz","customElements","define","descriptor","kind","elements","finisher","customElement","classOrDescriptor"],"mappings":";;;;;AAmBA,IAwCaQ,CAAAA,GACVR,SAAAA,IAAAA;EAAAA,OACAS,UAAAA,CAAAA;IAAAA,OAC8B,UAAA,IAAA,OAAtBA,CA3CiB,GAAA,UAACT,CAAAA,EAAiBC,CAAAA;MAAAA,OAC5CC,cAAAA,CAAeC,MAAAA,CAAOH,CAAAA,EAASC,CAAAA,CAAAA,EAOxBA,CAAAA;IAAAA,CAAAA,CAoCmBD,EAAAA,EAASS,CAAAA,CAjCP,GAAA,UAC5BT,CAAAA,EACAI,CAAAA,EAAAA;MAEA,IAAOC,CAAAA,GAAkBD,CAAAA,CAAnBC,IAAAA;QAAOC,CAAAA,GAAYF,CAAAA,CAAdE,QAAAA;MACX,OAAO;QACLD,IAAAA,EAAAA,CAAAA;QACAC,QAAAA,EAAAA,CAAAA;QAEAC,QAAAA,WAAAA,SAASN,CAAAA,EAAAA;UACPC,cAAAA,CAAeC,MAAAA,CAAOH,CAAAA,EAASC,CAAAA,CAChC;QAAA;MAAA,CACF;IAAA,CAAA,CAsB2BD,EAAAA,EAASS,CAAAA,CAAAA;EAAAA;AAAAA;AAAAA,SAAAA,CAAAA,IAAAA,aAAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {Constructor, ClassDescriptor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nconst legacyCustomElement = (tagName: string, clazz: CustomElementClass) => {\n  customElements.define(tagName, clazz as CustomElementConstructor);\n  // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n\nconst standardCustomElement = (\n  tagName: string,\n  descriptor: ClassDescriptor\n) => {\n  const {kind, elements} = descriptor;\n  return {\n    kind,\n    elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz: Constructor<HTMLElement>) {\n      customElements.define(tagName, clazz);\n    },\n  };\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string) =>\n  (classOrDescriptor: CustomElementClass | ClassDescriptor) =>\n    typeof classOrDescriptor === 'function'\n      ? legacyCustomElement(tagName, classOrDescriptor)\n      : standardCustomElement(tagName, classOrDescriptor as ClassDescriptor);\n"]},"metadata":{},"sourceType":"module"}