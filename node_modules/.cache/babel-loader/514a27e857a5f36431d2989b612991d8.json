{"ast":null,"code":"import _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _defineProperty from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getConstructorArgNames, isClass, isString, nameOf } from \"@tsed/core\";\nimport { colors } from \"../utils/colors.js\";\nexport var InjectionError = /*#__PURE__*/function (_Error) {\n  _inherits(InjectionError, _Error);\n  var _super = _createSuper(InjectionError);\n  function InjectionError(token, origin) {\n    var _this;\n    _classCallCheck(this, InjectionError);\n    _this = _super.call(this, isString(origin) ? origin : \"\");\n    _defineProperty(_assertThisInitialized(_this), \"name\", \"INJECTION_ERROR\");\n    _defineProperty(_assertThisInitialized(_this), \"tokens\", []);\n    _defineProperty(_assertThisInitialized(_this), \"origin\", void 0);\n    _this.tokens = [token];\n    if (origin) {\n      if (isString(origin)) {\n        _this.origin = {\n          message: origin,\n          stack: _this.stack\n        };\n      } else {\n        if (origin.tokens) {\n          _this.tokens = _this.tokens.concat(origin.tokens);\n          _this.origin = origin.origin;\n        } else {\n          _this.origin = origin;\n          _this.stack = origin.stack;\n        }\n      }\n    }\n    var originMessage = _this.origin ? \"\\nOrigin: \" + _this.origin.message : \"\";\n    var tokensMessage = _this.tokens.map(function (token) {\n      return nameOf(token);\n    }).join(\" > \");\n    _this.message = \"Injection failed on \".concat(tokensMessage).concat(originMessage);\n    return _this;\n  }\n  _createClass(InjectionError, null, [{\n    key: \"throwInjectorError\",\n    value: function throwInjectorError(token, currentDependency, error) {\n      if (currentDependency && isClass(token)) {\n        error.message = printDependencyInjectionError(token, _objectSpread(_objectSpread({}, currentDependency), {}, {\n          message: error.message\n        }));\n      }\n      throw new InjectionError(token, error);\n    }\n  }]);\n  return InjectionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nfunction printDependencyInjectionError(token, options) {\n  var erroredArg = \"\";\n  var args = getConstructorArgNames(token).map(function (arg, index) {\n    if (options.index === index) {\n      erroredArg = arg;\n      arg = colors.red(arg);\n    }\n    return \"\".concat(arg, \": \").concat(nameOf(options.deps[index]));\n  }).join(\", \");\n  var signature = nameOf(token) + \"->constructor(\" + args + \")\";\n  var indexOf = signature.indexOf(erroredArg) - 5;\n  var drawline = function drawline(indexOf) {\n    return \" \".repeat(indexOf) + colors.red(\"^\" + \"‾\".repeat(erroredArg.length - 1));\n  };\n  return \"Unable to inject dependency. \" + options.message + \"\\n\\n\" + signature + \"\\n\" + (indexOf > -1 ? drawline(indexOf) : \"\");\n}","map":{"version":3,"sources":["../../../src/errors/InjectionError.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getConstructorArgNames, isClass, isString, nameOf } from \"@tsed/core\";\nimport { colors } from \"../utils/colors.js\";\nexport class InjectionError extends Error {\n    name = \"INJECTION_ERROR\";\n    tokens = [];\n    origin;\n    constructor(token, origin) {\n        super(isString(origin) ? origin : \"\");\n        this.tokens = [token];\n        if (origin) {\n            if (isString(origin)) {\n                this.origin = {\n                    message: origin,\n                    stack: this.stack\n                };\n            }\n            else {\n                if (origin.tokens) {\n                    this.tokens = this.tokens.concat(origin.tokens);\n                    this.origin = origin.origin;\n                }\n                else {\n                    this.origin = origin;\n                    this.stack = origin.stack;\n                }\n            }\n        }\n        const originMessage = this.origin ? \"\\nOrigin: \" + this.origin.message : \"\";\n        const tokensMessage = this.tokens.map((token) => nameOf(token)).join(\" > \");\n        this.message = `Injection failed on ${tokensMessage}${originMessage}`;\n    }\n    static throwInjectorError(token, currentDependency, error) {\n        if (currentDependency && isClass(token)) {\n            error.message = printDependencyInjectionError(token, { ...currentDependency, message: error.message });\n        }\n        throw new InjectionError(token, error);\n    }\n}\nfunction printDependencyInjectionError(token, options) {\n    let erroredArg = \"\";\n    const args = getConstructorArgNames(token)\n        .map((arg, index) => {\n        if (options.index === index) {\n            erroredArg = arg;\n            arg = colors.red(arg);\n        }\n        return `${arg}: ${nameOf(options.deps[index])}`;\n    })\n        .join(\", \");\n    const signature = nameOf(token) + \"->constructor(\" + args + \")\";\n    const indexOf = signature.indexOf(erroredArg) - 5;\n    const drawline = (indexOf) => \" \".repeat(indexOf) + colors.red(\"^\" + \"‾\".repeat(erroredArg.length - 1));\n    return \"Unable to inject dependency. \" + options.message + \"\\n\\n\" + signature + \"\\n\" + (indexOf > -1 ? drawline(indexOf) : \"\");\n}\n//# sourceMappingURL=InjectionError.js.map"]},"metadata":{},"sourceType":"module"}