{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { providers } from 'ethers';\nimport { useConfig } from '../../../hooks';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { networkStatesReducer } from './reducer';\nimport { useWindow } from '../../window';\nimport { isWebSocketProvider } from '../../../helpers';\nvar Provider = providers.Provider,\n  StaticJsonRpcProvider = providers.StaticJsonRpcProvider;\nvar getProviderFromConfig = function getProviderFromConfig(urlOrProviderOrProviderFunction) {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n  return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction);\n};\nexport var getProvidersFromConfig = function getProvidersFromConfig(readOnlyUrls) {\n  return fromEntries(Object.entries(readOnlyUrls).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      chainId = _ref2[0],\n      urlOrProviderOrProviderFunction = _ref2[1];\n    return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n  }));\n};\nexport function ReadonlyNetworksProvider(_ref3) {\n  var _ref3$providerOverrid = _ref3.providerOverrides,\n    providerOverrides = _ref3$providerOverrid === void 0 ? {} : _ref3$providerOverrid,\n    children = _ref3.children;\n  var _useConfig = useConfig(),\n    _useConfig$readOnlyUr = _useConfig.readOnlyUrls,\n    readOnlyUrls = _useConfig$readOnlyUr === void 0 ? {} : _useConfig$readOnlyUr,\n    pollingInterval = _useConfig.pollingInterval,\n    pollingIntervals = _useConfig.pollingIntervals;\n  var isActive = useWindow();\n  var _useState = useState(function () {\n      return Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides);\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    providers = _useState2[0],\n    setProviders = _useState2[1];\n  var _useReducer = useReducer(networkStatesReducer, Object.assign({}, fromEntries(Object.keys(Object.assign(Object.assign({}, readOnlyUrls), providerOverrides)).map(function (chainId) {\n      return [chainId, {\n        errors: []\n      }];\n    })))),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    networkStates = _useReducer2[0],\n    dispatchNetworkState = _useReducer2[1];\n  var getPollingInterval = useCallback(function (chainId) {\n    var _a;\n    return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval;\n  }, [pollingInterval, pollingIntervals]);\n  useEffect(function () {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  useEffect(function () {\n    for (var _i = 0, _Object$entries = Object.entries(readOnlyUrls); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n        chainId = _Object$entries$_i[0];\n      var provider = providers[chainId];\n      if (provider && !isWebSocketProvider(provider)) {\n        provider.polling = isActive;\n      }\n    }\n  }, [isActive, providers, readOnlyUrls]);\n  useEffect(function () {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(providers); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        chainId = _Object$entries2$_i[0],\n        provider = _Object$entries2$_i[1];\n      if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(Number(chainId));\n      }\n    }\n  }, [providers, getPollingInterval]);\n  var networks = useMemo(function () {\n    return {\n      providers: providers,\n      updateNetworkState: dispatchNetworkState,\n      networkStates: networkStates\n    };\n  }, [providers, dispatchNetworkState, networkStates]);\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: networks\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/readonlyNetworks/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { providers } from 'ethers';\nimport { useConfig } from '../../../hooks';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { networkStatesReducer } from './reducer';\nimport { useWindow } from '../../window';\nimport { isWebSocketProvider } from '../../../helpers';\nconst { Provider, StaticJsonRpcProvider } = providers;\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction) => {\n    if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n        return urlOrProviderOrProviderFunction;\n    }\n    if (typeof urlOrProviderOrProviderFunction === 'function') {\n        return urlOrProviderOrProviderFunction();\n    }\n    return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction);\n};\nexport const getProvidersFromConfig = (readOnlyUrls) => fromEntries(Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\n    chainId,\n    getProviderFromConfig(urlOrProviderOrProviderFunction),\n]));\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }) {\n    const { readOnlyUrls = {}, pollingInterval, pollingIntervals } = useConfig();\n    const isActive = useWindow();\n    const [providers, setProviders] = useState(() => (Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides)));\n    const [networkStates, dispatchNetworkState] = useReducer(networkStatesReducer, Object.assign({}, fromEntries(Object.keys(Object.assign(Object.assign({}, readOnlyUrls), providerOverrides)).map((chainId) => [chainId, { errors: [] }]))));\n    const getPollingInterval = useCallback((chainId) => { var _a; return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval; }, [\n        pollingInterval,\n        pollingIntervals,\n    ]);\n    useEffect(() => {\n        setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n    }, Object.entries(readOnlyUrls).flat());\n    useEffect(() => {\n        for (const [chainId] of Object.entries(readOnlyUrls)) {\n            const provider = providers[chainId];\n            if (provider && !isWebSocketProvider(provider)) {\n                provider.polling = isActive;\n            }\n        }\n    }, [isActive, providers, readOnlyUrls]);\n    useEffect(() => {\n        for (const [chainId, provider] of Object.entries(providers)) {\n            if (!isWebSocketProvider(provider)) {\n                provider.pollingInterval = getPollingInterval(Number(chainId));\n            }\n        }\n    }, [providers, getPollingInterval]);\n    const networks = useMemo(() => ({\n        providers,\n        updateNetworkState: dispatchNetworkState,\n        networkStates,\n    }), [providers, dispatchNetworkState, networkStates]);\n    return _jsx(ReadonlyNetworksContext.Provider, Object.assign({ value: networks }, { children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}