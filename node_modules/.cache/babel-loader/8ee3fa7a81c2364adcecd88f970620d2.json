{"ast":null,"code":"import _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from 'ethers';\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport var CurrencyValue = /*#__PURE__*/function () {\n  function CurrencyValue(currency, value) {\n    _classCallCheck(this, CurrencyValue);\n    this.currency = currency;\n    this.value = value;\n  }\n  _createClass(CurrencyValue, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toString();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      var overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.currency.format(this.value.toString(), overrideOptions);\n    }\n  }, {\n    key: \"checkCurrency\",\n    value: function checkCurrency(other) {\n      if (this.currency !== other.currency) {\n        throw new TypeError(\"Currency mismatch \".concat(this.currency.ticker, \" != \").concat(other.currency.ticker));\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      return new CurrencyValue(this.currency, fn(this.value));\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.add(other.value);\n      });\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.sub(other.value);\n      });\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(value) {\n      return this.map(function (x) {\n        return x.mul(value);\n      });\n    }\n  }, {\n    key: \"div\",\n    value: function div(value) {\n      return this.map(function (x) {\n        return x.div(value);\n      });\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(value) {\n      return this.map(function (x) {\n        return x.mod(value);\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.currency === other.currency && this.value.eq(other.value);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      this.checkCurrency(other);\n      return this.value.lt(other.value);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      this.checkCurrency(other);\n      return this.value.lte(other.value);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      this.checkCurrency(other);\n      return this.value.gt(other.value);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      this.checkCurrency(other);\n      return this.value.gte(other.value);\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.value.isZero();\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(currency, value) {\n      return new CurrencyValue(currency, BigNumber.from(value));\n    }\n  }, {\n    key: \"zero\",\n    value: function zero(currency) {\n      return new CurrencyValue(currency, BigNumber.from(0));\n    }\n  }]);\n  return CurrencyValue;\n}();","map":{"version":3,"sources":["../../../../src/model/CurrencyValue.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from 'ethers';\n/**\n * The `CurrencyValue` class represents a value tied to a currency. The methods include:\n * - `static fromString(currency, value)` - creates a new CurrencyValue from string.\n * - `static zero(currency)` - creates a new CurrencyValue equal to 0.\n * - `toString()` - returns the value of the CurrencyValue as a decimal string with no formatting.\n * - `format(overrideOptions?)` - formats the value according to the currency. The caller can override the formatting options.\n * - `map(fn)` - returns a new CurrencyValue with value transformed by the callback.\n * - `add(other)` - returns a new CurrencyValue with value being the sum of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `sub(other)` - returns a new CurrencyValue with value being the difference of this value and other value. The argument must be a CurrencyValue with the same Currency.\n * - `mul(value)` - returns a new CurrencyValue with value multiplied by the argument.\n * - `div(value)` - returns a new CurrencyValue with value divided by the argument.\n * - `mod(value)` - returns a new CurrencyValue with value modulo the argument.\n * - `equals(other)` - performs an equality check on the currencies and the values of both objects.\n * - `lt(other)` - checks if this value is less than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `lte(other)` - checks if this value is less than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gt(other)` - checks if this value is greater than the other value. The argument must be a CurrencyValue with the same Currency.\n * - `gte(other)` - checks if this value is greater than or equal to the other value. The argument must be a CurrencyValue with the same Currency.\n * - `isZero()` - returns true if the value is zero.\n *\n * @public\n */\nexport class CurrencyValue {\n    constructor(currency, value) {\n        this.currency = currency;\n        this.value = value;\n    }\n    static fromString(currency, value) {\n        return new CurrencyValue(currency, BigNumber.from(value));\n    }\n    static zero(currency) {\n        return new CurrencyValue(currency, BigNumber.from(0));\n    }\n    toString() {\n        return this.value.toString();\n    }\n    format(overrideOptions = {}) {\n        return this.currency.format(this.value.toString(), overrideOptions);\n    }\n    checkCurrency(other) {\n        if (this.currency !== other.currency) {\n            throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n        }\n    }\n    map(fn) {\n        return new CurrencyValue(this.currency, fn(this.value));\n    }\n    add(other) {\n        this.checkCurrency(other);\n        return this.map((x) => x.add(other.value));\n    }\n    sub(other) {\n        this.checkCurrency(other);\n        return this.map((x) => x.sub(other.value));\n    }\n    mul(value) {\n        return this.map((x) => x.mul(value));\n    }\n    div(value) {\n        return this.map((x) => x.div(value));\n    }\n    mod(value) {\n        return this.map((x) => x.mod(value));\n    }\n    equals(other) {\n        return this.currency === other.currency && this.value.eq(other.value);\n    }\n    lt(other) {\n        this.checkCurrency(other);\n        return this.value.lt(other.value);\n    }\n    lte(other) {\n        this.checkCurrency(other);\n        return this.value.lte(other.value);\n    }\n    gt(other) {\n        this.checkCurrency(other);\n        return this.value.gt(other.value);\n    }\n    gte(other) {\n        this.checkCurrency(other);\n        return this.value.gte(other.value);\n    }\n    isZero() {\n        return this.value.isZero();\n    }\n}\n//# sourceMappingURL=CurrencyValue.js.map"]},"metadata":{},"sourceType":"module"}