{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n// modified from https://usehooks.com/useDebounce/\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\nexport function useDebounce(value, delay) {\n  var _useState = useState(value),\n    _useState2 = _slicedToArray(_useState, 2),\n    debouncedValue = _useState2[0],\n    setDebouncedValue = _useState2[1];\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["../../../../src/hooks/useDebounce.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C;AACA;;;;;;;;;;;AAWG;AACH,OAAM,SAAU,WAAW,CAAI,KAAQ,EAAE,KAAa,EAAA;EACpD,IAAA,SAAA,GAA4C,QAAQ,CAAI,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAvD,cAAc,GAAA,UAAA;IAAE,iBAAiB,GAAA,UAAA;EAExC,SAAS,CAAC,YAAK;IACb;IACA,IAAM,OAAO,GAAG,UAAU,CAAC,YAAK;MAC9B,iBAAiB,CAAC,KAAK,CAAC;IAC1B,CAAC,EAAE,KAAK,CAAC;IAET;IACA;IACA;IACA,OAAO,YAAK;MACV,YAAY,CAAC,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;EAElB,OAAO,cAAc;AACvB","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\n// modified from https://usehooks.com/useDebounce/\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\nexport function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n    return debouncedValue;\n}\n//# sourceMappingURL=useDebounce.js.map"]},"metadata":{},"sourceType":"module"}