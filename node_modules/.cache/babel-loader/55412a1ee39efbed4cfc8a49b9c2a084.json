{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { disconnect as l, getAccount as h, watchAccount as w, fetchBalance as d, getNetwork as C, watchNetwork as u, switchNetwork as f, fetchEnsName as g, fetchEnsAvatar as m, connect as s, InjectedConnector as p } from \"@wagmi/core\";\nimport { WalletConnectConnector as I } from \"@wagmi/connectors/walletConnect\";\nimport { WalletConnectLegacyConnector as y } from \"@wagmi/core/connectors/walletConnectLegacy\";\nimport { jsonRpcProvider as W } from \"@wagmi/core/providers/jsonRpc\";\nvar A = /*#__PURE__*/function () {\n  function A(t, n) {\n    _classCallCheck(this, A);\n    this.wagmi = {}, this.walletConnectUri = \"\", this.walletConnectVersion = 1, this.chains = [], this.namespace = \"eip155\", this.disconnect = l, this.getAccount = h, this.watchAccount = w, this.fetchBalance = d, this.getNetwork = C, this.watchNetwork = u, this.switchNetwork = f, this.fetchEnsName = g, this.fetchEnsAvatar = m, this.wagmi = t, this.chains = n;\n    var _this$getWalletConnec = this.getWalletConnectConnectors(),\n      e = _this$getWalletConnec.isV2;\n    this.walletConnectVersion = e ? 2 : 1;\n  }\n  _createClass(A, [{\n    key: \"getDefaultConnectorChainId\",\n    value: function getDefaultConnectorChainId(t) {\n      return t.chains[0].id;\n    }\n  }, {\n    key: \"getWalletConnectConnectors\",\n    value: function getWalletConnectConnectors() {\n      var t = this.wagmi.connectors.find(function (c) {\n          return c.id === \"walletConnect\";\n        }),\n        n = this.wagmi.connectors.find(function (c) {\n          return c.id === \"walletConnectLegacy\";\n        }),\n        e = t !== null && t !== void 0 ? t : n;\n      if (!e) throw new Error(\"WalletConnectConnector or WalletConnectLegacyConnector is required\");\n      return {\n        isV2: !!t,\n        connector: e\n      };\n    }\n  }, {\n    key: \"connectWalletConnectV1\",\n    value: function () {\n      var _connectWalletConnectV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(t, n) {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", new Promise(function (e, c) {\n                t.once(\"message\", /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n                    var r, o;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          r = _ref.type;\n                          if (!(r === \"connecting\")) {\n                            _context.next = 6;\n                            break;\n                          }\n                          _context.next = 4;\n                          return t.getProvider();\n                        case 4:\n                          o = _context.sent.connector;\n                          _this.walletConnectUri = o.uri, n(o.uri), o.on(\"disconnect\", function () {\n                            c(Error());\n                          }), o.on(\"connect\", function () {\n                            e();\n                          });\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n              }));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function connectWalletConnectV1(_x, _x2) {\n        return _connectWalletConnectV.apply(this, arguments);\n      }\n      return connectWalletConnectV1;\n    }()\n  }, {\n    key: \"connectWalletConnectV2\",\n    value: function () {\n      var _connectWalletConnectV2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(t, n) {\n        var _this2 = this;\n        var e, c;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return t.getProvider();\n            case 2:\n              e = _context3.sent;\n              c = \"\";\n              return _context3.abrupt(\"return\", new Promise(function (r) {\n                e.once(\"display_uri\", function (o) {\n                  _this2.walletConnectUri = o, c = o, n(o);\n                }), e.once(\"connect\", function () {\n                  c === _this2.walletConnectUri && r();\n                });\n              }));\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function connectWalletConnectV2(_x4, _x5) {\n        return _connectWalletConnectV2.apply(this, arguments);\n      }\n      return connectWalletConnectV2;\n    }()\n  }, {\n    key: \"getDefaultChain\",\n    value: function getDefaultChain() {\n      var t = this.chains.find(function (n) {\n        return n.id === 1;\n      });\n      return t !== null && t !== void 0 ? t : this.chains[0];\n    }\n  }, {\n    key: \"getConnectorById\",\n    value: function getConnectorById(t) {\n      var n = this.wagmi.connectors.find(function (e) {\n        return e.id === t;\n      });\n      if (!n) throw new Error(\"Connector for id \".concat(t, \" was not found\"));\n      return n;\n    }\n  }, {\n    key: \"getConnectors\",\n    value: function getConnectors() {\n      return this.wagmi.connectors.filter(function (t) {\n        return !t.id.includes(\"walletConnect\");\n      });\n    }\n  }, {\n    key: \"connectWalletConnect\",\n    value: function () {\n      var _connectWalletConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(t, n) {\n        var _this$getWalletConnec2, e, c, r, o, _yield$Promise$all, _yield$Promise$all2, a;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$getWalletConnec2 = this.getWalletConnectConnectors();\n              e = _this$getWalletConnec2.connector;\n              c = _this$getWalletConnec2.isV2;\n              r = n !== null && n !== void 0 ? n : this.getDefaultConnectorChainId(e);\n              o = c ? this.connectWalletConnectV2.bind(this) : this.connectWalletConnectV1.bind(this);\n              _context4.next = 7;\n              return Promise.all([s({\n                connector: e,\n                chainId: r\n              }), o(e, t)]);\n            case 7:\n              _yield$Promise$all = _context4.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);\n              a = _yield$Promise$all2[0];\n              return _context4.abrupt(\"return\", a);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function connectWalletConnect(_x6, _x7) {\n        return _connectWalletConnect.apply(this, arguments);\n      }\n      return connectWalletConnect;\n    }()\n  }, {\n    key: \"connectConnector\",\n    value: function () {\n      var _connectConnector = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(t, n) {\n        var e, c;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              e = this.getConnectorById(t), c = n !== null && n !== void 0 ? n : this.getDefaultConnectorChainId(e);\n              _context5.next = 3;\n              return s({\n                connector: e,\n                chainId: c\n              });\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function connectConnector(_x8, _x9) {\n        return _connectConnector.apply(this, arguments);\n      }\n      return connectConnector;\n    }()\n  }]);\n  return A;\n}();\nvar v = \"eip155\";\nfunction P(_ref3) {\n  var i = _ref3.projectId;\n  return W({\n    rpc: function rpc(t) {\n      var n;\n      return [1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 420, 42161, 42220, 43114, 80001, 421611, 421613, 1313161554, 11297108109].includes(t.id) ? {\n        http: \"https://rpc.walletconnect.com/v1/?chainId=\".concat(v, \":\").concat(t.id, \"&projectId=\").concat(i)\n      } : {\n        http: t.rpcUrls.default.http[0],\n        webSocket: (n = t.rpcUrls.default.webSocket) == null ? void 0 : n[0]\n      };\n    }\n  });\n}\nfunction j(_ref4) {\n  var i = _ref4.chains,\n    t = _ref4.version,\n    n = _ref4.projectId;\n  var e = t === 1,\n    c = [new p({\n      chains: i\n    })];\n  return e ? c.unshift(new y({\n    chains: i,\n    options: {\n      qrcode: !1\n    }\n  })) : c.unshift(new I({\n    chains: i,\n    options: {\n      projectId: n,\n      showQrModal: !1\n    }\n  })), c;\n}\nexport { A as EthereumClient, j as w3mConnectors, P as w3mProvider };","map":{"version":3,"sources":["../src/client.ts","../src/utils.ts"],"names":["EthereumClient","wagmi","chains","isV2","connector","wcc","wc1c","onUri","resolve","reject","type","providerConnector","provider","activeWalletConnectUri","uri","mainnet","chain","id","item","selectedChainId","chainId","handleProviderEvents","data","connect","connectorId","disconnect","getAccount","watchAccount","fetchBalance","getNetwork","watchNetwork","switchNetwork","fetchEnsName","fetchEnsAvatar","w3mProvider","jsonRpcProvider","NAMESPACE","projectId","_a","w3mConnectors","isV1","version","connectors","InjectedConnector","WalletConnectLegacyConnector","WalletConnectConnector"],"mappings":"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","sourcesContent":["import type { Chain, Client, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId, ModalConnectorsOpts } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public walletConnectUri = ''\n  public walletConnectVersion: ModalConnectorsOpts['version'] = 1\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n    const { isV2 } = this.getWalletConnectConnectors()\n    this.walletConnectVersion = isV2 ? 2 : 1\n  }\n\n  // -- private ------------------------------------------- //\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  private getWalletConnectConnectors() {\n    const wcc = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n    const wc1c = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnectLegacy')\n    const connector = wcc ?? wc1c\n    if (!connector) {\n      throw new Error('WalletConnectConnector or WalletConnectLegacyConnector is required')\n    }\n\n    return { isV2: Boolean(wcc), connector }\n  }\n\n  private async connectWalletConnectV1(connector: Connector, onUri: (uri: string) => void) {\n    return new Promise<void>((resolve, reject) => {\n      connector.once('message', async ({ type }) => {\n        if (type === 'connecting') {\n          const providerConnector = (await connector.getProvider()).connector\n          this.walletConnectUri = providerConnector.uri\n          onUri(providerConnector.uri)\n          providerConnector.on('disconnect', () => {\n            reject(Error())\n          })\n          providerConnector.on('connect', () => {\n            resolve()\n          })\n        }\n      })\n    })\n  }\n\n  private async connectWalletConnectV2(connector: Connector, onUri: (uri: string) => void) {\n    const provider = await connector.getProvider()\n    let activeWalletConnectUri = ''\n\n    return new Promise<void>(resolve => {\n      provider.once('display_uri', (uri: string) => {\n        this.walletConnectUri = uri\n        activeWalletConnectUri = uri\n        onUri(uri)\n      })\n      provider.once('connect', () => {\n        if (activeWalletConnectUri === this.walletConnectUri) {\n          resolve()\n        }\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getDefaultChain() {\n    const mainnet = this.chains.find(chain => chain.id === 1)\n\n    return mainnet ?? this.chains[0]\n  }\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(\n      connector => !connector.id.includes('walletConnect')\n    )\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const { connector, isV2 } = this.getWalletConnectConnectors()\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const handleProviderEvents = isV2\n      ? this.connectWalletConnectV2.bind(this)\n      : this.connectWalletConnectV1.bind(this)\n    const [data] = await Promise.all([\n      connect({ connector, chainId }),\n      handleProviderEvents(connector, onUri)\n    ])\n\n    return data\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import { WalletConnectConnector } from '@wagmi/connectors/walletConnect'\nimport type { Chain, Connector } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { WalletConnectLegacyConnector } from '@wagmi/core/connectors/walletConnectLegacy'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function w3mProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 420, 42161, 42220, 43114, 80001, 421611, 421613,\n        1313161554, 11297108109\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function w3mConnectors({ chains, version, projectId }: ModalConnectorsOpts) {\n  const isV1 = version === 1\n\n  const connectors: Connector[] = [new InjectedConnector({ chains })]\n\n  if (isV1) {\n    connectors.unshift(\n      new WalletConnectLegacyConnector({\n        chains,\n        options: { qrcode: false }\n      })\n    )\n  } else {\n    connectors.unshift(\n      new WalletConnectConnector({\n        chains,\n        options: { projectId, showQrModal: false }\n      })\n    )\n  }\n\n  return connectors\n}\n"]},"metadata":{},"sourceType":"module"}