{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { hydrate, dehydrate } from '@tanstack/query-core';\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nvar cacheableEventTypes = ['added', 'removed', 'updated'];\nfunction isCacheableEventType(eventType) {\n  return cacheableEventTypes.includes(eventType);\n}\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nfunction persistQueryClientRestore(_x) {\n  return _persistQueryClientRestore.apply(this, arguments);\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nfunction _persistQueryClientRestore() {\n  _persistQueryClientRestore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var queryClient, persister, _ref$maxAge, maxAge, _ref$buster, buster, hydrateOptions, persistedClient, expired, busted;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          queryClient = _ref.queryClient, persister = _ref.persister, _ref$maxAge = _ref.maxAge, maxAge = _ref$maxAge === void 0 ? 1000 * 60 * 60 * 24 : _ref$maxAge, _ref$buster = _ref.buster, buster = _ref$buster === void 0 ? '' : _ref$buster, hydrateOptions = _ref.hydrateOptions;\n          _context.prev = 1;\n          _context.next = 4;\n          return persister.restoreClient();\n        case 4:\n          persistedClient = _context.sent;\n          if (persistedClient) {\n            if (persistedClient.timestamp) {\n              expired = Date.now() - persistedClient.timestamp > maxAge;\n              busted = persistedClient.buster !== buster;\n              if (expired || busted) {\n                persister.removeClient();\n              } else {\n                hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n              }\n            } else {\n              persister.removeClient();\n            }\n          }\n          _context.next = 12;\n          break;\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          if (process.env.NODE_ENV !== 'production') {\n            queryClient.getLogger().error(_context.t0);\n            queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n          }\n          persister.removeClient();\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 8]]);\n  }));\n  return _persistQueryClientRestore.apply(this, arguments);\n}\nfunction persistQueryClientSave(_x2) {\n  return _persistQueryClientSave.apply(this, arguments);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nfunction _persistQueryClientSave() {\n  _persistQueryClientSave = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n    var queryClient, persister, _ref2$buster, buster, dehydrateOptions, persistClient;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          queryClient = _ref2.queryClient, persister = _ref2.persister, _ref2$buster = _ref2.buster, buster = _ref2$buster === void 0 ? '' : _ref2$buster, dehydrateOptions = _ref2.dehydrateOptions;\n          persistClient = {\n            buster: buster,\n            timestamp: Date.now(),\n            clientState: dehydrate(queryClient, dehydrateOptions)\n          };\n          _context2.next = 4;\n          return persister.persistClient(persistClient);\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _persistQueryClientSave.apply(this, arguments);\n}\nfunction persistQueryClientSubscribe(props) {\n  var unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(function (event) {\n    if (isCacheableEventType(event.type)) {\n      persistQueryClientSave(props);\n    }\n  });\n  var unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(function (event) {\n    if (isCacheableEventType(event.type)) {\n      persistQueryClientSave(props);\n    }\n  });\n  return function () {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\nfunction persistQueryClient(props) {\n  var hasUnsubscribed = false;\n  var persistQueryClientUnsubscribe;\n  var unsubscribe = function unsubscribe() {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n  var restorePromise = persistQueryClientRestore(props).then(function () {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}\nexport { persistQueryClient, persistQueryClientRestore, persistQueryClientSave, persistQueryClientSubscribe };","map":{"version":3,"sources":["../../src/persist.ts"],"names":["cacheableEventTypes","isCacheableEventType","eventType","includes","persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","persistedClient","restoreClient","timestamp","expired","Date","now","busted","removeClient","hydrate","clientState","process","env","NODE_ENV","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","dehydrate","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","event","type","unusbscribeMutationCache","getMutationCache","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","restorePromise","then"],"mappings":";;;;AAuDA;AACA;AACA;AACA;AACA,IAAMA,mBAA2C,GAAG,CAClD,OADkD,EAElD,SAFkD,EAGlD,SAHkD,CAApD;AAMA,SAASC,oBAAT,CAA8BC,SAA9B,EAA0D;EACxD,OAAOF,mBAAmB,CAACG,QAApBH,CAA6BE,SAA7BF,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AALA,SAMsBI,yBAAf,CAAA,EAAA;EAAA,OAAA,0BAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAoCP;AACA;AACA;AACA;AACA;AAJA,SAAA,2BAAA;EAAA,0BAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CApCO,SAAA,QAAA,IAAA;IAAA,IAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,MAAA,EAAA,WAAA,EAAA,MAAA,EAAA,cAAA,EAAA,eAAA,EAAA,OAAA,EAAA,MAAA;IAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;MAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA;UACLC,WAD8C,GAAA,IAAA,CAC9CA,WAD8C,EAE9CC,SAF8C,GAAA,IAAA,CAE9CA,SAF8C,EAAA,WAAA,GAAA,IAAA,CAG9CC,MAAM,EAANA,MAAM,GAAA,WAAA,cAAG,IAAO,GAAA,EAAP,GAAY,EAAZ,GAAiB,EAHoB,GAAA,WAAA,EAAA,WAAA,GAAA,IAAA,CAI9CC,MAAM,EAANA,MAAM,GAAA,WAAA,cAAG,EAJqC,GAAA,WAAA,EAK9CC,cAAAA,GAAAA,IAAAA,CAAAA,cAAAA;UAAAA,QAAAA,CAAAA,IAAAA;UAAAA,QAAAA,CAAAA,IAAAA;UAAAA,OAGgCH,SAAS,CAACK,aAAVL,EAA9B;QAAA;UAAMI,eAAe,GAAA,QAAA,CAAA,IAAA;UAErB,IAAIA,eAAJ,EAAqB;YACnB,IAAIA,eAAe,CAACE,SAApB,EAA+B;cACvBC,OAAO,GAAGC,IAAI,CAACC,GAALD,EAAAA,GAAaJ,eAAe,CAACE,SAA7BE,GAAyCP,MAAzD;cACMS,MAAM,GAAGN,eAAe,CAACF,MAAhBE,KAA2BF,MAA1C;cACA,IAAIK,OAAO,IAAIG,MAAf,EAAuB;gBACrBV,SAAS,CAACW,YAAVX,EAAAA;cACD,CAFD,MAEO;gBACLY,OAAO,CAACb,WAAD,EAAcK,eAAe,CAACS,WAA9B,EAA2CV,cAA3C,CAAPS;cACD;YACF,CARD,MAQO;cACLZ,SAAS,CAACW,YAAVX,EAAAA;YACD;UACF;UAAA,QAAA,CAAA,IAAA;UAAA;QAAA;UAAA,QAAA,CAAA,IAAA;UAAA,QAAA,CAAA,EAAA,GAAA,QAAA;UAED,IAAIc,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;YACzCf,WAAW,CAACkB,SAAZlB,EAAwBmB,CAAAA,KAAxBnB,CAAAA,QAAAA,CAAAA,EAAAA,CAAAA;YACAA,WAAW,CACRkB,SADHlB,EAEGoB,CAAAA,IAFHpB,CAGI,0IAHJA,CAAAA;UAKD;UACDC,SAAS,CAACW,YAAVX,EAAAA;QAAAA;QAAAA;UAAAA,OAAAA,QAAAA,CAAAA,IAAAA;MAAAA;IAAAA,GAAAA,OAAAA;EAAAA,CAEH;EAAA,OAAA,0BAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAAA,SAOqBoB,sBAAf,CAAA,GAAA;EAAA,OAAA,uBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAeP;AACA;AACA;AACA;AAHA,SAAA,wBAAA;EAAA,uBAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAfO,SAAA,SAAA,KAAA;IAAA,IAAA,WAAA,EAAA,SAAA,EAAA,YAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,aAAA;IAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,UAAA,SAAA;MAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;QAAA;UACLrB,WAD2C,GAAA,KAAA,CAC3CA,WAD2C,EAE3CC,SAF2C,GAAA,KAAA,CAE3CA,SAF2C,EAAA,YAAA,GAAA,KAAA,CAG3CE,MAAM,EAANA,MAAM,GAAA,YAAA,cAAG,EAHkC,GAAA,YAAA,EAI3CmB,gBAAAA,GAAAA,KAAAA,CAAAA,gBAAAA;UAEMC,aAA8B,GAAG;YACrCpB,MADqC,EACrCA,MADqC;YAErCI,SAAS,EAAEE,IAAI,CAACC,GAALD,EAF0B;YAGrCK,WAAW,EAAEU,SAAS,CAACxB,WAAD,EAAcsB,gBAAd;WAHxB;UAAA,SAAA,CAAA,IAAA;UAAA,OAMMrB,SAAS,CAACsB,aAAVtB,CAAwBsB,aAAxBtB,CAAN;QAAA;QAAA;UAAA,OAAA,SAAA,CAAA,IAAA;MAAA;IAAA,GAAA,QAAA;EAAA,CACD;EAAA,OAAA,uBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAMM,SAASwB,2BAAT,CACLC,KADK,EAEL;EACA,IAAMC,qBAAqB,GAAG,KAAK,CAAC3B,WAAN,CAC3B4B,aAD2B,EAE3BC,CAAAA,SAF2B,CAEhBC,UAAAA,KAAD,EAAW;IACpB,IAAIlC,oBAAoB,CAACkC,KAAK,CAACC,IAAP,CAAxB,EAAsC;MACpCV,sBAAsB,CAACK,KAAD,CAAtBL;IACD;EACF,CAN2B,CAA9B;EAQA,IAAMW,wBAAwB,GAAG,KAAK,CAAChC,WAAN,CAC9BiC,gBAD8B,EAE9BJ,CAAAA,SAF8B,CAEnBC,UAAAA,KAAD,EAAW;IACpB,IAAIlC,oBAAoB,CAACkC,KAAK,CAACC,IAAP,CAAxB,EAAsC;MACpCV,sBAAsB,CAACK,KAAD,CAAtBL;IACD;EACF,CAN8B,CAAjC;EAQA,OAAO,YAAM;IACXM,qBAAqB,EAAA;IACrBK,wBAAwB,EAAA;GAF1B;AAID;AAED;AACA;AACA;;AACO,SAASE,kBAAT,CACLR,KADK,EAEwB;EAC7B,IAAIS,eAAe,GAAG,KAAtB;EACA,IAAIC,6BAAJ;EACA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAA,EAAS;IACxBF,eAAe,GAAG,IAAlBA;IACAC,6BAA6B,IAAA,IAA7BA,GAAAA,KAAAA,CAAAA,GAAAA,6BAA6B,EAAA;EAC9B,CAHD,CAH6B,CAAA;;EAS7B,IAAME,cAAc,GAAG,yBAAyB,CAACZ,KAAD,CAAzB,CAAiCa,IAAjC,CAAsC,YAAM;IACjE,IAAI,CAACJ,eAAL,EAAsB;MACpB;MACAC,6BAA6B,GAAGX,2BAA2B,CAACC,KAAD,CAA3DU;IACD;EACF,CALsB,CAAvB;EAOA,OAAO,CAACC,WAAD,EAAcC,cAAd,CAAP;AACD","sourcesContent":["import type {\n  QueryClient,\n  DehydratedState,\n  DehydrateOptions,\n  HydrateOptions,\n} from '@tanstack/query-core'\nimport { dehydrate, hydrate } from '@tanstack/query-core'\nimport type { NotifyEventType } from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClienRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClienRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClienRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClienRootOptions {}\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */\nconst cacheableEventTypes: Array<NotifyEventType> = [\n  'added',\n  'removed',\n  'updated',\n]\n\nfunction isCacheableEventType(eventType: NotifyEventType) {\n  return cacheableEventTypes.includes(eventType)\n}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err)\n      queryClient\n        .getLogger()\n        .warn(\n          'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n        )\n    }\n    persister.removeClient()\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  const unusbscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe((event) => {\n      if (isCacheableEventType(event.type)) {\n        persistQueryClientSave(props)\n      }\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unusbscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n"]},"metadata":{},"sourceType":"module"}