{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair(first, second, delay) {\n  var _useState = useState([first, second]),\n    _useState2 = _slicedToArray(_useState, 2),\n    debouncedValue = _useState2[0],\n    setDebouncedValue = _useState2[1];\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue([first, second]);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [first, second, delay]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["../../../../src/hooks/useDebouncePair.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C;;;;;;;;;;AAUG;AACH,OAAM,SAAU,eAAe,CAAO,KAAQ,EAAE,MAAS,EAAE,KAAa,EAAA;EACtE,IAAA,SAAA,GAA4C,QAAQ,CAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAtE,cAAc,GAAA,UAAA;IAAE,iBAAiB,GAAA,UAAA;EAExC,SAAS,CAAC,YAAK;IACb;IACA,IAAM,OAAO,GAAG,UAAU,CAAC,YAAK;MAC9B,iBAAiB,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC,EAAE,KAAK,CAAC;IAET;IACA;IACA;IACA,OAAO,YAAK;MACV,YAAY,CAAC,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAE1B,OAAO,cAAc;AACvB","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\n/**\n * Debounce a pair of values of types T and U.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n\n * This function is used for debouncing multicall until enough calls are aggregated.\n * @param first first variable to be debounced\n * @param second second variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns {} debounced values `[T, U]`\n */\nexport function useDebouncePair(first, second, delay) {\n    const [debouncedValue, setDebouncedValue] = useState([first, second]);\n    useEffect(() => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n            setDebouncedValue([first, second]);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [first, second, delay]);\n    return debouncedValue;\n}\n//# sourceMappingURL=useDebouncePair.js.map"]},"metadata":{},"sourceType":"module"}