{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nvar MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n        case \"filter\":\n          return this.filter;\n      }\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n  return Event;\n}();\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\nfunction numPad(value) {\n  var result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (var i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = arrayify(datas[_i]);\n    // Update the bytes offset\n    result[_i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  _createClass(Resolver, [{\n    key: \"supportsWildcard\",\n    value: function supportsWildcard() {\n      var _this = this;\n      if (!this._supportsEip2544) {\n        // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n        this._supportsEip2544 = this.provider.call({\n          to: this.address,\n          data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n        }).then(function (result) {\n          return BigNumber.from(result).eq(1);\n        }).catch(function (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return false;\n          }\n          // Rethrow the error: link is down, etc. Let future attempts retry.\n          _this._supportsEip2544 = null;\n          throw error;\n        });\n      }\n      return this._supportsEip2544;\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tx, parseBytes, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // e.g. keccak256(\"addr(bytes32,uint256)\")\n              tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n              }; // Wildcard support; use EIP-2544 to resolve the request\n              parseBytes = false;\n              _context.next = 4;\n              return this.supportsWildcard();\n            case 4:\n              if (!_context.sent) {\n                _context.next = 7;\n                break;\n              }\n              parseBytes = true;\n              // selector(\"resolve(bytes,bytes)\")\n              tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            case 7:\n              _context.prev = 7;\n              _context.next = 10;\n              return this.provider.call(tx);\n            case 10:\n              result = _context.sent;\n              if (arrayify(result).length % 32 === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                  transaction: tx,\n                  data: result\n                });\n              }\n              if (parseBytes) {\n                result = _parseBytes(result, 0);\n              }\n              return _context.abrupt(\"return\", result);\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](7);\n              if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context.next = 20;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 20:\n              throw _context.t0;\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n    }\n  }, {\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._fetch(selector, parameters);\n            case 2:\n              result = _context2.sent;\n              if (!(result != null)) {\n                _context2.next = 5;\n                break;\n              }\n              return _context2.abrupt(\"return\", _parseBytes(result, 0));\n            case 5:\n              return _context2.abrupt(\"return\", null);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n      var bytes = arrayify(hexBytes);\n      // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      }\n      // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      }\n      // Bech32\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1];\n        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n        var _version = bytes[0];\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (coinType == null) {\n                coinType = 60;\n              }\n              // If Ethereum, use the standard `addr(bytes32)`\n              if (!(coinType === 60)) {\n                _context3.next = 16;\n                break;\n              }\n              _context3.prev = 2;\n              _context3.next = 5;\n              return this._fetch(\"0x3b3b57de\");\n            case 5:\n              result = _context3.sent;\n              if (!(result === \"0x\" || result === HashZero)) {\n                _context3.next = 8;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 8:\n              return _context3.abrupt(\"return\", this.provider.formatter.callAddress(result));\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](2);\n              if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 15:\n              throw _context3.t0;\n            case 16:\n              _context3.next = 18;\n              return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            case 18:\n              hexBytes = _context3.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context3.next = 21;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 21:\n              // Compute the address\n              address = this._getAddress(coinType, hexBytes);\n              if (address == null) {\n                logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getAddress(\".concat(coinType, \")\"),\n                  coinType: coinType,\n                  data: hexBytes\n                });\n              }\n              return _context3.abrupt(\"return\", address);\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[2, 11]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              linkage = [{\n                type: \"name\",\n                content: this.name\n              }];\n              _context4.prev = 1;\n              _context4.next = 4;\n              return this.getText(\"avatar\");\n            case 4:\n              avatar = _context4.sent;\n              if (!(avatar == null)) {\n                _context4.next = 7;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 7:\n              i = 0;\n            case 8:\n              if (!(i < matchers.length)) {\n                _context4.next = 91;\n                break;\n              }\n              match = avatar.match(matchers[i]);\n              if (!(match == null)) {\n                _context4.next = 12;\n                break;\n              }\n              return _context4.abrupt(\"continue\", 88);\n            case 12:\n              scheme = match[1].toLowerCase();\n              _context4.t0 = scheme;\n              _context4.next = _context4.t0 === \"https\" ? 16 : _context4.t0 === \"data\" ? 18 : _context4.t0 === \"ipfs\" ? 20 : _context4.t0 === \"erc721\" ? 22 : _context4.t0 === \"erc1155\" ? 22 : 88;\n              break;\n            case 16:\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: avatar\n              });\n            case 18:\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: avatar\n              });\n            case 20:\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: getIpfsLink(avatar)\n              });\n            case 22:\n              // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n              selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n              linkage.push({\n                type: scheme,\n                content: avatar\n              });\n              // The owner of this name\n              _context4.t1 = this._resolvedAddress;\n              if (_context4.t1) {\n                _context4.next = 29;\n                break;\n              }\n              _context4.next = 28;\n              return this.getAddress();\n            case 28:\n              _context4.t1 = _context4.sent;\n            case 29:\n              owner = _context4.t1;\n              comps = (match[2] || \"\").split(\"/\");\n              if (!(comps.length !== 2)) {\n                _context4.next = 33;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 33:\n              _context4.next = 35;\n              return this.provider.formatter.address(comps[0]);\n            case 35:\n              addr = _context4.sent;\n              tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n              if (!(scheme === \"erc721\")) {\n                _context4.next = 48;\n                break;\n              }\n              _context4.t2 = this.provider.formatter;\n              _context4.next = 41;\n              return this.provider.call({\n                to: addr,\n                data: hexConcat([\"0x6352211e\", tokenId])\n              });\n            case 41:\n              _context4.t3 = _context4.sent;\n              tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);\n              if (!(owner !== tokenOwner)) {\n                _context4.next = 45;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 45:\n              linkage.push({\n                type: \"owner\",\n                content: tokenOwner\n              });\n              _context4.next = 57;\n              break;\n            case 48:\n              if (!(scheme === \"erc1155\")) {\n                _context4.next = 57;\n                break;\n              }\n              _context4.t4 = BigNumber;\n              _context4.next = 52;\n              return this.provider.call({\n                to: addr,\n                data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n              });\n            case 52:\n              _context4.t5 = _context4.sent;\n              balance = _context4.t4.from.call(_context4.t4, _context4.t5);\n              if (!balance.isZero()) {\n                _context4.next = 56;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 56:\n              linkage.push({\n                type: \"balance\",\n                content: balance.toString()\n              });\n            case 57:\n              // Call the token contract for the metadata URL\n              tx = {\n                to: this.provider.formatter.address(comps[0]),\n                data: hexConcat([selector, tokenId])\n              };\n              _context4.t6 = _parseString;\n              _context4.next = 61;\n              return this.provider.call(tx);\n            case 61:\n              _context4.t7 = _context4.sent;\n              metadataUrl = (0, _context4.t6)(_context4.t7, 0);\n              if (!(metadataUrl == null)) {\n                _context4.next = 65;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 65:\n              linkage.push({\n                type: \"metadata-url-base\",\n                content: metadataUrl\n              });\n              // ERC-1155 allows a generic {id} in the URL\n              if (scheme === \"erc1155\") {\n                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                linkage.push({\n                  type: \"metadata-url-expanded\",\n                  content: metadataUrl\n                });\n              }\n              // Transform IPFS metadata links\n              if (metadataUrl.match(/^ipfs:/i)) {\n                metadataUrl = getIpfsLink(metadataUrl);\n              }\n              linkage.push({\n                type: \"metadata-url\",\n                content: metadataUrl\n              });\n              // Get the token metadata\n              _context4.next = 71;\n              return fetchJson(metadataUrl);\n            case 71:\n              metadata = _context4.sent;\n              if (metadata) {\n                _context4.next = 74;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 74:\n              linkage.push({\n                type: \"metadata\",\n                content: JSON.stringify(metadata)\n              });\n              // Pull the image URL out\n              imageUrl = metadata.image;\n              if (!(typeof imageUrl !== \"string\")) {\n                _context4.next = 78;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 78:\n              if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                _context4.next = 81;\n                break;\n              }\n              _context4.next = 86;\n              break;\n            case 81:\n              // Transform IPFS link to gateway\n              ipfs = imageUrl.match(matcherIpfs);\n              if (!(ipfs == null)) {\n                _context4.next = 84;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 84:\n              linkage.push({\n                type: \"url-ipfs\",\n                content: imageUrl\n              });\n              imageUrl = getIpfsLink(imageUrl);\n            case 86:\n              linkage.push({\n                type: \"url\",\n                content: imageUrl\n              });\n              return _context4.abrupt(\"return\", {\n                linkage: linkage,\n                url: imageUrl\n              });\n            case 88:\n              i++;\n              _context4.next = 8;\n              break;\n            case 91:\n              _context4.next = 95;\n              break;\n            case 93:\n              _context4.prev = 93;\n              _context4.t8 = _context4[\"catch\"](1);\n            case 95:\n              return _context4.abrupt(\"return\", null);\n            case 96:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[1, 93]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hexBytes, ipfs, length, ipns, _length3, swarm, skynet, urlSafe, hash;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._fetchBytes(\"0xbc1c58d1\");\n            case 2:\n              hexBytes = _context5.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context5.next = 5;\n                break;\n              }\n              return _context5.abrupt(\"return\", null);\n            case 5:\n              // IPFS (CID: 1, Type: DAG-PB)\n              ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipfs) {\n                _context5.next = 10;\n                break;\n              }\n              length = parseInt(ipfs[3], 16);\n              if (!(ipfs[4].length === length * 2)) {\n                _context5.next = 10;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n            case 10:\n              // IPNS (CID: 1, Type: libp2p-key)\n              ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipns) {\n                _context5.next = 15;\n                break;\n              }\n              _length3 = parseInt(ipns[3], 16);\n              if (!(ipns[4].length === _length3 * 2)) {\n                _context5.next = 15;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]));\n            case 15:\n              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n              swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n              if (!swarm) {\n                _context5.next = 19;\n                break;\n              }\n              if (!(swarm[1].length === 32 * 2)) {\n                _context5.next = 19;\n                break;\n              }\n              return _context5.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n            case 19:\n              skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n              if (!skynet) {\n                _context5.next = 25;\n                break;\n              }\n              if (!(skynet[1].length === 34 * 2)) {\n                _context5.next = 25;\n                break;\n              }\n              // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n              urlSafe = {\n                \"=\": \"\",\n                \"+\": \"-\",\n                \"/\": \"_\"\n              };\n              hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, function (a) {\n                return urlSafe[a];\n              });\n              return _context5.abrupt(\"return\", \"sia:/\\/\" + hash);\n            case 25:\n              return _context5.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n              }));\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              // The key encoded as parameter to fetchBytes\n              keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n              // offset 64, with the length at offset 64 and data starting at offset 96\n              keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n              // Pad to word-size (32 bytes)\n              if (keyBytes.length % 32 !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n              }\n              _context6.next = 5;\n              return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            case 5:\n              hexBytes = _context6.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context6.next = 8;\n                break;\n              }\n              return _context6.abrupt(\"return\", null);\n            case 8:\n              return _context6.abrupt(\"return\", toUtf8String(hexBytes));\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n  var _super = _createSuper(BaseProvider);\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this2;\n    _classCallCheck(this, BaseProvider);\n    _this2 = _super.call(this);\n    // Events being listened to\n    _this2._events = [];\n    _this2._emitted = {\n      block: -2\n    };\n    _this2.disableCcipRead = false;\n    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(_assertThisInitialized(_this2), \"anyNetwork\", network === \"any\");\n    if (_this2.anyNetwork) {\n      network = _this2.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      _this2._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(function (error) {});\n      // Trigger initial network setting (async)\n      _this2._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this2), \"_network\", knownNetwork);\n        _this2.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    _this2._maxInternalBlockNumber = -1024;\n    _this2._lastBlockNumber = -2;\n    _this2._maxFilterBlockRange = 10;\n    _this2._pollingInterval = 4000;\n    _this2._fastQueryDate = 0;\n    return _this2;\n  }\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this._network == null)) {\n                _context7.next = 17;\n                break;\n              }\n              network = null;\n              if (!this._networkPromise) {\n                _context7.next = 11;\n                break;\n              }\n              _context7.prev = 3;\n              _context7.next = 6;\n              return this._networkPromise;\n            case 6:\n              network = _context7.sent;\n              _context7.next = 11;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](3);\n            case 11:\n              if (!(network == null)) {\n                _context7.next = 15;\n                break;\n              }\n              _context7.next = 14;\n              return this.detectNetwork();\n            case 14:\n              network = _context7.sent;\n            case 15:\n              // This should never happen; every Provider sub-class should have\n              // suggested a network by here (or have thrown).\n              if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n              }\n              // Possible this call stacked so do not call defineReadOnly again\n              if (this._network == null) {\n                if (this.anyNetwork) {\n                  this._network = network;\n                } else {\n                  defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n              }\n            case 17:\n              return _context7.abrupt(\"return\", this._network);\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this3 = this;\n      return poll(function () {\n        return _this3._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n          throw error;\n        });\n      });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n  }, {\n    key: \"ccipReadFetch\",\n    value: function ccipReadFetch(tx, calldata, urls) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(this.disableCcipRead || urls.length === 0)) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\", null);\n            case 2:\n              sender = tx.to.toLowerCase();\n              data = calldata.toLowerCase();\n              errorMessages = [];\n              i = 0;\n            case 6:\n              if (!(i < urls.length)) {\n                _context8.next = 22;\n                break;\n              }\n              url = urls[i]; // URL expansion\n              href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n              json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                data: data,\n                sender: sender\n              });\n              _context8.next = 12;\n              return fetchJson({\n                url: href,\n                errorPassThrough: true\n              }, json, function (value, response) {\n                value.status = response.statusCode;\n                return value;\n              });\n            case 12:\n              result = _context8.sent;\n              if (!result.data) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"return\", result.data);\n            case 15:\n              errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n              if (!(result.status >= 400 && result.status < 500)) {\n                _context8.next = 18;\n                break;\n              }\n              return _context8.abrupt(\"return\", logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), Logger.errors.SERVER_ERROR, {\n                url: url,\n                errorMessage: errorMessage\n              }));\n            case 18:\n              // 5xx indicates server issue; try the next url\n              errorMessages.push(errorMessage);\n            case 19:\n              i++;\n              _context8.next = 6;\n              break;\n            case 22:\n              return _context8.abrupt(\"return\", logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                return JSON.stringify(m);\n              }).join(\", \")), Logger.errors.SERVER_ERROR, {\n                urls: urls,\n                errorMessages: errorMessages\n              }));\n            case 23:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._ready();\n            case 2:\n              if (!(maxAge > 0)) {\n                _context9.next = 20;\n                break;\n              }\n            case 3:\n              if (!this._internalBlockNumber) {\n                _context9.next = 20;\n                break;\n              }\n              // ...\"remember\" which fetch we started with\n              internalBlockNumber = this._internalBlockNumber;\n              _context9.prev = 5;\n              _context9.next = 8;\n              return internalBlockNumber;\n            case 8:\n              result = _context9.sent;\n              if (!(getTime() - result.respTime <= maxAge)) {\n                _context9.next = 11;\n                break;\n              }\n              return _context9.abrupt(\"return\", result.blockNumber);\n            case 11:\n              return _context9.abrupt(\"break\", 20);\n            case 14:\n              _context9.prev = 14;\n              _context9.t0 = _context9[\"catch\"](5);\n              if (!(this._internalBlockNumber === internalBlockNumber)) {\n                _context9.next = 18;\n                break;\n              }\n              return _context9.abrupt(\"break\", 20);\n            case 18:\n              _context9.next = 3;\n              break;\n            case 20:\n              reqTime = getTime();\n              checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then(function (network) {\n                  return null;\n                }, function (error) {\n                  return error;\n                })\n              }).then(function (_ref) {\n                var blockNumber = _ref.blockNumber,\n                  networkError = _ref.networkError;\n                if (networkError) {\n                  // Unremember this bad internal block number\n                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                    _this4._internalBlockNumber = null;\n                  }\n                  throw networkError;\n                }\n                var respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < _this4._maxInternalBlockNumber) {\n                  blockNumber = _this4._maxInternalBlockNumber;\n                }\n                _this4._maxInternalBlockNumber = blockNumber;\n                _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return {\n                  blockNumber: blockNumber,\n                  reqTime: reqTime,\n                  respTime: respTime\n                };\n              });\n              this._internalBlockNumber = checkInternalBlockNumber;\n              // Swallow unhandled exceptions; if needed they are handled else where\n              checkInternalBlockNumber.catch(function (error) {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                  _this4._internalBlockNumber = null;\n                }\n              });\n              _context9.next = 26;\n              return checkInternalBlockNumber;\n            case 26:\n              return _context9.abrupt(\"return\", _context9.sent.blockNumber);\n            case 27:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n              runners = [];\n              blockNumber = null;\n              _context10.prev = 3;\n              _context10.next = 6;\n              return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            case 6:\n              blockNumber = _context10.sent;\n              _context10.next = 13;\n              break;\n            case 9:\n              _context10.prev = 9;\n              _context10.t0 = _context10[\"catch\"](3);\n              this.emit(\"error\", _context10.t0);\n              return _context10.abrupt(\"return\");\n            case 13:\n              this._setFastBlockNumber(blockNumber);\n              // Emit a poll event after we have the latest (fast) block number\n              this.emit(\"poll\", pollId, blockNumber);\n              // If the block has not changed, meh.\n              if (!(blockNumber === this._lastBlockNumber)) {\n                _context10.next = 18;\n                break;\n              }\n              this.emit(\"didPoll\", pollId);\n              return _context10.abrupt(\"return\");\n            case 18:\n              // First polling cycle, trigger a \"block\" events\n              if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n              }\n              if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                  blockNumber: blockNumber,\n                  event: \"blockSkew\",\n                  previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n              } else {\n                // Notify all listener for each block that has passed\n                for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                  this.emit(\"block\", i);\n                }\n              }\n              // The emitted block was updated, check for obsolete events\n              if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach(function (key) {\n                  // The block event does not expire\n                  if (key === \"block\") {\n                    return;\n                  }\n                  // The block we were at when we emitted this event\n                  var eventBlockNumber = _this5._emitted[key];\n                  // We cannot garbage collect pending transactions or blocks here\n                  // They should be garbage collected by the Provider when setting\n                  // \"pending\" events\n                  if (eventBlockNumber === \"pending\") {\n                    return;\n                  }\n                  // Evict any transaction hashes or block hashes over 12 blocks\n                  // old, since they should not return null anyways\n                  if (blockNumber - eventBlockNumber > 12) {\n                    delete _this5._emitted[key];\n                  }\n                });\n              }\n              // First polling cycle\n              if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n              }\n              // Find all transaction hashes we are waiting on\n              this._events.forEach(function (event) {\n                switch (event.type) {\n                  case \"tx\":\n                    {\n                      var hash = event.hash;\n                      var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {\n                        if (!receipt || receipt.blockNumber == null) {\n                          return null;\n                        }\n                        _this5._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        _this5.emit(hash, receipt);\n                        return null;\n                      }).catch(function (error) {\n                        _this5.emit(\"error\", error);\n                      });\n                      runners.push(runner);\n                      break;\n                    }\n                  case \"filter\":\n                    {\n                      // We only allow a single getLogs to be in-flight at a time\n                      if (!event._inflight) {\n                        event._inflight = true;\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                          event._lastBlockNumber = blockNumber - 1;\n                        }\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        var filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        var minFromBlock = filter.toBlock - _this5._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) {\n                          filter.fromBlock = minFromBlock;\n                        }\n                        if (filter.fromBlock < 0) {\n                          filter.fromBlock = 0;\n                        }\n                        var _runner = _this5.getLogs(filter).then(function (logs) {\n                          // Allow the next getLogs\n                          event._inflight = false;\n                          if (logs.length === 0) {\n                            return;\n                          }\n                          logs.forEach(function (log) {\n                            // Only when we get an event for a given block number\n                            // can we trust the events are indexed\n                            if (log.blockNumber > event._lastBlockNumber) {\n                              event._lastBlockNumber = log.blockNumber;\n                            }\n                            // Make sure we stall requests to fetch blocks and txs\n                            _this5._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            _this5._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            _this5.emit(filter, log);\n                          });\n                        }).catch(function (error) {\n                          _this5.emit(\"error\", error);\n                          // Allow another getLogs (the range was not updated)\n                          event._inflight = false;\n                        });\n                        runners.push(_runner);\n                      }\n                      break;\n                    }\n                }\n              });\n              this._lastBlockNumber = blockNumber;\n              // Once all events for this loop have been processed, emit \"didPoll\"\n              Promise.all(runners).then(function () {\n                _this5.emit(\"didPoll\", pollId);\n              }).catch(function (error) {\n                _this5.emit(\"error\", error);\n              });\n              return _context10.abrupt(\"return\");\n            case 26:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[3, 9]]);\n      }));\n    }\n    // Deprecated; do not use this\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n              }));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this._ready();\n            case 2:\n              network = _context12.sent;\n              _context12.next = 5;\n              return this.detectNetwork();\n            case 5:\n              currentNetwork = _context12.sent;\n              if (!(network.chainId !== currentNetwork.chainId)) {\n                _context12.next = 23;\n                break;\n              }\n              if (!this.anyNetwork) {\n                _context12.next = 20;\n                break;\n              }\n              this._network = currentNetwork;\n              // Reset all internal block number guards and caches\n              this._lastBlockNumber = -2;\n              this._fastBlockNumber = null;\n              this._fastBlockNumberPromise = null;\n              this._fastQueryDate = 0;\n              this._emitted.block = -2;\n              this._maxInternalBlockNumber = -1024;\n              this._internalBlockNumber = null;\n              // The \"network\" event MUST happen before this method resolves\n              // so any events have a chance to unregister, so we stall an\n              // additional event loop before returning from /this/ call\n              this.emit(\"network\", currentNetwork, network);\n              _context12.next = 19;\n              return stall(0);\n            case 19:\n              return _context12.abrupt(\"return\", this._network);\n            case 20:\n              error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n              });\n              this.emit(\"error\", error);\n              throw error;\n            case 23:\n              return _context12.abrupt(\"return\", network);\n            case 24:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this6 = this;\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this6._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this7 = this;\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this.pollingInterval);\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this7.poll();\n            // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n            _this7._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this7._poller) {\n                _this7.poll();\n              }\n              // Clear out the bootstrap so we can do another\n              _this7._bootstrapPoll = null;\n            }, _this7.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this8 = this;\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n      this._pollingInterval = value;\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this8.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this9 = this;\n      var now = getTime();\n      // Stale block number, request a newer value\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {\n            _this9._fastBlockNumber = blockNumber;\n          }\n          return _this9._fastBlockNumber;\n        });\n      }\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      }\n      // Update the time we updated the blocknumber\n      this._fastQueryDate = getTime();\n      // Newer block number, use  it\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this10 = this;\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getTransactionReceipt(transactionHash);\n            case 2:\n              receipt = _context16.sent;\n              if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                _context16.next = 5;\n                break;\n              }\n              return _context16.abrupt(\"return\", receipt);\n            case 5:\n              return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var cancelFuncs = [];\n                var done = false;\n                var alreadyDone = function alreadyDone() {\n                  if (done) {\n                    return true;\n                  }\n                  done = true;\n                  cancelFuncs.forEach(function (func) {\n                    func();\n                  });\n                  return false;\n                };\n                var minedHandler = function minedHandler(receipt) {\n                  if (receipt.confirmations < confirmations) {\n                    return;\n                  }\n                  if (alreadyDone()) {\n                    return;\n                  }\n                  resolve(receipt);\n                };\n                _this10.on(transactionHash, minedHandler);\n                cancelFuncs.push(function () {\n                  _this10.removeListener(transactionHash, minedHandler);\n                });\n                if (replaceable) {\n                  var lastBlockNumber = replaceable.startBlock;\n                  var scannedBlock = null;\n                  var replaceHandler = function replaceHandler(blockNumber) {\n                    return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                      var _this11 = this;\n                      return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                        while (1) switch (_context15.prev = _context15.next) {\n                          case 0:\n                            if (!done) {\n                              _context15.next = 2;\n                              break;\n                            }\n                            return _context15.abrupt(\"return\");\n                          case 2:\n                            _context15.next = 4;\n                            return stall(1000);\n                          case 4:\n                            this.getTransactionCount(replaceable.from).then(function (nonce) {\n                              return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                                var mined, block, ti, tx, _receipt, reason;\n                                return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                                  while (1) switch (_context14.prev = _context14.next) {\n                                    case 0:\n                                      if (!done) {\n                                        _context14.next = 2;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 2:\n                                      if (!(nonce <= replaceable.nonce)) {\n                                        _context14.next = 6;\n                                        break;\n                                      }\n                                      lastBlockNumber = blockNumber;\n                                      _context14.next = 41;\n                                      break;\n                                    case 6:\n                                      _context14.next = 8;\n                                      return this.getTransaction(transactionHash);\n                                    case 8:\n                                      mined = _context14.sent;\n                                      if (!(mined && mined.blockNumber != null)) {\n                                        _context14.next = 11;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 11:\n                                      // First time scanning. We start a little earlier for some\n                                      // wiggle room here to handle the eventually consistent nature\n                                      // of blockchain (e.g. the getTransactionCount was for a\n                                      // different block)\n                                      if (scannedBlock == null) {\n                                        scannedBlock = lastBlockNumber - 3;\n                                        if (scannedBlock < replaceable.startBlock) {\n                                          scannedBlock = replaceable.startBlock;\n                                        }\n                                      }\n                                    case 12:\n                                      if (!(scannedBlock <= blockNumber)) {\n                                        _context14.next = 41;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context14.next = 15;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 15:\n                                      _context14.next = 17;\n                                      return this.getBlockWithTransactions(scannedBlock);\n                                    case 17:\n                                      block = _context14.sent;\n                                      ti = 0;\n                                    case 19:\n                                      if (!(ti < block.transactions.length)) {\n                                        _context14.next = 38;\n                                        break;\n                                      }\n                                      tx = block.transactions[ti]; // Successfully mined!\n                                      if (!(tx.hash === transactionHash)) {\n                                        _context14.next = 23;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 23:\n                                      if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                        _context14.next = 35;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context14.next = 26;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 26:\n                                      _context14.next = 28;\n                                      return this.waitForTransaction(tx.hash, confirmations);\n                                    case 28:\n                                      _receipt = _context14.sent;\n                                      if (!alreadyDone()) {\n                                        _context14.next = 31;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 31:\n                                      // The reason we were replaced\n                                      reason = \"replaced\";\n                                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                        reason = \"repriced\";\n                                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                        reason = \"cancelled\";\n                                      }\n                                      // Explain why we were replaced\n                                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                        reason: reason,\n                                        replacement: this._wrapTransaction(tx),\n                                        hash: transactionHash,\n                                        receipt: _receipt\n                                      }));\n                                      return _context14.abrupt(\"return\");\n                                    case 35:\n                                      ti++;\n                                      _context14.next = 19;\n                                      break;\n                                    case 38:\n                                      scannedBlock++;\n                                      _context14.next = 12;\n                                      break;\n                                    case 41:\n                                      if (!done) {\n                                        _context14.next = 43;\n                                        break;\n                                      }\n                                      return _context14.abrupt(\"return\");\n                                    case 43:\n                                      this.once(\"block\", replaceHandler);\n                                    case 44:\n                                    case \"end\":\n                                      return _context14.stop();\n                                  }\n                                }, _callee14, this);\n                              }));\n                            }, function (error) {\n                              if (done) {\n                                return;\n                              }\n                              _this11.once(\"block\", replaceHandler);\n                            });\n                          case 5:\n                          case \"end\":\n                            return _context15.stop();\n                        }\n                      }, _callee15, this);\n                    }));\n                  };\n                  if (done) {\n                    return;\n                  }\n                  _this10.once(\"block\", replaceHandler);\n                  cancelFuncs.push(function () {\n                    _this10.removeListener(\"block\", replaceHandler);\n                  });\n                }\n                if (typeof timeout === \"number\" && timeout > 0) {\n                  var timer = setTimeout(function () {\n                    if (alreadyDone()) {\n                      return;\n                    }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                      timeout: timeout\n                    }));\n                  }, timeout);\n                  if (timer.unref) {\n                    timer.unref();\n                  }\n                  cancelFuncs.push(function () {\n                    clearTimeout(timer);\n                  });\n                }\n              }));\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              return _context17.abrupt(\"return\", this._getInternalBlockNumber(0));\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context18.next = 4;\n              return this.perform(\"getGasPrice\", {});\n            case 4:\n              result = _context18.sent;\n              _context18.prev = 5;\n              return _context18.abrupt(\"return\", BigNumber.from(result));\n            case 9:\n              _context18.prev = 9;\n              _context18.t0 = _context18[\"catch\"](5);\n              return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result: result,\n                error: _context18.t0\n              }));\n            case 12:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context19.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context19.sent;\n              _context19.next = 7;\n              return this.perform(\"getBalance\", params);\n            case 7:\n              result = _context19.sent;\n              _context19.prev = 8;\n              return _context19.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context19.prev = 12;\n              _context19.t0 = _context19[\"catch\"](8);\n              return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params: params,\n                result: result,\n                error: _context19.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context20.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context20.sent;\n              _context20.next = 7;\n              return this.perform(\"getTransactionCount\", params);\n            case 7:\n              result = _context20.sent;\n              _context20.prev = 8;\n              return _context20.abrupt(\"return\", BigNumber.from(result).toNumber());\n            case 12:\n              _context20.prev = 12;\n              _context20.t0 = _context20[\"catch\"](8);\n              return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params: params,\n                result: result,\n                error: _context20.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context21.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context21.sent;\n              _context21.next = 7;\n              return this.perform(\"getCode\", params);\n            case 7:\n              result = _context21.sent;\n              _context21.prev = 8;\n              return _context21.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context21.prev = 12;\n              _context21.t0 = _context21[\"catch\"](8);\n              return _context21.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params: params,\n                result: result,\n                error: _context21.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context22.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then(function (p) {\n                  return hexValue(p);\n                })\n              });\n            case 4:\n              params = _context22.sent;\n              _context22.next = 7;\n              return this.perform(\"getStorageAt\", params);\n            case 7:\n              result = _context22.sent;\n              _context22.prev = 8;\n              return _context22.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context22.prev = 12;\n              _context22.t0 = _context22[\"catch\"](8);\n              return _context22.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params: params,\n                result: result,\n                error: _context22.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this, [[8, 12]]);\n      }));\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this12 = this;\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n      var result = tx;\n      // Check the hash we expect is the same as the hash the server reported\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                if (confirms == null) {\n                  confirms = 1;\n                }\n                if (timeout == null) {\n                  timeout = 0;\n                }\n                // Get the details to detect replacement\n                replacement = undefined;\n                if (confirms !== 0 && startBlock != null) {\n                  replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock: startBlock\n                  };\n                }\n                _context23.next = 6;\n                return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n              case 6:\n                receipt = _context23.sent;\n                if (!(receipt == null && confirms === 0)) {\n                  _context23.next = 9;\n                  break;\n                }\n                return _context23.abrupt(\"return\", null);\n              case 9:\n                // No longer pending, allow the polling loop to garbage collect this\n                this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                if (receipt.status === 0) {\n                  logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                  });\n                }\n                return _context23.abrupt(\"return\", receipt);\n              case 12:\n              case \"end\":\n                return _context23.stop();\n            }\n          }, _callee23, this);\n        }));\n      };\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context24.next = 4;\n              return Promise.resolve(signedTransaction).then(function (t) {\n                return hexlify(t);\n              });\n            case 4:\n              hexTx = _context24.sent;\n              tx = this.formatter.transaction(signedTransaction);\n              if (tx.confirmations == null) {\n                tx.confirmations = 0;\n              }\n              _context24.next = 9;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 9:\n              blockNumber = _context24.sent;\n              _context24.prev = 10;\n              _context24.next = 13;\n              return this.perform(\"sendTransaction\", {\n                signedTransaction: hexTx\n              });\n            case 13:\n              hash = _context24.sent;\n              return _context24.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n            case 17:\n              _context24.prev = 17;\n              _context24.t0 = _context24[\"catch\"](10);\n              _context24.t0.transaction = tx;\n              _context24.t0.transactionHash = tx.hash;\n              throw _context24.t0;\n            case 22:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var _this13 = this;\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return transaction;\n            case 2:\n              values = _context25.sent;\n              tx = {};\n              [\"from\", \"to\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? _this13._getAddress(v) : null;\n                });\n              });\n              [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? BigNumber.from(v) : null;\n                });\n              });\n              [\"type\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v != null ? v : null;\n                });\n              });\n              if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n              }\n              [\"data\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? hexlify(v) : null;\n                });\n              });\n              _context25.t0 = this.formatter;\n              _context25.next = 12;\n              return resolveProperties(tx);\n            case 12:\n              _context25.t1 = _context25.sent;\n              return _context25.abrupt(\"return\", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));\n            case 14:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var _this14 = this;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return filter;\n            case 2:\n              filter = _context26.sent;\n              result = {};\n              if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n              }\n              [\"blockHash\", \"topics\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = filter[key];\n              });\n              [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = _this14._getBlockTag(filter[key]);\n              });\n              _context26.t0 = this.formatter;\n              _context26.next = 10;\n              return resolveProperties(result);\n            case 10:\n              _context26.t1 = _context26.sent;\n              return _context26.abrupt(\"return\", _context26.t0.filter.call(_context26.t0, _context26.t1));\n            case 12:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_call\",\n    value: function _call(transaction, blockTag, attempt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                  redirects: attempt,\n                  transaction: transaction\n                });\n              }\n              txSender = transaction.to;\n              _context27.next = 4;\n              return this.perform(\"call\", {\n                transaction: transaction,\n                blockTag: blockTag\n              });\n            case 4:\n              result = _context27.sent;\n              if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4)) {\n                _context27.next = 31;\n                break;\n              }\n              _context27.prev = 6;\n              data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n              sender = hexDataSlice(data, 0, 32);\n              if (!BigNumber.from(sender).eq(txSender)) {\n                logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              // Read the URLs from the response\n              urls = [];\n              urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n              urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n              urlsData = hexDataSlice(data, urlsOffset + 32);\n              for (u = 0; u < urlsLength; u++) {\n                url = _parseString(urlsData, u * 32);\n                if (url == null) {\n                  logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n                urls.push(url);\n              }\n              // Get the CCIP calldata to forward\n              calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n              if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n              extraData = _parseBytes(data, 128);\n              _context27.next = 21;\n              return this.ccipReadFetch(transaction, calldata, urls);\n            case 21:\n              ccipResult = _context27.sent;\n              if (ccipResult == null) {\n                logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                  name: \"OffchainLookup\",\n                  signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                  transaction: transaction,\n                  data: result\n                });\n              }\n              tx = {\n                to: txSender,\n                data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n              };\n              return _context27.abrupt(\"return\", this._call(tx, blockTag, attempt + 1));\n            case 27:\n              _context27.prev = 27;\n              _context27.t0 = _context27[\"catch\"](6);\n              if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {\n                _context27.next = 31;\n                break;\n              }\n              throw _context27.t0;\n            case 31:\n              _context27.prev = 31;\n              return _context27.abrupt(\"return\", hexlify(result));\n            case 35:\n              _context27.prev = 35;\n              _context27.t1 = _context27[\"catch\"](31);\n              return _context27.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: {\n                  transaction: transaction,\n                  blockTag: blockTag\n                },\n                result: result,\n                error: _context27.t1\n              }));\n            case 38:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this, [[6, 27], [31, 35]]);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var resolved;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context28.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n              });\n            case 4:\n              resolved = _context28.sent;\n              return _context28.abrupt(\"return\", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));\n            case 6:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context29.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n              });\n            case 4:\n              params = _context29.sent;\n              _context29.next = 7;\n              return this.perform(\"estimateGas\", params);\n            case 7:\n              result = _context29.sent;\n              _context29.prev = 8;\n              return _context29.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context29.prev = 12;\n              _context29.t0 = _context29[\"catch\"](8);\n              return _context29.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params: params,\n                result: result,\n                error: _context29.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return addressOrName;\n            case 2:\n              addressOrName = _context30.sent;\n              if (typeof addressOrName !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n              }\n              _context30.next = 6;\n              return this.resolveName(addressOrName);\n            case 6:\n              address = _context30.sent;\n              if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                });\n              }\n              return _context30.abrupt(\"return\", address);\n            case 9:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this15 = this;\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context32.next = 4;\n              return blockHashOrBlockTag;\n            case 4:\n              blockHashOrBlockTag = _context32.sent;\n              // If blockTag is a number (not \"latest\", etc), this is the block number\n              blockNumber = -128;\n              params = {\n                includeTransactions: !!includeTransactions\n              };\n              if (!isHexString(blockHashOrBlockTag, 32)) {\n                _context32.next = 11;\n                break;\n              }\n              params.blockHash = blockHashOrBlockTag;\n              _context32.next = 21;\n              break;\n            case 11:\n              _context32.prev = 11;\n              _context32.next = 14;\n              return this._getBlockTag(blockHashOrBlockTag);\n            case 14:\n              params.blockTag = _context32.sent;\n              if (isHexString(params.blockTag)) {\n                blockNumber = parseInt(params.blockTag.substring(2), 16);\n              }\n              _context32.next = 21;\n              break;\n            case 18:\n              _context32.prev = 18;\n              _context32.t0 = _context32[\"catch\"](11);\n              logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            case 21:\n              return _context32.abrupt(\"return\", poll(function () {\n                return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                  var _this16 = this;\n                  var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n                  return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                    while (1) switch (_context31.prev = _context31.next) {\n                      case 0:\n                        _context31.next = 2;\n                        return this.perform(\"getBlock\", params);\n                      case 2:\n                        block = _context31.sent;\n                        if (!(block == null)) {\n                          _context31.next = 11;\n                          break;\n                        }\n                        if (!(params.blockHash != null)) {\n                          _context31.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                          _context31.next = 7;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 7:\n                        if (!(params.blockTag != null)) {\n                          _context31.next = 10;\n                          break;\n                        }\n                        if (!(blockNumber > this._emitted.block)) {\n                          _context31.next = 10;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 10:\n                        return _context31.abrupt(\"return\", undefined);\n                      case 11:\n                        if (!includeTransactions) {\n                          _context31.next = 34;\n                          break;\n                        }\n                        _blockNumber = null;\n                        i = 0;\n                      case 14:\n                        if (!(i < block.transactions.length)) {\n                          _context31.next = 31;\n                          break;\n                        }\n                        tx = block.transactions[i];\n                        if (!(tx.blockNumber == null)) {\n                          _context31.next = 20;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context31.next = 28;\n                        break;\n                      case 20:\n                        if (!(tx.confirmations == null)) {\n                          _context31.next = 28;\n                          break;\n                        }\n                        if (!(_blockNumber == null)) {\n                          _context31.next = 25;\n                          break;\n                        }\n                        _context31.next = 24;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 24:\n                        _blockNumber = _context31.sent;\n                      case 25:\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = _blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 28:\n                        i++;\n                        _context31.next = 14;\n                        break;\n                      case 31:\n                        blockWithTxs = this.formatter.blockWithTransactions(block);\n                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                          return _this16._wrapTransaction(tx);\n                        });\n                        return _context31.abrupt(\"return\", blockWithTxs);\n                      case 34:\n                        return _context31.abrupt(\"return\", this.formatter.block(block));\n                      case 35:\n                      case \"end\":\n                        return _context31.stop();\n                    }\n                  }, _callee31, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 22:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _this17 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context34.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context34.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context34.abrupt(\"return\", poll(function () {\n                return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                  var result, tx, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                    while (1) switch (_context33.prev = _context33.next) {\n                      case 0:\n                        _context33.next = 2;\n                        return this.perform(\"getTransaction\", params);\n                      case 2:\n                        result = _context33.sent;\n                        if (!(result == null)) {\n                          _context33.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context33.next = 6;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\", null);\n                      case 6:\n                        return _context33.abrupt(\"return\", undefined);\n                      case 7:\n                        tx = this.formatter.transactionResponse(result);\n                        if (!(tx.blockNumber == null)) {\n                          _context33.next = 12;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context33.next = 19;\n                        break;\n                      case 12:\n                        if (!(tx.confirmations == null)) {\n                          _context33.next = 19;\n                          break;\n                        }\n                        _context33.next = 15;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 15:\n                        blockNumber = _context33.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 19:\n                        return _context33.abrupt(\"return\", this._wrapTransaction(tx));\n                      case 20:\n                      case \"end\":\n                        return _context33.stop();\n                    }\n                  }, _callee33, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _this18 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context36.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context36.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context36.abrupt(\"return\", poll(function () {\n                return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                  var result, receipt, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                    while (1) switch (_context35.prev = _context35.next) {\n                      case 0:\n                        _context35.next = 2;\n                        return this.perform(\"getTransactionReceipt\", params);\n                      case 2:\n                        result = _context35.sent;\n                        if (!(result == null)) {\n                          _context35.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context35.next = 6;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\", null);\n                      case 6:\n                        return _context35.abrupt(\"return\", undefined);\n                      case 7:\n                        if (!(result.blockHash == null)) {\n                          _context35.next = 9;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\", undefined);\n                      case 9:\n                        receipt = this.formatter.receipt(result);\n                        if (!(receipt.blockNumber == null)) {\n                          _context35.next = 14;\n                          break;\n                        }\n                        receipt.confirmations = 0;\n                        _context35.next = 21;\n                        break;\n                      case 14:\n                        if (!(receipt.confirmations == null)) {\n                          _context35.next = 21;\n                          break;\n                        }\n                        _context35.next = 17;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 17:\n                        blockNumber = _context35.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - receipt.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        receipt.confirmations = confirmations;\n                      case 21:\n                        return _context35.abrupt(\"return\", receipt);\n                      case 22:\n                      case \"end\":\n                        return _context35.stop();\n                    }\n                  }, _callee35, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context37.next = 4;\n              return resolveProperties({\n                filter: this._getFilter(filter)\n              });\n            case 4:\n              params = _context37.sent;\n              _context37.next = 7;\n              return this.perform(\"getLogs\", params);\n            case 7:\n              logs = _context37.sent;\n              logs.forEach(function (log) {\n                if (log.removed == null) {\n                  log.removed = false;\n                }\n              });\n              return _context37.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n            case 10:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return this.getNetwork();\n            case 2:\n              return _context38.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n            case 3:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return blockTag;\n            case 2:\n              blockTag = _context39.sent;\n              if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                _context39.next = 11;\n                break;\n              }\n              if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n              }\n              _context39.next = 7;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 7:\n              blockNumber = _context39.sent;\n              blockNumber += blockTag;\n              if (blockNumber < 0) {\n                blockNumber = 0;\n              }\n              return _context39.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n            case 11:\n              return _context39.abrupt(\"return\", this.formatter.blockTag(blockTag));\n            case 12:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              currentName = name;\n            case 1:\n              if (!true) {\n                _context40.next = 22;\n                break;\n              }\n              if (!(currentName === \"\" || currentName === \".\")) {\n                _context40.next = 4;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 4:\n              if (!(name !== \"eth\" && currentName === \"eth\")) {\n                _context40.next = 6;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 6:\n              _context40.next = 8;\n              return this._getResolver(currentName, \"getResolver\");\n            case 8:\n              addr = _context40.sent;\n              if (!(addr != null)) {\n                _context40.next = 19;\n                break;\n              }\n              resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n              _context40.t0 = currentName !== name;\n              if (!_context40.t0) {\n                _context40.next = 16;\n                break;\n              }\n              _context40.next = 15;\n              return resolver.supportsWildcard();\n            case 15:\n              _context40.t0 = !_context40.sent;\n            case 16:\n              if (!_context40.t0) {\n                _context40.next = 18;\n                break;\n              }\n              return _context40.abrupt(\"return\", null);\n            case 18:\n              return _context40.abrupt(\"return\", resolver);\n            case 19:\n              // Get the parent node\n              currentName = currentName.split(\".\").slice(1).join(\".\");\n              _context40.next = 1;\n              break;\n            case 22:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name, operation) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var network, addrData;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              if (operation == null) {\n                operation = \"ENS\";\n              }\n              _context41.next = 3;\n              return this.getNetwork();\n            case 3:\n              network = _context41.sent;\n              // No ENS...\n              if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: operation,\n                  network: network.name\n                });\n              }\n              _context41.prev = 5;\n              _context41.next = 8;\n              return this.call({\n                to: network.ensAddress,\n                data: \"0x0178b8bf\" + namehash(name).substring(2)\n              });\n            case 8:\n              addrData = _context41.sent;\n              return _context41.abrupt(\"return\", this.formatter.callAddress(addrData));\n            case 12:\n              _context41.prev = 12;\n              _context41.t0 = _context41[\"catch\"](5);\n            case 14:\n              return _context41.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41, this, [[5, 12]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return name;\n            case 2:\n              name = _context42.sent;\n              _context42.prev = 3;\n              return _context42.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n            case 7:\n              _context42.prev = 7;\n              _context42.t0 = _context42[\"catch\"](3);\n              if (!isHexString(name)) {\n                _context42.next = 11;\n                break;\n              }\n              throw _context42.t0;\n            case 11:\n              if (typeof name !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n              }\n              // Get the addr from the resolver\n              _context42.next = 14;\n              return this.getResolver(name);\n            case 14:\n              resolver = _context42.sent;\n              if (resolver) {\n                _context42.next = 17;\n                break;\n              }\n              return _context42.abrupt(\"return\", null);\n            case 17:\n              _context42.next = 19;\n              return resolver.getAddress();\n            case 19:\n              return _context42.abrupt(\"return\", _context42.sent);\n            case 20:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var node, resolverAddr, name, addr;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return address;\n            case 2:\n              address = _context43.sent;\n              address = this.formatter.address(address);\n              node = address.substring(2).toLowerCase() + \".addr.reverse\";\n              _context43.next = 7;\n              return this._getResolver(node, \"lookupAddress\");\n            case 7:\n              resolverAddr = _context43.sent;\n              if (!(resolverAddr == null)) {\n                _context43.next = 10;\n                break;\n              }\n              return _context43.abrupt(\"return\", null);\n            case 10:\n              _context43.t0 = _parseString;\n              _context43.next = 13;\n              return this.call({\n                to: resolverAddr,\n                data: \"0x691f3431\" + namehash(node).substring(2)\n              });\n            case 13:\n              _context43.t1 = _context43.sent;\n              name = (0, _context43.t0)(_context43.t1, 0);\n              _context43.next = 17;\n              return this.resolveName(name);\n            case 17:\n              addr = _context43.sent;\n              if (!(addr != address)) {\n                _context43.next = 20;\n                break;\n              }\n              return _context43.abrupt(\"return\", null);\n            case 20:\n              return _context43.abrupt(\"return\", name);\n            case 21:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var resolver, address, node, resolverAddress, _avatar, name, avatar;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              resolver = null;\n              if (!isHexString(nameOrAddress)) {\n                _context44.next = 40;\n                break;\n              }\n              // Address; reverse lookup\n              address = this.formatter.address(nameOrAddress);\n              node = address.substring(2).toLowerCase() + \".addr.reverse\";\n              _context44.next = 6;\n              return this._getResolver(node, \"getAvatar\");\n            case 6:\n              resolverAddress = _context44.sent;\n              if (resolverAddress) {\n                _context44.next = 9;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 9:\n              // Try resolving the avatar against the addr.reverse resolver\n              resolver = new Resolver(this, resolverAddress, node);\n              _context44.prev = 10;\n              _context44.next = 13;\n              return resolver.getAvatar();\n            case 13:\n              _avatar = _context44.sent;\n              if (!_avatar) {\n                _context44.next = 16;\n                break;\n              }\n              return _context44.abrupt(\"return\", _avatar.url);\n            case 16:\n              _context44.next = 22;\n              break;\n            case 18:\n              _context44.prev = 18;\n              _context44.t0 = _context44[\"catch\"](10);\n              if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {\n                _context44.next = 22;\n                break;\n              }\n              throw _context44.t0;\n            case 22:\n              _context44.prev = 22;\n              _context44.t1 = _parseString;\n              _context44.next = 26;\n              return this.call({\n                to: resolverAddress,\n                data: \"0x691f3431\" + namehash(node).substring(2)\n              });\n            case 26:\n              _context44.t2 = _context44.sent;\n              name = (0, _context44.t1)(_context44.t2, 0);\n              _context44.next = 30;\n              return this.getResolver(name);\n            case 30:\n              resolver = _context44.sent;\n              _context44.next = 38;\n              break;\n            case 33:\n              _context44.prev = 33;\n              _context44.t3 = _context44[\"catch\"](22);\n              if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {\n                _context44.next = 37;\n                break;\n              }\n              throw _context44.t3;\n            case 37:\n              return _context44.abrupt(\"return\", null);\n            case 38:\n              _context44.next = 45;\n              break;\n            case 40:\n              _context44.next = 42;\n              return this.getResolver(nameOrAddress);\n            case 42:\n              resolver = _context44.sent;\n              if (resolver) {\n                _context44.next = 45;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 45:\n              _context44.next = 47;\n              return resolver.getAvatar();\n            case 47:\n              avatar = _context44.sent;\n              if (!(avatar == null)) {\n                _context44.next = 50;\n                break;\n              }\n              return _context44.abrupt(\"return\", null);\n            case 50:\n              return _context44.abrupt(\"return\", avatar.url);\n            case 51:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee44, this, [[10, 18], [22, 33]]);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this19 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        setTimeout(function () {\n          event.listener.apply(_this19, args);\n        }, 0);\n        result = true;\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this20 = this;\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n        if (found) {\n          return true;\n        }\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this21 = this;\n      var stopped = [];\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n          stopped.push(event);\n          return false;\n        });\n      }\n      stopped.forEach(function (event) {\n        _this21._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n      return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n  return BaseProvider;\n}(Provider);","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}