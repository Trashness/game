{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _useEthers = useEthers(),\n    library = _useEthers.library;\n  var providers = useReadonlyNetworks();\n  var _blockNumber = useBlockNumber();\n  var blockNumbers = useBlockNumbers();\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    gasPrice = _useState2[0],\n    setGasPrice = _useState2[1];\n  var chainId = queryParams.chainId;\n  var _useMemo = useMemo(function () {\n      return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n    }, [providers, library, blockNumbers, _blockNumber]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    provider = _useMemo2[0],\n    blockNumber = _useMemo2[1];\n  function updateGasPrice() {\n    return _updateGasPrice.apply(this, arguments);\n  }\n  function _updateGasPrice() {\n    _updateGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setGasPrice;\n            _context.next = 3;\n            return provider === null || provider === void 0 ? void 0 : provider.getGasPrice();\n          case 3:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _updateGasPrice.apply(this, arguments);\n  }\n  useEffect(function () {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"sources":["../../../../src/hooks/useGasPrice.ts"],"names":[],"mappings":";;;AACA,SAAS,SAAS,EAAE,OAAO,EAAE,QAAQ,QAAQ,OAAO;AACpD,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,mBAAmB,QAAQ,uCAAuC;AAC3E,SAAS,cAAc,EAAE,eAAe,QAAQ,UAAU;AAG1D;;;;AAIG;AACH,OAAM,SAAU,WAAW,CAAA,EAA8B;EAAA,IAA7B,WAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,CAAA,CAAE;EACvD,IAAA,UAAA,GAAoB,SAAS,EAAE;IAAvB,OAAO,GAAA,UAAA,CAAP,OAAO;EACf,IAAM,SAAS,GAAG,mBAAmB,EAAE;EACvC,IAAM,YAAY,GAAG,cAAc,EAAE;EACrC,IAAM,YAAY,GAAG,eAAe,EAAE;EAEtC,IAAA,SAAA,GAAgC,QAAQ,EAAyB;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAA1D,QAAQ,GAAA,UAAA;IAAE,WAAW,GAAA,UAAA;EAE5B,IAAQ,OAAO,GAAK,WAAW,CAAvB,OAAO;EAEf,IAAA,QAAA,GAAgC,OAAO,CACrC;MAAA,OAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC;IAAA,CAAC,EACvF,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC,CACjD;IAAA,SAAA,GAAA,cAAA,CAAA,QAAA;IAHM,QAAQ,GAAA,SAAA;IAAE,WAAW,GAAA,SAAA;EAG3B,SAEc,cAAc,CAAA;IAAA,OAAA,eAAA,CAAA,KAAA,OAAA,SAAA;EAAA;EAAA,SAAA,gBAAA;IAAA,eAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAA7B,SAAA,QAAA;MAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;QAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA;YAAA,QAAA,CAAA,EAAA,GACE,WAAW;YAAA,QAAA,CAAA,IAAA;YAAA,OAAO,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,EAAE;UAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;YAAA,IAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA;UAAA;UAAA;YAAA,OAAA,QAAA,CAAA,IAAA;QAAA;MAAA,GAAA,OAAA;IAAA,CAC1C;IAAA,OAAA,eAAA,CAAA,KAAA,OAAA,SAAA;EAAA;EAED,SAAS,CAAC,YAAK;IACb,KAAK,cAAc,EAAE;EACvB,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;EAE3B,OAAO,QAAQ;AACjB","sourceRoot":"","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [gasPrice, setGasPrice] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber]);\n    async function updateGasPrice() {\n        setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n    }\n    useEffect(() => {\n        void updateGasPrice();\n    }, [provider, blockNumber]);\n    return gasPrice;\n}\n//# sourceMappingURL=useGasPrice.js.map"]},"metadata":{},"sourceType":"module"}