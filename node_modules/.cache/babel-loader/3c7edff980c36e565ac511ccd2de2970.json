{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.esm.js';\nimport { useQueryClient } from './QueryClientProvider.esm.js';\nfunction useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n    _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n    filters = _parseFilterArgs2[0],\n    _parseFilterArgs2$ = _parseFilterArgs2[1],\n    options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}\nexport { useIsFetching };","map":{"version":3,"sources":["../../src/useIsFetching.ts"],"names":[],"mappings":";;;;;;;AAiBO,SAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAKL,IAAA,gBAAA,GAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA;IAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA;IAAA,OAAA,GAAA,iBAAA;IAAA,kBAAA,GAAA,iBAAA;IAAA,OAAA,GAAA,kBAAA,cAAA,CAAA,CAAA,GAAA,kBAAA;;;EACmC,CAAA,CAAA;EACnC,IAAA,UAAA,GAAA,WAAA,CAAA,aAAA,EAAA;EAEA,OAAA,oBAAA,CAAA,KAAA,CAAA,WAAA,CAAA,UAAA,aAAA;IAAA,OAAA,UAAA,CAAA,SAAA,CAAA,aAAA,CAAA,UAAA,CAAA,aAAA,CAAA,CAAA;EAAA,GAAA,CAAA,UAAA,CAAA,CAAA,EAAA;IAAA,OAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA;EAAA,GAAA;IAAA,OAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA;EAAA,EAAA;AASD","sourcesContent":["'use client'\nimport * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}