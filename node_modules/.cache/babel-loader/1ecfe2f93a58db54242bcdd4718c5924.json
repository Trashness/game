{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'ADD_CALLS') {\n    return [].concat(_toConsumableArray(state), _toConsumableArray(action.calls.map(function (call) {\n      return Object.assign(Object.assign({}, call), {\n        address: call.address.toLowerCase()\n      });\n    })));\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(function (call) {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n      var blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    var finalState = state;\n    var _iterator = _createForOfIteratorHelper(action.calls),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var call = _step.value;\n        var index = finalState.findIndex(function (x) {\n          return x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data;\n        });\n        if (index !== -1) {\n          finalState = finalState.filter(function (_, i) {\n            return i !== index;\n          });\n        }\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return finalState;\n  }\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/callsReducer.ts"],"names":[],"mappings":";;AAmEA;;AAEG;AACH,OAAM,SAAU,YAAY,CAAA,EAAsC;EAAA,IAArC,KAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAmB,EAAE;EAAA,IAAE,MAAc,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;EAChE,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE;IAC/B,UAAA,MAAA,CAAA,kBAAA,CAAW,KAAK,GAAA,kBAAA,CAAK,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;MAAA,OAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAM,IAAI,CAAA,EAAA;QAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;MAAE,CAAA,CAAA;IAAA,CAAG,CAAC;GACpG,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE;IACzC,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAI;MACxB,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC1E,OAAO,IAAI;MACZ;MACD,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW;MACtC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAY,IAAI,CAAA,EAAA;QAAE,sBAAsB,EAAE;MAAW,CAAA,CAAA;IACvD,CAAC,CAAC;GACH,MAAM;IACL,IAAI,UAAU,GAAG,KAAK;IAAA,IAAA,SAAA,GAAA,0BAAA,CACH,MAAM,CAAC,KAAK;MAAA,KAAA;IAAA;MAAA,IAAA,KAAA,YAAA,MAAA,EAAE;QAAA,IAAtB,IAAI,GAAA,KAAA,CAAA,KAAA;QACb,IAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAChC,UAAC,CAAC;UAAA,OAAK,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;QAAA,EACtF;QACD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;UAChB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;YAAA,OAAK,CAAC,KAAK,KAAK;UAAA,EAAC;QACtD;OACF;MAPD,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA;QAAA,KAAA;MAAA;IAOC,SAAA,GAAA;MAAA,SAAA,CAAA,CAAA,CAAA,GAAA;IAAA;MAAA,SAAA,CAAA,CAAA;IAAA;IACD,OAAO,UAAU;EAClB;AACH","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state = [], action) {\n    if (action.type === 'ADD_CALLS') {\n        return [...state, ...action.calls.map((call) => (Object.assign(Object.assign({}, call), { address: call.address.toLowerCase() })))];\n    }\n    else if (action.type === 'UPDATE_CALLS') {\n        return state.map((call) => {\n            if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n                return call;\n            }\n            const blockNumber = action.blockNumber;\n            return Object.assign(Object.assign({}, call), { lastUpdatedBlockNumber: blockNumber });\n        });\n    }\n    else {\n        let finalState = state;\n        for (const call of action.calls) {\n            const index = finalState.findIndex((x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n            if (index !== -1) {\n                finalState = finalState.filter((_, i) => i !== index);\n            }\n        }\n        return finalState;\n    }\n}\n//# sourceMappingURL=callsReducer.js.map"]},"metadata":{},"sourceType":"module"}