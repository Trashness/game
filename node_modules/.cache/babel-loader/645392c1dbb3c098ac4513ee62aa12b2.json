{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport var ConnectorController = /*#__PURE__*/function () {\n  function ConnectorController(connector) {\n    var _this = this;\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n    _classCallCheck(this, ConnectorController);\n    this.connector = connector;\n    this.updated = new Event();\n    this.newBlock = new Event();\n    this.active = false;\n    this.accounts = [];\n    this.errors = [];\n    this._config = Object.assign({}, config);\n    this._connectorUnsubscribe = connector.update.on(function (_ref) {\n      var chainId = _ref.chainId,\n        accounts = _ref.accounts;\n      _this.chainId = chainId;\n      _this.accounts = accounts;\n      _this.emitUpdate();\n    });\n  }\n  _createClass(ConnectorController, [{\n    key: \"emitUpdate\",\n    value: function emitUpdate() {\n      this.updated.emit({\n        active: this.active,\n        chainId: this.chainId,\n        accounts: this.accounts,\n        blockNumber: this.blockNumber,\n        errors: this.errors\n      });\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      this._config = Object.assign(Object.assign({}, this._config), config);\n    }\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      return this.connector.provider;\n    }\n  }, {\n    key: \"activate\",\n    value: function () {\n      var _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var connectorActivator,\n          provider,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connectorActivator = _args.length > 0 && _args[0] !== undefined ? _args[0] : function (connector) {\n                return connector.activate();\n              };\n              _context.next = 3;\n              return connectorActivator(this.connector);\n            case 3:\n              provider = this.getProvider();\n              if (provider) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error('Failed to activate connector');\n            case 6:\n              this.clearSubscriptions = subscribeToProviderEvents(this.connector, function (_ref2) {\n                var chainId = _ref2.chainId,\n                  accounts = _ref2.accounts;\n                if (chainId !== undefined) {\n                  _this2.chainId = chainId;\n                }\n                if (accounts !== undefined) {\n                  _this2.accounts = accounts;\n                }\n                _this2.emitUpdate();\n              }, function () {\n                if (_this2.connector instanceof MetamaskConnector && _this2._config.noMetamaskDeactivate) {\n                  return;\n                }\n                void _this2.deactivate();\n              });\n              _context.next = 9;\n              return provider.getBlockNumber();\n            case 9:\n              this.blockNumber = _context.sent;\n              this.newBlock.emit(this.blockNumber);\n              this.removeBlockEffect = this.newBlock.addEffect(function () {\n                var listener = function listener(blockNumber) {\n                  _this2.blockNumber = blockNumber;\n                  _this2.newBlock.emit(blockNumber);\n                  _this2.emitUpdate();\n                };\n                provider.on('block', listener);\n                return function () {\n                  provider.off('block', listener);\n                };\n              });\n              this.active = true;\n              this.emitUpdate();\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function activate() {\n        return _activate.apply(this, arguments);\n      }\n      return activate;\n    }()\n  }, {\n    key: \"deactivate\",\n    value: function () {\n      var _deactivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, _b, _c;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.active = false;\n              (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n              (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n              (_c = this._connectorUnsubscribe) === null || _c === void 0 ? void 0 : _c.call(this);\n              _context2.next = 6;\n              return this.connector.deactivate();\n            case 6:\n              this.chainId = undefined;\n              this.accounts = [];\n              this.blockNumber = undefined;\n              this.errors = [];\n              this.emitUpdate();\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function deactivate() {\n        return _deactivate.apply(this, arguments);\n      }\n      return deactivate;\n    }()\n  }, {\n    key: \"switchNetwork\",\n    value: function () {\n      var _switchNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(chainId) {\n        var _a, provider, errChainNotAddedYet, chain;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              provider = this.getProvider();\n              validateArguments({\n                chainId: chainId\n              }, {\n                chainId: 'number'\n              });\n              if (provider) {\n                _context3.next = 4;\n                break;\n              }\n              throw new Error('Connector not initialized');\n            case 4:\n              _context3.prev = 4;\n              _context3.next = 7;\n              return provider.send('wallet_switchEthereumChain', [{\n                chainId: \"0x\".concat(chainId.toString(16))\n              }]);\n            case 7:\n              _context3.next = 23;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](4);\n              errChainNotAddedYet = 4902; // Metamask error code\n              if (!(_context3.t0.code === errChainNotAddedYet)) {\n                _context3.next = 22;\n                break;\n              }\n              chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find(function (chain) {\n                return chain.chainId === chainId;\n              });\n              if (chain) {\n                _context3.next = 16;\n                break;\n              }\n              throw new Error(\"ChainId \\\"\".concat(chainId, \"\\\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks\"));\n            case 16:\n              if (chain.rpcUrl) {\n                _context3.next = 18;\n                break;\n              }\n              throw new Error(\"ChainId \\\"\".concat(chainId, \"\\\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks\"));\n            case 18:\n              _context3.next = 20;\n              return provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n            case 20:\n              _context3.next = 23;\n              break;\n            case 22:\n              throw _context3.t0;\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 9]]);\n      }));\n      function switchNetwork(_x) {\n        return _switchNetwork.apply(this, arguments);\n      }\n      return switchNetwork;\n    }()\n  }, {\n    key: \"reportError\",\n    value: function reportError(error) {\n      this.errors.push(error);\n      this.emitUpdate();\n    }\n  }]);\n  return ConnectorController;\n}();","map":{"version":3,"sources":["../../../../../../src/providers/network/connectors/connectorController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport class ConnectorController {\n    constructor(connector, config = DEFAULT_CONFIG) {\n        this.connector = connector;\n        this.updated = new Event();\n        this.newBlock = new Event();\n        this.active = false;\n        this.accounts = [];\n        this.errors = [];\n        this._config = Object.assign({}, config);\n        this._connectorUnsubscribe = connector.update.on(({ chainId, accounts }) => {\n            this.chainId = chainId;\n            this.accounts = accounts;\n            this.emitUpdate();\n        });\n    }\n    emitUpdate() {\n        this.updated.emit({\n            active: this.active,\n            chainId: this.chainId,\n            accounts: this.accounts,\n            blockNumber: this.blockNumber,\n            errors: this.errors,\n        });\n    }\n    updateConfig(config) {\n        this._config = Object.assign(Object.assign({}, this._config), config);\n    }\n    getProvider() {\n        return this.connector.provider;\n    }\n    async activate(connectorActivator = (connector) => connector.activate()) {\n        await connectorActivator(this.connector);\n        const provider = this.getProvider();\n        if (!provider) {\n            throw new Error('Failed to activate connector');\n        }\n        this.clearSubscriptions = subscribeToProviderEvents(this.connector, ({ chainId, accounts }) => {\n            if (chainId !== undefined) {\n                this.chainId = chainId;\n            }\n            if (accounts !== undefined) {\n                this.accounts = accounts;\n            }\n            this.emitUpdate();\n        }, () => {\n            if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n                return;\n            }\n            void this.deactivate();\n        });\n        this.blockNumber = await provider.getBlockNumber();\n        this.newBlock.emit(this.blockNumber);\n        this.removeBlockEffect = this.newBlock.addEffect(() => {\n            const listener = (blockNumber) => {\n                this.blockNumber = blockNumber;\n                this.newBlock.emit(blockNumber);\n                this.emitUpdate();\n            };\n            provider.on('block', listener);\n            return () => {\n                provider.off('block', listener);\n            };\n        });\n        this.active = true;\n        this.emitUpdate();\n    }\n    async deactivate() {\n        var _a, _b, _c;\n        this.active = false;\n        (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this._connectorUnsubscribe) === null || _c === void 0 ? void 0 : _c.call(this);\n        await this.connector.deactivate();\n        this.chainId = undefined;\n        this.accounts = [];\n        this.blockNumber = undefined;\n        this.errors = [];\n        this.emitUpdate();\n    }\n    async switchNetwork(chainId) {\n        var _a;\n        const provider = this.getProvider();\n        validateArguments({ chainId }, { chainId: 'number' });\n        if (!provider) {\n            throw new Error('Connector not initialized');\n        }\n        try {\n            await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }]);\n        }\n        catch (error) {\n            const errChainNotAddedYet = 4902; // Metamask error code\n            if (error.code === errChainNotAddedYet) {\n                const chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find((chain) => chain.chainId === chainId);\n                if (!chain)\n                    throw new Error(`ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n                if (!chain.rpcUrl)\n                    throw new Error(`ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n                await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    reportError(error) {\n        this.errors.push(error);\n        this.emitUpdate();\n    }\n}\n//# sourceMappingURL=connectorController.js.map"]},"metadata":{},"sourceType":"module"}