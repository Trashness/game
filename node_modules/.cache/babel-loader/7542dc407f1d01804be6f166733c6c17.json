{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @param queryParams see {@link QueryParams}.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  var partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: []\n  };\n  var args = ['name', 'symbol', 'decimals', 'totalSupply'].map(function (method) {\n    return partialCall && Object.assign(Object.assign({}, partialCall), {\n      method: method\n    });\n  });\n  var _useCalls = useCalls(args, queryParams),\n    _useCalls2 = _slicedToArray(_useCalls, 4),\n    name = _useCalls2[0],\n    symbol = _useCalls2[1],\n    decimals = _useCalls2[2],\n    totalSupply = _useCalls2[3];\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined;\n  }\n  return {\n    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useToken.ts"],"names":[],"mappings":";AAAA,SAAS,cAAc,QAAqB,cAAc;AAG1D,SAAe,QAAQ,QAAQ,WAAW;AAC1C,SAAS,QAAQ,QAAQ,QAAQ;AAEjC;;;;;;;;;;;;;;;;;;AAkBG;AACH,OAAM,SAAU,QAAQ,CAAC,YAA4B,EAA+B;EAAA,IAA7B,WAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,CAAA,CAAE;;EAClF,IAAM,WAAW,GAAG,YAAY,IAAI;IAClC,QAAQ,EAAE,IAAI,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC;IACpD,OAAO,EAAE,YAAY;IACrB,IAAI,EAAE;GACP;EACD,IAAM,IAAI,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,GAAG,CAC5D,UAAC,MAAM;IAAA,OAAmB,WAAW,IAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAS,WAAW,CAAA,EAAA;MAAE,MAAM,EAAN;IAAM,CAAA,CAAE;EAAA,EACpE;EACD,IAAA,SAAA,GAA8C,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAlE,IAAI,GAAA,UAAA;IAAE,MAAM,GAAA,UAAA;IAAE,QAAQ,GAAA,UAAA;IAAE,WAAW,GAAA,UAAA;EAE1C,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE;IACjD,OAAO,SAAS;EACjB;EAED,OAAO;IACL,IAAI,EAAE,CAAA,EAAA,GAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAC1B,MAAM,EAAE,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAC9B,QAAQ,EAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,KAAK,CAAC,CAAC,CAAC;IAC5B,WAAW,EAAE,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAE,KAAK,CAAC,CAAC;GAClC;AACH","sourceRoot":"","sourcesContent":["import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @param queryParams see {@link QueryParams}.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress, queryParams = {}) {\n    var _a, _b;\n    const partialCall = tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        address: tokenAddress,\n        args: [],\n    };\n    const args = ['name', 'symbol', 'decimals', 'totalSupply'].map((method) => partialCall && Object.assign(Object.assign({}, partialCall), { method }));\n    const [name, symbol, decimals, totalSupply] = useCalls(args, queryParams);\n    if (!name && !symbol && !decimals && !totalSupply) {\n        return undefined;\n    }\n    return {\n        name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n        symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n        decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n        totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0],\n    };\n}\n//# sourceMappingURL=useToken.js.map"]},"metadata":{},"sourceType":"module"}