{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Env, getValue, setValue } from \"@tsed/core\";\nimport { $log } from \"@tsed/logger\";\nimport { DIContext } from \"../domain/DIContext.js\";\nimport { LocalsContainer } from \"../domain/LocalsContainer.js\";\nimport { createContainer as _createContainer } from \"../utils/createContainer.js\";\nimport { setLoggerConfiguration } from \"../utils/setLoggerConfiguration.js\";\nimport { InjectorService } from \"./InjectorService.js\";\n/**\n * Tool to run test with lightweight DI sandbox.\n */\nexport var DITest = /*#__PURE__*/function () {\n  function DITest() {\n    _classCallCheck(this, DITest);\n  }\n  _createClass(DITest, null, [{\n    key: \"injector\",\n    get: function get() {\n      if (DITest._injector) {\n        return DITest._injector;\n      }\n      /* istanbul ignore next */\n      throw new Error(\"PlatformTest.injector is not initialized. Use PlatformTest.create(): Promise before PlatformTest.invoke() or PlatformTest.injector.\\n\" + \"Example:\\n\" + \"before(async () => {\\n\" + \"   await PlatformTest.create()\\n\" + \"   await PlatformTest.invoke(MyService, [])\\n\" + \"})\");\n    },\n    set: function set(injector) {\n      DITest._injector = injector;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      setValue(DITest.options, key, value);\n    }\n  }, {\n    key: \"hasInjector\",\n    value: function hasInjector() {\n      return !!DITest._injector;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var settings,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              settings = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              settings = _objectSpread(_objectSpread({}, DITest.options), settings);\n              DITest.injector = DITest.createInjector(settings);\n              _context.next = 5;\n              return DITest.createContainer();\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function create() {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"createContainer\",\n    value: function () {\n      var _createContainer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return DITest.injector.load(_createContainer());\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function createContainer() {\n        return _createContainer2.apply(this, arguments);\n      }\n      return createContainer;\n    }()\n    /**\n     * Create a new injector with the right default services\n     */\n  }, {\n    key: \"createInjector\",\n    value: function createInjector() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var injector = new InjectorService();\n      injector.logger = $log;\n      // @ts-ignore\n      injector.settings.set(DITest.configure(settings));\n      setLoggerConfiguration(injector);\n      return injector;\n    }\n    /**\n     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.\n     */\n  }, {\n    key: \"reset\",\n    value: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!DITest.hasInjector()) {\n                _context3.next = 4;\n                break;\n              }\n              _context3.next = 3;\n              return DITest.injector.destroy();\n            case 3:\n              DITest._injector = null;\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n      return reset;\n    }()\n    /**\n     * Invoke a provider and return a fresh instance\n     * @param target\n     * @param providers\n     */\n  }, {\n    key: \"invoke\",\n    value: function invoke(target) {\n      var providers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var locals = new LocalsContainer();\n      providers.forEach(function (p) {\n        locals.set(p.token, p.use);\n      });\n      locals.set(InjectorService, DITest.injector);\n      var instance = DITest.injector.invoke(target, locals, {\n        rebuild: true\n      });\n      if (instance && instance.$onInit) {\n        // await instance.$onInit();\n        var result = instance.$onInit();\n        if (result instanceof Promise) {\n          return result.then(function () {\n            return instance;\n          });\n        }\n      }\n      return instance;\n    }\n    /**\n     * Return the instance from injector registry\n     * @param target\n     * @param options\n     */\n  }, {\n    key: \"get\",\n    value: function get(target) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return DITest.injector.get(target, options);\n    }\n  }, {\n    key: \"createDIContext\",\n    value: function createDIContext() {\n      return new DIContext({\n        id: \"id\",\n        injector: DITest.injector,\n        logger: DITest.injector.logger\n      });\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, settings), {}, {\n        env: getValue(settings, \"env\", Env.TEST),\n        logger: _objectSpread(_objectSpread({}, getValue(settings, \"logger\", {})), {}, {\n          level: getValue(settings, \"logger.level\", \"off\")\n        })\n      });\n    }\n  }]);\n  return DITest;\n}();\n_defineProperty(DITest, \"options\", {});\n_defineProperty(DITest, \"_injector\", null);","map":{"version":3,"sources":["../../../src/services/DITest.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Env, getValue, setValue } from \"@tsed/core\";\nimport { $log } from \"@tsed/logger\";\nimport { DIContext } from \"../domain/DIContext.js\";\nimport { LocalsContainer } from \"../domain/LocalsContainer.js\";\nimport { createContainer } from \"../utils/createContainer.js\";\nimport { setLoggerConfiguration } from \"../utils/setLoggerConfiguration.js\";\nimport { InjectorService } from \"./InjectorService.js\";\n/**\n * Tool to run test with lightweight DI sandbox.\n */\nexport class DITest {\n    static options = {};\n    static _injector = null;\n    static get injector() {\n        if (DITest._injector) {\n            return DITest._injector;\n        }\n        /* istanbul ignore next */\n        throw new Error(\"PlatformTest.injector is not initialized. Use PlatformTest.create(): Promise before PlatformTest.invoke() or PlatformTest.injector.\\n\" +\n            \"Example:\\n\" +\n            \"before(async () => {\\n\" +\n            \"   await PlatformTest.create()\\n\" +\n            \"   await PlatformTest.invoke(MyService, [])\\n\" +\n            \"})\");\n    }\n    static set injector(injector) {\n        DITest._injector = injector;\n    }\n    static set(key, value) {\n        setValue(DITest.options, key, value);\n    }\n    static hasInjector() {\n        return !!DITest._injector;\n    }\n    static async create(settings = {}) {\n        settings = {\n            ...DITest.options,\n            ...settings\n        };\n        DITest.injector = DITest.createInjector(settings);\n        await DITest.createContainer();\n    }\n    static async createContainer() {\n        await DITest.injector.load(createContainer());\n    }\n    /**\n     * Create a new injector with the right default services\n     */\n    static createInjector(settings = {}) {\n        const injector = new InjectorService();\n        injector.logger = $log;\n        // @ts-ignore\n        injector.settings.set(DITest.configure(settings));\n        setLoggerConfiguration(injector);\n        return injector;\n    }\n    /**\n     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.\n     */\n    static async reset() {\n        if (DITest.hasInjector()) {\n            await DITest.injector.destroy();\n            DITest._injector = null;\n        }\n    }\n    /**\n     * Invoke a provider and return a fresh instance\n     * @param target\n     * @param providers\n     */\n    static invoke(target, providers = []) {\n        const locals = new LocalsContainer();\n        providers.forEach((p) => {\n            locals.set(p.token, p.use);\n        });\n        locals.set(InjectorService, DITest.injector);\n        const instance = DITest.injector.invoke(target, locals, { rebuild: true });\n        if (instance && instance.$onInit) {\n            // await instance.$onInit();\n            const result = instance.$onInit();\n            if (result instanceof Promise) {\n                return result.then(() => instance);\n            }\n        }\n        return instance;\n    }\n    /**\n     * Return the instance from injector registry\n     * @param target\n     * @param options\n     */\n    static get(target, options = {}) {\n        return DITest.injector.get(target, options);\n    }\n    static createDIContext() {\n        return new DIContext({\n            id: \"id\",\n            injector: DITest.injector,\n            logger: DITest.injector.logger\n        });\n    }\n    static configure(settings = {}) {\n        return {\n            ...settings,\n            env: getValue(settings, \"env\", Env.TEST),\n            logger: {\n                ...getValue(settings, \"logger\", {}),\n                level: getValue(settings, \"logger.level\", \"off\")\n            }\n        };\n    }\n}\n//# sourceMappingURL=DITest.js.map"]},"metadata":{},"sourceType":"module"}