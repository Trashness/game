{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig } from '../../..';\nimport { useConnector, useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nimport { useWindow } from '../../window/context';\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context';\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(function (chainId) {\n    return [Number(chainId), {\n      value: state[Number(chainId)],\n      multicallAddress: multicallAddresses[Number(chainId)]\n    }];\n  }));\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar stripCall = function stripCall(_a) {\n  var isStatic = _a.isStatic,\n    lastUpdatedBlockNumber = _a.lastUpdatedBlockNumber,\n    strippedCall = __rest(_a, [\"isStatic\", \"lastUpdatedBlockNumber\"]);\n  return strippedCall;\n};\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider(_ref) {\n  var children = _ref.children,\n    multicallAddresses = _ref.multicallAddresses;\n  var _useConfig = useConfig(),\n    multicallVersion = _useConfig.multicallVersion,\n    fastMulticallEncoding = _useConfig.fastMulticallEncoding;\n  var networks = useReadonlyNetworks();\n  var blockNumbers = useBlockNumbers();\n  var dispatchNetworksState = useUpdateNetworksState();\n  var isActive = useWindow();\n  var _useReducer = useReducer(callsReducer, []),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    calls = _useReducer2[0],\n    dispatchCalls = _useReducer2[1];\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n    _useReducer4 = _slicedToArray(_useReducer3, 2),\n    state = _useReducer4[0],\n    dispatchState = _useReducer4[1];\n  var _useConnector = useConnector(),\n    reportError = _useConnector.reportError;\n  var multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n  var _useDebouncePair = useDebouncePair(calls, networks, 50),\n    _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n    debouncedCalls = _useDebouncePair2[0],\n    debouncedNetworks = _useDebouncePair2[1];\n  var uniqueCalls = useMemo(function () {\n    return getUniqueActiveCalls(debouncedCalls);\n  }, [debouncedCalls]);\n  // used for deep equality in hook dependencies\n  var uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));\n  var chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n  function multicallForChain(chainId, provider) {\n    if (!isActive) {\n      return;\n    }\n    var blockNumber = blockNumbers[chainId];\n    var multicallAddress = multicallAddresses[chainId];\n    if (!provider || !blockNumber) {\n      return;\n    }\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n    var updatedCalls = getCallsForUpdate(debouncedCalls, {\n      chainId: chainId,\n      blockNumber: blockNumber\n    });\n    var callsOnThisChain = getUniqueActiveCalls(updatedCalls);\n    if (callsOnThisChain.length > 0 && !multicallAddress) {\n      reportError(new Error(\"Missing multicall address for chain id \".concat(chainId)));\n      return;\n    }\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, function (error) {\n      dispatchNetworksState({\n        type: 'ADD_ERROR',\n        chainId: chainId,\n        error: error\n      });\n    });\n    dispatchCalls({\n      type: 'UPDATE_CALLS',\n      calls: calls,\n      updatedCalls: updatedCalls,\n      blockNumber: blockNumber,\n      chainId: chainId\n    });\n  }\n  useEffect(function () {\n    var _a, _b;\n    for (var _i = 0, _Object$entries = Object.entries(networks); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        _chainId = _Object$entries$_i[0],\n        provider = _Object$entries$_i[1];\n      var _chainId2 = Number(_chainId);\n      // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n      if (_chainId2 === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || _chainId2 === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {\n        multicallForChain(_chainId2, provider);\n      }\n    }\n  }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);\n  var chains = useMemo(function () {\n    return composeChainState(networks, state, multicallAddresses);\n  }, [state, multicallAddresses, networks]);\n  var provided = {\n    chains: chains,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/multiChainStates/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig } from '../../..';\nimport { useConnector, useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getCallsForUpdate, getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nimport { useWindow } from '../../window/context';\nimport { useUpdateNetworksState } from '../../network/readonlyNetworks/context';\nfunction composeChainState(networks, state, multicallAddresses) {\n    return fromEntries(Object.keys(networks).map((chainId) => [\n        Number(chainId),\n        {\n            value: state[Number(chainId)],\n            multicallAddress: multicallAddresses[Number(chainId)],\n        },\n    ]));\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stripCall = (_a) => {\n    var { isStatic, lastUpdatedBlockNumber } = _a, strippedCall = __rest(_a, [\"isStatic\", \"lastUpdatedBlockNumber\"]);\n    return strippedCall;\n};\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider({ children, multicallAddresses }) {\n    const { multicallVersion, fastMulticallEncoding } = useConfig();\n    const networks = useReadonlyNetworks();\n    const blockNumbers = useBlockNumbers();\n    const dispatchNetworksState = useUpdateNetworksState();\n    const isActive = useWindow();\n    const [calls, dispatchCalls] = useReducer(callsReducer, []);\n    const [state, dispatchState] = useReducer(chainStateReducer, {});\n    const { reportError } = useConnector();\n    const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n    const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n    const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls]);\n    // used for deep equality in hook dependencies\n    const uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));\n    const chainId = useChainId();\n    useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n    function multicallForChain(chainId, provider) {\n        if (!isActive) {\n            return;\n        }\n        const blockNumber = blockNumbers[chainId];\n        const multicallAddress = multicallAddresses[chainId];\n        if (!provider || !blockNumber) {\n            return;\n        }\n        if (debouncedNetworks !== networks) {\n            // Wait for debounce to catch up.\n            return;\n        }\n        const updatedCalls = getCallsForUpdate(debouncedCalls, { chainId, blockNumber });\n        const callsOnThisChain = getUniqueActiveCalls(updatedCalls);\n        if (callsOnThisChain.length > 0 && !multicallAddress) {\n            reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n            return;\n        }\n        performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, (error) => {\n            dispatchNetworksState({\n                type: 'ADD_ERROR',\n                chainId,\n                error,\n            });\n        });\n        dispatchCalls({ type: 'UPDATE_CALLS', calls, updatedCalls, blockNumber, chainId });\n    }\n    useEffect(() => {\n        var _a, _b;\n        for (const [_chainId, provider] of Object.entries(networks)) {\n            const chainId = Number(_chainId);\n            // chainId is in provider is not the same as the chainId in the state wait for chainId to catch up\n            if (chainId === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || chainId === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {\n                multicallForChain(chainId, provider);\n            }\n        }\n    }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);\n    const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\n        state,\n        multicallAddresses,\n        networks,\n    ]);\n    const provided = { chains, dispatchCalls };\n    return _jsx(MultiChainStatesContext.Provider, { value: provided, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}