{"ast":null,"code":"import _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport { getClassOrSymbol } from \"@tsed/core\";\nimport { Provider } from \"../domain/Provider.js\";\nimport { ProviderType } from \"../domain/ProviderType.js\";\nvar _settings = /*#__PURE__*/new WeakMap();\nexport var GlobalProviderRegistry = /*#__PURE__*/function (_Map) {\n  _inherits(GlobalProviderRegistry, _Map);\n  var _super = _createSuper(GlobalProviderRegistry);\n  function GlobalProviderRegistry() {\n    var _this;\n    _classCallCheck(this, GlobalProviderRegistry);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _settings, {\n      writable: true,\n      value: new Map()\n    });\n    return _this;\n  }\n  _createClass(GlobalProviderRegistry, [{\n    key: \"get\",\n    value:\n    /**\n     * The get() method returns a specified element from a Map object.\n     * @param key Required. The key of the element to return from the Map object.\n     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n     */\n    function get(key) {\n      return _get(_getPrototypeOf(GlobalProviderRegistry.prototype), \"get\", this).call(this, getClassOrSymbol(key));\n    }\n    /**\n     * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n     * @param key\n     * @returns {boolean}\n     */\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return _get(_getPrototypeOf(GlobalProviderRegistry.prototype), \"has\", this).call(this, getClassOrSymbol(key));\n    }\n    /**\n     * The set() method adds or updates an element with a specified key and value to a Map object.\n     * @param key Required. The key of the element to add to the Map object.\n     * @param metadata Required. The value of the element to add to the Map object.\n     */\n  }, {\n    key: \"set\",\n    value: function set(key, metadata) {\n      _get(_getPrototypeOf(GlobalProviderRegistry.prototype), \"set\", this).call(this, getClassOrSymbol(key), metadata);\n      return this;\n    }\n    /**\n     *\n     * @param target\n     * @param options\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(target, options) {\n      var meta = this.createIfNotExists(target, options);\n      Object.keys(options).forEach(function (key) {\n        meta[key] = options[key];\n      });\n      this.set(target, meta);\n      return meta;\n    }\n    /**\n     * The delete() method removes the specified element from a Map object.\n     * @param key Required. The key of the element to remove from the Map object.\n     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return _get(_getPrototypeOf(GlobalProviderRegistry.prototype), \"delete\", this).call(this, getClassOrSymbol(key));\n    }\n  }, {\n    key: \"createRegistry\",\n    value: function createRegistry(type, model) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var defaultOptions = this.getRegistrySettings(type);\n      options = Object.assign(defaultOptions, _objectSpread(_objectSpread({}, options), {}, {\n        model: model\n      }));\n      _classPrivateFieldGet(this, _settings).set(type, options);\n      return this;\n    }\n  }, {\n    key: \"onInvoke\",\n    value: function onInvoke(provider, locals, options) {\n      var settings = _classPrivateFieldGet(this, _settings).get(provider.type);\n      if (settings !== null && settings !== void 0 && settings.onInvoke) {\n        settings.onInvoke(provider, locals, options);\n      }\n    }\n  }, {\n    key: \"getRegistrySettings\",\n    value: function getRegistrySettings(target) {\n      var type = \"provider\";\n      if (typeof target === \"string\") {\n        type = target;\n      } else {\n        var provider = this.get(target);\n        if (provider) {\n          type = provider.type;\n        }\n      }\n      return _classPrivateFieldGet(this, _settings).get(type) || {\n        model: Provider\n      };\n    }\n  }, {\n    key: \"createRegisterFn\",\n    value: function createRegisterFn(type) {\n      var _this2 = this;\n      return function (provider, instance) {\n        // istanbul ignore next\n        if (!provider.provide) {\n          provider = {\n            provide: provider\n          };\n        }\n        provider = Object.assign({\n          instance: instance\n        }, provider, {\n          type: type\n        });\n        _this2.merge(provider.provide, provider);\n      };\n    }\n    /**\n     *\n     * @param key\n     * @param options\n     */\n  }, {\n    key: \"createIfNotExists\",\n    value: function createIfNotExists(key, options) {\n      var type = options.type || ProviderType.PROVIDER;\n      if (!this.has(key)) {\n        var _ref = _classPrivateFieldGet(this, _settings).get(type) || {},\n          _ref$model = _ref.model,\n          model = _ref$model === void 0 ? Provider : _ref$model;\n        var item = new model(key, options);\n        this.set(key, item);\n      }\n      return this.get(key);\n    }\n  }]);\n  return GlobalProviderRegistry;\n}( /*#__PURE__*/_wrapNativeSuper(Map));\n/**\n *\n * @type {GlobalProviders}\n */\n// tslint:disable-next-line: variable-name\nexport var GlobalProviders = new GlobalProviderRegistry();","map":{"version":3,"sources":["../../../src/registries/GlobalProviders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getClassOrSymbol } from \"@tsed/core\";\nimport { Provider } from \"../domain/Provider.js\";\nimport { ProviderType } from \"../domain/ProviderType.js\";\nexport class GlobalProviderRegistry extends Map {\n    #settings = new Map();\n    /**\n     * The get() method returns a specified element from a Map object.\n     * @param key Required. The key of the element to return from the Map object.\n     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n     */\n    get(key) {\n        return super.get(getClassOrSymbol(key));\n    }\n    /**\n     * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n     * @param key\n     * @returns {boolean}\n     */\n    has(key) {\n        return super.has(getClassOrSymbol(key));\n    }\n    /**\n     * The set() method adds or updates an element with a specified key and value to a Map object.\n     * @param key Required. The key of the element to add to the Map object.\n     * @param metadata Required. The value of the element to add to the Map object.\n     */\n    set(key, metadata) {\n        super.set(getClassOrSymbol(key), metadata);\n        return this;\n    }\n    /**\n     *\n     * @param target\n     * @param options\n     */\n    merge(target, options) {\n        const meta = this.createIfNotExists(target, options);\n        Object.keys(options).forEach((key) => {\n            meta[key] = options[key];\n        });\n        this.set(target, meta);\n        return meta;\n    }\n    /**\n     * The delete() method removes the specified element from a Map object.\n     * @param key Required. The key of the element to remove from the Map object.\n     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n     */\n    delete(key) {\n        return super.delete(getClassOrSymbol(key));\n    }\n    createRegistry(type, model, options = {}) {\n        const defaultOptions = this.getRegistrySettings(type);\n        options = Object.assign(defaultOptions, {\n            ...options,\n            model\n        });\n        this.#settings.set(type, options);\n        return this;\n    }\n    onInvoke(provider, locals, options) {\n        const settings = this.#settings.get(provider.type);\n        if (settings?.onInvoke) {\n            settings.onInvoke(provider, locals, options);\n        }\n    }\n    getRegistrySettings(target) {\n        let type = \"provider\";\n        if (typeof target === \"string\") {\n            type = target;\n        }\n        else {\n            const provider = this.get(target);\n            if (provider) {\n                type = provider.type;\n            }\n        }\n        return (this.#settings.get(type) || {\n            model: Provider\n        });\n    }\n    createRegisterFn(type) {\n        return (provider, instance) => {\n            // istanbul ignore next\n            if (!provider.provide) {\n                provider = {\n                    provide: provider\n                };\n            }\n            provider = Object.assign({ instance }, provider, { type });\n            this.merge(provider.provide, provider);\n        };\n    }\n    /**\n     *\n     * @param key\n     * @param options\n     */\n    createIfNotExists(key, options) {\n        const type = options.type || ProviderType.PROVIDER;\n        if (!this.has(key)) {\n            const { model = Provider } = this.#settings.get(type) || {};\n            const item = new model(key, options);\n            this.set(key, item);\n        }\n        return this.get(key);\n    }\n}\n/**\n *\n * @type {GlobalProviders}\n */\n// tslint:disable-next-line: variable-name\nexport const GlobalProviders = new GlobalProviderRegistry();\n//# sourceMappingURL=GlobalProviders.js.map"]},"metadata":{},"sourceType":"module"}