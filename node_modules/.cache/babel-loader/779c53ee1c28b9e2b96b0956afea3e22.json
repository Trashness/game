{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { providers } from 'ethers';\nimport { Event } from '../../../../helpers/event';\nexport var InjectedConnector = /*#__PURE__*/function () {\n  function InjectedConnector(provider) {\n    _classCallCheck(this, InjectedConnector);\n    this.name = 'Injected';\n    this.update = new Event();\n    this.provider = providers.Provider.isProvider(provider) ? provider : new providers.Web3Provider(provider);\n  }\n  _createClass(InjectedConnector, [{\n    key: \"connectEagerly\",\n    value: function () {\n      var _connectEagerly = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var chainId, accounts;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.provider) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return this.provider.send('eth_chainId', []);\n            case 5:\n              chainId = _context.sent;\n              _context.next = 8;\n              return this.provider.send('eth_accounts', []);\n            case 8:\n              accounts = _context.sent;\n              this.update.emit({\n                chainId: parseInt(chainId),\n                accounts: accounts\n              });\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              console.debug(_context.t0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 12]]);\n      }));\n      function connectEagerly() {\n        return _connectEagerly.apply(this, arguments);\n      }\n      return connectEagerly;\n    }()\n  }, {\n    key: \"activate\",\n    value: function () {\n      var _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var chainId, accounts;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.provider) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error('Could not activate connector');\n            case 2:\n              _context2.prev = 2;\n              _context2.next = 5;\n              return this.provider.send('eth_chainId', []);\n            case 5:\n              chainId = _context2.sent;\n              _context2.next = 8;\n              return this.provider.send('eth_accounts', []);\n            case 8:\n              accounts = _context2.sent;\n              this.update.emit({\n                chainId: parseInt(chainId),\n                accounts: accounts\n              });\n              _context2.next = 16;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n              throw new Error('Could not activate connector');\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 12]]);\n      }));\n      function activate() {\n        return _activate.apply(this, arguments);\n      }\n      return activate;\n    }()\n  }, {\n    key: \"deactivate\",\n    value: function () {\n      var _deactivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.provider = undefined;\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function deactivate() {\n        return _deactivate.apply(this, arguments);\n      }\n      return deactivate;\n    }()\n  }]);\n  return InjectedConnector;\n}();","map":{"version":3,"sources":["../../../../../../../src/providers/network/connectors/implementations/injected.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { providers } from 'ethers';\nimport { Event } from '../../../../helpers/event';\nexport class InjectedConnector {\n    constructor(provider) {\n        this.name = 'Injected';\n        this.update = new Event();\n        this.provider = providers.Provider.isProvider(provider) ? provider : new providers.Web3Provider(provider);\n    }\n    async connectEagerly() {\n        if (!this.provider) {\n            return;\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_accounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (error) {\n            console.debug(error);\n        }\n    }\n    async activate() {\n        if (!this.provider) {\n            throw new Error('Could not activate connector');\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_accounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (error) {\n            console.log(error);\n            throw new Error('Could not activate connector');\n        }\n    }\n    async deactivate() {\n        this.provider = undefined;\n    }\n}\n//# sourceMappingURL=injected.js.map"]},"metadata":{},"sourceType":"module"}