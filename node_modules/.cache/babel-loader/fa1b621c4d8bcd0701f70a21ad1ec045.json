{"ast":null,"code":"import _objectSpread from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { replaceData, noop, timeUntilStale, getAbortController } from './utils.esm.js';\nimport { defaultLogger } from './logger.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.esm.js';\nimport { Removable } from './removable.esm.js';\n\n// CLASS\nvar Query = /*#__PURE__*/function (_Removable) {\n  _inherits(Query, _Removable);\n  var _super = _createSuper(Query);\n  function Query(config) {\n    var _this;\n    _classCallCheck(this, Query);\n    _this = _super.call(this);\n    _this.abortSignalConsumed = false;\n    _this.defaultOptions = config.defaultOptions;\n    _this.setOptions(config.options);\n    _this.observers = [];\n    _this.cache = config.cache;\n    _this.logger = config.logger || defaultLogger;\n    _this.queryKey = config.queryKey;\n    _this.queryHash = config.queryHash;\n    _this.initialState = config.state || getDefaultState(_this.options);\n    _this.state = _this.initialState;\n    _this.scheduleGc();\n    return _this;\n  }\n  _createClass(Query, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.defaultOptions), options);\n      this.updateCacheTime(this.options.cacheTime);\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length && this.state.fetchStatus === 'idle') {\n        this.cache.remove(this);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newData, options) {\n      var data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n      this.dispatch({\n        data: data,\n        type: 'success',\n        dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n        manual: options == null ? void 0 : options.manual\n      });\n      return data;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state, setStateOptions) {\n      this.dispatch({\n        type: 'setState',\n        state: state,\n        setStateOptions: setStateOptions\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(options) {\n      var _this$retryer;\n      var promise = this.promise;\n      (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n      return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Query.prototype), \"destroy\", this).call(this);\n      this.cancel({\n        silent: true\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.destroy();\n      this.setState(this.initialState);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.observers.some(function (observer) {\n        return observer.options.enabled !== false;\n      });\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.getObserversCount() > 0 && !this.isActive();\n    }\n  }, {\n    key: \"isStale\",\n    value: function isStale() {\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n        return observer.getCurrentResult().isStale;\n      });\n    }\n  }, {\n    key: \"isStaleByTime\",\n    value: function isStaleByTime() {\n      var staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _this$retryer2;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnWindowFocus();\n      });\n      if (observer) {\n        observer.refetch({\n          cancelRefetch: false\n        });\n      } // Continue fetch if currently paused\n\n      (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _this$retryer3;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnReconnect();\n      });\n      if (observer) {\n        observer.refetch({\n          cancelRefetch: false\n        });\n      } // Continue fetch if currently paused\n\n      (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (this.observers.indexOf(observer) === -1) {\n        this.observers.push(observer); // Stop the query from being garbage collected\n\n        this.clearGcTimeout();\n        this.cache.notify({\n          type: 'observerAdded',\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      if (this.observers.indexOf(observer) !== -1) {\n        this.observers = this.observers.filter(function (x) {\n          return x !== observer;\n        });\n        if (!this.observers.length) {\n          // If the transport layer does not support cancellation\n          // we'll let the query continue so the result can be cached\n          if (this.retryer) {\n            if (this.abortSignalConsumed) {\n              this.retryer.cancel({\n                revert: true\n              });\n            } else {\n              this.retryer.cancelRetry();\n            }\n          }\n          this.scheduleGc();\n        }\n        this.cache.notify({\n          type: 'observerRemoved',\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"getObserversCount\",\n    value: function getObserversCount() {\n      return this.observers.length;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!this.state.isInvalidated) {\n        this.dispatch({\n          type: 'invalidate'\n        });\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(options, fetchOptions) {\n      var _this2 = this;\n      var _this$options$behavio, _context$fetchOptions;\n      if (this.state.fetchStatus !== 'idle') {\n        if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n          // Silently cancel current fetch if the user wants to cancel refetches\n          this.cancel({\n            silent: true\n          });\n        } else if (this.promise) {\n          var _this$retryer4;\n\n          // make sure that retries that were potentially cancelled due to unmounts can continue\n          (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n          return this.promise;\n        }\n      } // Update config if passed, otherwise the config from the last execution is used\n\n      if (options) {\n        this.setOptions(options);\n      } // Use the options from the first observer with a query function if no function is found.\n      // This can happen when the query is hydrated or created with setQueryData.\n\n      if (!this.options.queryFn) {\n        var observer = this.observers.find(function (x) {\n          return x.options.queryFn;\n        });\n        if (observer) {\n          this.setOptions(observer.options);\n        }\n      }\n      if (!Array.isArray(this.options.queryKey)) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n        }\n      }\n      var abortController = getAbortController(); // Create query function context\n\n      var queryFnContext = {\n        queryKey: this.queryKey,\n        pageParam: undefined,\n        meta: this.meta\n      }; // Adds an enumerable signal property to the object that\n      // which sets abortSignalConsumed to true when the signal\n      // is read.\n\n      var addSignalProperty = function addSignalProperty(object) {\n        Object.defineProperty(object, 'signal', {\n          enumerable: true,\n          get: function get() {\n            if (abortController) {\n              _this2.abortSignalConsumed = true;\n              return abortController.signal;\n            }\n            return undefined;\n          }\n        });\n      };\n      addSignalProperty(queryFnContext); // Create fetch function\n\n      var fetchFn = function fetchFn() {\n        if (!_this2.options.queryFn) {\n          return Promise.reject('Missing queryFn');\n        }\n        _this2.abortSignalConsumed = false;\n        return _this2.options.queryFn(queryFnContext);\n      }; // Trigger behavior hook\n\n      var context = {\n        fetchOptions: fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        state: this.state,\n        fetchFn: fetchFn\n      };\n      addSignalProperty(context);\n      (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n      this.revertState = this.state; // Set to fetching state if not already in it\n\n      if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n        var _context$fetchOptions2;\n        this.dispatch({\n          type: 'fetch',\n          meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n        });\n      }\n      var onError = function onError(error) {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          _this2.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n        if (!isCancelledError(error)) {\n          var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;\n\n          // Notify cache callback\n          (_this$cache$config$on = (_this$cache$config = _this2.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, _this2);\n          (_this$cache$config$on2 = (_this$cache$config2 = _this2.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, _this2.state.data, error, _this2);\n          if (process.env.NODE_ENV !== 'production') {\n            _this2.logger.error(error);\n          }\n        }\n        if (!_this2.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          _this2.scheduleGc();\n        }\n        _this2.isFetchingOptimistic = false;\n      }; // Try to fetch the data\n\n      this.retryer = createRetryer({\n        fn: context.fetchFn,\n        abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n        onSuccess: function onSuccess(data) {\n          var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n          if (typeof data === 'undefined') {\n            if (process.env.NODE_ENV !== 'production') {\n              _this2.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + _this2.queryHash);\n            }\n            onError(new Error('undefined'));\n            return;\n          }\n          _this2.setData(data); // Notify cache callback\n\n          (_this$cache$config$on3 = (_this$cache$config3 = _this2.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, _this2);\n          (_this$cache$config$on4 = (_this$cache$config4 = _this2.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, _this2.state.error, _this2);\n          if (!_this2.isFetchingOptimistic) {\n            // Schedule query gc after fetching\n            _this2.scheduleGc();\n          }\n          _this2.isFetchingOptimistic = false;\n        },\n        onError: onError,\n        onFail: function onFail(failureCount, error) {\n          _this2.dispatch({\n            type: 'failed',\n            failureCount: failureCount,\n            error: error\n          });\n        },\n        onPause: function onPause() {\n          _this2.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: function onContinue() {\n          _this2.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: context.options.retry,\n        retryDelay: context.options.retryDelay,\n        networkMode: context.options.networkMode\n      });\n      this.promise = this.retryer.promise;\n      return this.promise;\n    }\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(action) {\n      var _this3 = this;\n      var reducer = function reducer(state) {\n        var _action$meta, _action$dataUpdatedAt;\n        switch (action.type) {\n          case 'failed':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchFailureCount: action.failureCount,\n              fetchFailureReason: action.error\n            });\n          case 'pause':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchStatus: 'paused'\n            });\n          case 'continue':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchStatus: 'fetching'\n            });\n          case 'fetch':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n              fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n              fetchStatus: canFetch(_this3.options.networkMode) ? 'fetching' : 'paused'\n            }, !state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            });\n          case 'success':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              data: action.data,\n              dataUpdateCount: state.dataUpdateCount + 1,\n              dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n              error: null,\n              isInvalidated: false,\n              status: 'success'\n            }, !action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            });\n          case 'error':\n            var error = action.error;\n            if (isCancelledError(error) && error.revert && _this3.revertState) {\n              return _objectSpread({}, _this3.revertState);\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              error: error,\n              errorUpdateCount: state.errorUpdateCount + 1,\n              errorUpdatedAt: Date.now(),\n              fetchFailureCount: state.fetchFailureCount + 1,\n              fetchFailureReason: error,\n              fetchStatus: 'idle',\n              status: 'error'\n            });\n          case 'invalidate':\n            return _objectSpread(_objectSpread({}, state), {}, {\n              isInvalidated: true\n            });\n          case 'setState':\n            return _objectSpread(_objectSpread({}, state), action.state);\n        }\n      };\n      this.state = reducer(this.state);\n      notifyManager.batch(function () {\n        _this3.observers.forEach(function (observer) {\n          observer.onQueryUpdate(action);\n        });\n        _this3.cache.notify({\n          query: _this3,\n          type: 'updated',\n          action: action\n        });\n      });\n    }\n  }]);\n  return Query;\n}(Removable);\nfunction getDefaultState(options) {\n  var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  var hasData = typeof data !== 'undefined';\n  var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data: data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\nexport { Query };","map":{"version":3,"sources":["../../src/query.ts"],"names":["Query","Removable","constructor","config","abortSignalConsumed","defaultOptions","setOptions","options","observers","cache","logger","defaultLogger","queryKey","queryHash","initialState","state","getDefaultState","scheduleGc","meta","updateCacheTime","cacheTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","replaceData","dispatch","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","promise","retryer","then","noop","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","timeUntilStale","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","indexOf","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","queryFn","Array","isArray","process","env","NODE_ENV","error","abortController","getAbortController","queryFnContext","pageParam","undefined","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","reject","context","behavior","onFetch","revertState","fetchMeta","onError","isCancelledError","onSettled","isFetchingOptimistic","createRetryer","fn","abort","bind","onSuccess","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","action","reducer","fetchFailureCount","fetchFailureReason","canFetch","status","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","notifyManager","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"mappings":"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","sourcesContent":["import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport type { Retryer } from './retryer'\nimport { isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          this.state.data,\n          error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error('undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.cache.config.onSettled?.(\n          data,\n          this.state.error,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}