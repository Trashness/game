{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nvar GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport function getInjectedProvider(_x) {\n  return _getInjectedProvider.apply(this, arguments);\n}\nfunction _getInjectedProvider() {\n  _getInjectedProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(getPollingInterval) {\n    var _a, injectedProviders, injectedProvider, provider, chainId;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (window.ethereum) {\n            _context.next = 3;\n            break;\n          }\n          window.open(GET_METAMASK_LINK);\n          return _context.abrupt(\"return\", undefined);\n        case 3:\n          injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum.providers) || [];\n          if (!((_a = injectedProviders.find(function (provider) {\n            var _a;\n            return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n          })) !== null && _a !== void 0)) {\n            _context.next = 8;\n            break;\n          }\n          _context.t0 = _a;\n          _context.next = 11;\n          break;\n        case 8:\n          _context.next = 10;\n          return detectEthereumProvider();\n        case 10:\n          _context.t0 = _context.sent;\n        case 11:\n          injectedProvider = _context.t0;\n          if (injectedProvider) {\n            _context.next = 15;\n            break;\n          }\n          window.open(GET_METAMASK_LINK);\n          return _context.abrupt(\"return\", undefined);\n        case 15:\n          provider = new providers.Web3Provider(injectedProvider, 'any');\n          _context.next = 18;\n          return provider.send('eth_chainId', []);\n        case 18:\n          chainId = _context.sent;\n          if (!isWebSocketProvider(provider)) {\n            provider.pollingInterval = getPollingInterval(chainId);\n          }\n          return _context.abrupt(\"return\", provider);\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getInjectedProvider.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/helpers/injectedProvider.ts"],"names":[],"mappings":";;AAAA,OAAO,sBAAsB,MAAM,2BAA2B;AAC9D,SAAS,SAAS,QAAQ,QAAQ;AAClC,SAAS,mBAAmB,QAAQ,uBAAuB;AAE3D,IAAM,iBAAiB,GAAG,mCAAmC;AAE7D,gBAAsB,mBAAmB,CAAA,EAAA;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAuBxC,SAAA,qBAAA;EAAA,oBAAA,GAAA,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAvBM,SAAA,QAAmC,kBAAgD;IAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,OAAA;IAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;MAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;QAAA;UAAA,IAClF,MAAc,CAAC,QAAQ;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UAC3B,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;UAAA,OAAA,QAAA,CAAA,MAAA,WACvB,SAAS;QAAA;UAGZ,iBAAiB,GAAU,CAAC,MAAc,KAAA,IAAA,IAAd,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAU,QAAQ,CAAC,SAAS,KAAI,EAAE;UAAA,MAExE,CAAA,EAAA,GAAA,iBAAiB,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAI;;YAClC,OAAO,CAAA,EAAA,GAAA,QAAQ,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;UACrC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UAAA,QAAA,CAAA,EAAA,GAAA,EAAA;UAAA,QAAA,CAAA,IAAA;UAAA;QAAA;UAAA,QAAA,CAAA,IAAA;UAAA,OAAW,sBAAsB,EAAE;QAAA;UAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,IAAA;QAAA;UAHjC,gBAAgB,GAAA,QAAA,CAAA,EAAA;UAAA,IAKjB,gBAAgB;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;UACnB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;UAAA,OAAA,QAAA,CAAA,MAAA,WACvB,SAAS;QAAA;UAGZ,QAAQ,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,KAAK,CAAC;UAAA,QAAA,CAAA,IAAA;UAAA,OAC9C,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;QAAA;UAAhD,OAAO,GAAA,QAAA,CAAA,IAAA;UACb,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;YAClC,QAAQ,CAAC,eAAe,GAAG,kBAAkB,CAAC,OAAO,CAAC;;UACvD,OAAA,QAAA,CAAA,MAAA,WACM,QAAQ;QAAA;QAAA;UAAA,OAAA,QAAA,CAAA,IAAA;MAAA;IAAA,GAAA,OAAA;EAAA,CAChB;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA","sourceRoot":"","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n    var _a;\n    if (!window.ethereum) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum.providers) || [];\n    const injectedProvider = (_a = injectedProviders.find((provider) => {\n        var _a;\n        return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n    })) !== null && _a !== void 0 ? _a : (await detectEthereumProvider());\n    if (!injectedProvider) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const provider = new providers.Web3Provider(injectedProvider, 'any');\n    const chainId = await provider.send('eth_chainId', []);\n    if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(chainId);\n    }\n    return provider;\n}\n//# sourceMappingURL=injectedProvider.js.map"]},"metadata":{},"sourceType":"module"}