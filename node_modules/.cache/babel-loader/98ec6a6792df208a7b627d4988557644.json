{"ast":null,"code":"import { ethers } from 'ethers';\nexport var getSignerFromOptions = function getSignerFromOptions(provider, options, library) {\n  var privateKey = options && 'privateKey' in options && options.privateKey;\n  var mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n  var json = options && 'json' in options && options.json;\n  var password = options && 'password' in options && options.password;\n  var privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n  var mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n  var encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n  var optionsSigner = options && 'signer' in options && options.signer;\n  return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library && 'getSigner' in library ? library.getSigner() : undefined);\n};","map":{"version":3,"sources":["../../../../src/helpers/getSignerFromOptions.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAmB,QAAQ;AAO1C,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAC/B,QAAsB,EACtB,OAA4B,EAC5B,OAA4C,EAC1C;EACF,IAAM,UAAU,GAAG,OAAO,IAAI,YAAY,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU;EAC3E,IAAM,cAAc,GAAG,OAAO,IAAI,gBAAgB,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc;EACvF,IAAM,IAAI,GAAG,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;EACzD,IAAM,QAAQ,GAAG,OAAO,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ;EAErE,IAAM,gBAAgB,GAAG,UAAU,IAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC;EAC1F,IAAM,oBAAoB,GACxB,cAAc,IAAI,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAC5F,IAAM,mBAAmB,GACvB,IAAI,IAAI,QAAQ,IAAI,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAEvG,IAAM,aAAa,GAAG,OAAO,IAAI,QAAQ,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM;EAEtE,OACE,gBAAgB,IAChB,oBAAoB,IACpB,mBAAmB,IACnB,aAAa,KACZ,OAAO,IAAI,WAAW,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,EAAE,GAAG,SAAS,CAAC;AAEzE,CAAC","sourceRoot":"","sourcesContent":["import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n    const privateKey = options && 'privateKey' in options && options.privateKey;\n    const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n    const json = options && 'json' in options && options.json;\n    const password = options && 'password' in options && options.password;\n    const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n    const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n    const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n    const optionsSigner = options && 'signer' in options && options.signer;\n    return (privateKeySigner ||\n        mnemonicPhraseSigner ||\n        encryptedJsonSigner ||\n        optionsSigner ||\n        (library && 'getSigner' in library ? library.getSigner() : undefined));\n};\n//# sourceMappingURL=getSignerFromOptions.js.map"]},"metadata":{},"sourceType":"module"}