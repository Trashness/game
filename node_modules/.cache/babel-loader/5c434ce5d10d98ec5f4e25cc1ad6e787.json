{"ast":null,"code":"import _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n  var chainId = useChainId();\n  var readOnlyNetworks = useReadonlyNetworks();\n  var _useConnector = useConnector(),\n    connector = _useConnector.connector;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    blockNumber = _useState2[0],\n    setBlockNumber = _useState2[1];\n  var isActive = useWindow();\n  var isMounted = useIsMounted();\n  useEffect(function () {\n    if (!isActive) {\n      return;\n    }\n    var readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n    if (readOnlyNetwork) {\n      var _unsub = subscribeToNewBlock(readOnlyNetwork, chainId, function (_ref) {\n        var blockNumber = _ref.blockNumber;\n        if (isMounted()) {\n          setBlockNumber(blockNumber);\n        }\n      }, isActive);\n      return function () {\n        return _unsub();\n      };\n    }\n    if (!connector) {\n      return;\n    }\n    var unsub = connector.newBlock.on(function (blockNumber) {\n      if (isMounted()) {\n        setBlockNumber(blockNumber);\n      }\n    });\n    return function () {\n      return unsub();\n    };\n  }, [isActive, readOnlyNetworks, connector, chainId]);\n  var debouncedBlockNumber = useDebounce(blockNumber, 100);\n  return debouncedBlockNumber;\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockNumber.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C,SAAS,mBAAmB,EAAE,mBAAmB,EAAE,SAAS,QAAQ,cAAc;AAClF,SAAS,YAAY,QAAQ,iCAAiC;AAC9D,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,YAAY,QAAQ,gBAAgB;AAE7C;;;;AAIG;AACH,OAAM,SAAU,cAAc,CAAA,EAAA;EAC5B,IAAM,OAAO,GAAG,UAAU,EAAE;EAC5B,IAAM,gBAAgB,GAAG,mBAAmB,EAAE;EAC9C,IAAA,aAAA,GAAsB,YAAY,EAAE;IAA5B,SAAS,GAAA,aAAA,CAAT,SAAS;EACjB,IAAA,SAAA,GAAsC,QAAQ,EAAU;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAAjD,WAAW,GAAA,UAAA;IAAE,cAAc,GAAA,UAAA;EAClC,IAAM,QAAQ,GAAG,SAAS,EAAE;EAC5B,IAAM,SAAS,GAAG,YAAY,EAAE;EAEhC,SAAS,CAAC,YAAK;IACb,IAAI,CAAC,QAAQ,EAAE;MACb;IACD;IAED,IAAM,eAAe,GAAG,OAAO,IAAI,gBAAgB,CAAE,OAA8B,CAAC;IACpF,IAAI,eAAe,EAAE;MACnB,IAAM,MAAK,GAAG,mBAAmB,CAC/B,eAAe,EACf,OAAO,EACP,UAAA,IAAA,EAAoB;QAAA,IAAjB,WAAW,GAAA,IAAA,CAAX,WAAW;QACZ,IAAI,SAAS,EAAE,EAAE;UACf,cAAc,CAAC,WAAW,CAAC;QAC5B;MACH,CAAC,EACD,QAAQ,CACT;MACD,OAAO;QAAA,OAAM,MAAK,EAAE;MAAA;IACrB;IAED,IAAI,CAAC,SAAS,EAAE;MACd;IACD;IACD,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAC,WAAW,EAAI;MAClD,IAAI,SAAS,EAAE,EAAE;QACf,cAAc,CAAC,WAAW,CAAC;MAC5B;IACH,CAAC,CAAC;IACF,OAAO;MAAA,OAAM,KAAK,EAAE;IAAA;EACtB,CAAC,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;EAEpD,IAAM,oBAAoB,GAAG,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC;EAC1D,OAAO,oBAAoB;AAC7B","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n    const chainId = useChainId();\n    const readOnlyNetworks = useReadonlyNetworks();\n    const { connector } = useConnector();\n    const [blockNumber, setBlockNumber] = useState();\n    const isActive = useWindow();\n    const isMounted = useIsMounted();\n    useEffect(() => {\n        if (!isActive) {\n            return;\n        }\n        const readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n        if (readOnlyNetwork) {\n            const unsub = subscribeToNewBlock(readOnlyNetwork, chainId, ({ blockNumber }) => {\n                if (isMounted()) {\n                    setBlockNumber(blockNumber);\n                }\n            }, isActive);\n            return () => unsub();\n        }\n        if (!connector) {\n            return;\n        }\n        const unsub = connector.newBlock.on((blockNumber) => {\n            if (isMounted()) {\n                setBlockNumber(blockNumber);\n            }\n        });\n        return () => unsub();\n    }, [isActive, readOnlyNetworks, connector, chainId]);\n    const debouncedBlockNumber = useDebounce(blockNumber, 100);\n    return debouncedBlockNumber;\n}\n//# sourceMappingURL=useBlockNumber.js.map"]},"metadata":{},"sourceType":"module"}