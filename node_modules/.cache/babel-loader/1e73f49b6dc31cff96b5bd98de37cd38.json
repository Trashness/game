{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Kompa/Desktop/games/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport var useResolveName = function useResolveName(name) {\n  var _useEthers = useEthers(),\n    library = _useEthers.library;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    address = _useState6[0],\n    setAddress = _useState6[1];\n  useEffect(function () {\n    var mounted = true;\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var resolved;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!library || !name)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 2:\n            _context.prev = 2;\n            setIsLoading(true);\n            _context.next = 6;\n            return library.resolveName(name);\n          case 6:\n            resolved = _context.sent;\n            if (mounted) {\n              _context.next = 9;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 9:\n            setAddress(resolved);\n            _context.next = 17;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            if (mounted) {\n              _context.next = 16;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 16:\n            setError(_context.t0);\n          case 17:\n            _context.prev = 17;\n            setIsLoading(false);\n            return _context.finish(17);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[2, 12, 17, 20]]);\n    }))();\n    return function () {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address: address,\n    isLoading: isLoading,\n    error: error\n  };\n};","map":{"version":3,"sources":["../../../../src/hooks/useResolveName.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAC3C,SAAS,SAAS,QAAQ,aAAa;AAEvC;;;;;;;;AAQG;AACH,OAAO,IAAM,cAAc,GAAG,SAAjB,cAAc,CAAI,IAAwB,EAAI;EACzD,IAAA,UAAA,GAAoB,SAAS,EAAE;IAAvB,OAAO,GAAA,UAAA,CAAP,OAAO;EACf,IAAA,SAAA,GAAkC,QAAQ,CAAC,KAAK,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,SAAA;IAA1C,SAAS,GAAA,UAAA;IAAE,YAAY,GAAA,UAAA;EAC9B,IAAA,UAAA,GAA0B,QAAQ,CAAe,IAAI,CAAC;IAAA,UAAA,GAAA,cAAA,CAAA,UAAA;IAA/C,KAAK,GAAA,UAAA;IAAE,QAAQ,GAAA,UAAA;EACtB,IAAA,UAAA,GAA8B,QAAQ,EAAiB;IAAA,UAAA,GAAA,cAAA,CAAA,UAAA;IAAhD,OAAO,GAAA,UAAA;IAAE,UAAU,GAAA,UAAA;EAE1B,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,GAAG,IAAI;IAElB,KAAK,iBAAA,eAAA,mBAAA,GAAA,IAAA,CAAC,SAAA,QAAA;MAAA,IAAA,QAAA;MAAA,OAAA,mBAAA,GAAA,IAAA,UAAA,SAAA,QAAA;QAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;UAAA;YAAA,MACA,CAAC,OAAO,IAAI,CAAC,IAAI;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YAAA,QAAA,CAAA,IAAA;YAEnB,YAAY,CAAC,IAAI,CAAC;YAAA,QAAA,CAAA,IAAA;YAAA,OACK,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;UAAA;YAA1C,QAAQ,GAAA,QAAA,CAAA,IAAA;YAAA,IACT,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YACZ,UAAU,CAAC,QAAQ,CAAC;YAAA,QAAA,CAAA,IAAA;YAAA;UAAA;YAAA,QAAA,CAAA,IAAA;YAAA,QAAA,CAAA,EAAA,GAAA,QAAA;YAAA,IAEf,OAAO;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;YACZ,QAAQ,CAAA,QAAA,CAAA,EAAA,CAAG;UAAA;YAAA,QAAA,CAAA,IAAA;YAEX,YAAY,CAAC,KAAK,CAAC;YAAA,OAAA,QAAA,CAAA,MAAA;UAAA;UAAA;YAAA,OAAA,QAAA,CAAA,IAAA;QAAA;MAAA,GAAA,OAAA;IAAA,CAEtB,IAAG;IAEJ,OAAO,YAAK;MACV,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;EAEnB,OAAO;IAAE,OAAO,EAAP,OAAO;IAAE,SAAS,EAAT,SAAS;IAAE,KAAK,EAAL;EAAK,CAAE;AACtC,CAAC","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = (name) => {\n    const { library } = useEthers();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [address, setAddress] = useState();\n    useEffect(() => {\n        let mounted = true;\n        void (async () => {\n            if (!library || !name)\n                return;\n            try {\n                setIsLoading(true);\n                const resolved = await library.resolveName(name);\n                if (!mounted)\n                    return;\n                setAddress(resolved);\n            }\n            catch (e) {\n                if (!mounted)\n                    return;\n                setError(e);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, [library, name]);\n    return { address, isLoading, error };\n};\n//# sourceMappingURL=useResolveName.js.map"]},"metadata":{},"sourceType":"module"}